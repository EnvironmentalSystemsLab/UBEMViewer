{"version":3,"file":"react-tooltip.min.cjs","sources":["../src/utils/handle-style.ts","../src/utils/debounce.ts","../src/components/TooltipProvider/TooltipProvider.tsx","../src/components/TooltipProvider/TooltipWrapper.tsx","../src/utils/use-isomorphic-layout-effect.ts","../src/utils/get-scroll-parent.ts","../src/utils/compute-positions.ts","../src/components/Tooltip/Tooltip.tsx","../src/components/TooltipContent/TooltipContent.tsx","../src/utils/css-supports.ts","../src/components/TooltipController/TooltipController.tsx","../src/index.tsx"],"sourcesContent":["// This is the ID for the core styles of ReactTooltip\nconst REACT_TOOLTIP_CORE_STYLES_ID = 'react-tooltip-core-styles'\n// This is the ID for the visual styles of ReactTooltip\nconst REACT_TOOLTIP_BASE_STYLES_ID = 'react-tooltip-base-styles'\n\nconst injected = {\n  core: false,\n  base: false,\n}\n\nfunction injectStyle({\n  css,\n  id = REACT_TOOLTIP_BASE_STYLES_ID,\n  type = 'base',\n  ref,\n}: {\n  css: string\n  id?: string\n  type?: 'core' | 'base'\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ref?: any\n}) {\n  if (!css || typeof document === 'undefined' || injected[type]) {\n    return\n  }\n\n  if (\n    type === 'core' &&\n    typeof process !== 'undefined' && // this validation prevents docs from breaking even with `process?`\n    process?.env?.REACT_TOOLTIP_DISABLE_CORE_STYLES\n  ) {\n    return\n  }\n\n  if (\n    type !== 'base' &&\n    typeof process !== 'undefined' && // this validation prevents docs from breaking even with `process?`\n    process?.env?.REACT_TOOLTIP_DISABLE_BASE_STYLES\n  ) {\n    return\n  }\n\n  if (type === 'core') {\n    // eslint-disable-next-line no-param-reassign\n    id = REACT_TOOLTIP_CORE_STYLES_ID\n  }\n\n  if (!ref) {\n    // eslint-disable-next-line no-param-reassign\n    ref = {}\n  }\n  const { insertAt } = ref\n\n  if (document.getElementById(id)) {\n    // this should never happen because of `injected[type]`\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[react-tooltip] Element with id '${id}' already exists. Call \\`removeStyle()\\` first`,\n      )\n    }\n    return\n  }\n\n  const head = document.head || document.getElementsByTagName('head')[0]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const style: any = document.createElement('style')\n  style.id = id\n  style.type = 'text/css'\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild)\n    } else {\n      head.appendChild(style)\n    }\n  } else {\n    head.appendChild(style)\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css\n  } else {\n    style.appendChild(document.createTextNode(css))\n  }\n\n  injected[type] = true\n}\n\n/**\n * @deprecated Use the `disableStyleInjection` tooltip prop instead.\n * See https://react-tooltip.com/docs/examples/styling#disabling-reacttooltip-css\n */\nfunction removeStyle({\n  type = 'base',\n  id = REACT_TOOLTIP_BASE_STYLES_ID,\n}: {\n  type?: 'core' | 'base'\n  id?: string\n} = {}) {\n  if (!injected[type]) {\n    return\n  }\n\n  if (type === 'core') {\n    // eslint-disable-next-line no-param-reassign\n    id = REACT_TOOLTIP_CORE_STYLES_ID\n  }\n\n  const style = document.getElementById(id)\n  if (style?.tagName === 'style') {\n    style?.remove()\n  } else if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `[react-tooltip] Failed to remove 'style' element with id '${id}'. Call \\`injectStyle()\\` first`,\n    )\n  }\n\n  injected[type] = false\n}\n\nexport { injectStyle, removeStyle }\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * This function debounce the received function\n * @param { function } \tfunc\t\t\t\tFunction to be debounced\n * @param { number } \t\twait\t\t\t\tTime to wait before execut the function\n * @param { boolean } \timmediate\t\tParam to define if the function will be executed immediately\n */\nconst debounce = (func: (...args: any[]) => void, wait?: number, immediate?: boolean) => {\n  let timeout: NodeJS.Timeout | null = null\n\n  return function debounced(this: typeof func, ...args: any[]) {\n    const later = () => {\n      timeout = null\n      if (!immediate) {\n        func.apply(this, args)\n      }\n    }\n\n    if (immediate && !timeout) {\n      /**\n       * there's not need to clear the timeout\n       * since we expect it to resolve and set `timeout = null`\n       */\n      func.apply(this, args)\n      timeout = setTimeout(later, wait)\n    }\n\n    if (!immediate) {\n      if (timeout) {\n        clearTimeout(timeout)\n      }\n      timeout = setTimeout(later, wait)\n    }\n  }\n}\n\nexport default debounce\n","import React, {\n  createContext,\n  PropsWithChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\nimport type {\n  AnchorRef,\n  TooltipContextData,\n  TooltipContextDataWrapper,\n} from './TooltipProviderTypes'\n\nconst DEFAULT_TOOLTIP_ID = 'DEFAULT_TOOLTIP_ID'\nconst DEFAULT_CONTEXT_DATA: TooltipContextData = {\n  anchorRefs: new Set(),\n  activeAnchor: { current: null },\n  attach: () => {\n    /* attach anchor element */\n  },\n  detach: () => {\n    /* detach anchor element */\n  },\n  setActiveAnchor: () => {\n    /* set active anchor */\n  },\n}\n\nconst DEFAULT_CONTEXT_DATA_WRAPPER: TooltipContextDataWrapper = {\n  getTooltipData: () => DEFAULT_CONTEXT_DATA,\n}\n\nconst TooltipContext = createContext<TooltipContextDataWrapper>(DEFAULT_CONTEXT_DATA_WRAPPER)\n\n/**\n * @deprecated Use the `data-tooltip-id` attribute, or the `anchorSelect` prop instead.\n * See https://react-tooltip.com/docs/getting-started\n */\nconst TooltipProvider: React.FC<PropsWithChildren<void>> = ({ children }) => {\n  const [anchorRefMap, setAnchorRefMap] = useState<Record<string, Set<AnchorRef>>>({\n    [DEFAULT_TOOLTIP_ID]: new Set(),\n  })\n  const [activeAnchorMap, setActiveAnchorMap] = useState<Record<string, AnchorRef>>({\n    [DEFAULT_TOOLTIP_ID]: { current: null },\n  })\n\n  const attach = (tooltipId: string, ...refs: AnchorRef[]) => {\n    setAnchorRefMap((oldMap) => {\n      const tooltipRefs = oldMap[tooltipId] ?? new Set()\n      refs.forEach((ref) => tooltipRefs.add(ref))\n      // create new object to trigger re-render\n      return { ...oldMap, [tooltipId]: new Set(tooltipRefs) }\n    })\n  }\n\n  const detach = (tooltipId: string, ...refs: AnchorRef[]) => {\n    setAnchorRefMap((oldMap) => {\n      const tooltipRefs = oldMap[tooltipId]\n      if (!tooltipRefs) {\n        // tooltip not found\n        // maybe thow error?\n        return oldMap\n      }\n      refs.forEach((ref) => tooltipRefs.delete(ref))\n      // create new object to trigger re-render\n      return { ...oldMap }\n    })\n  }\n\n  const setActiveAnchor = (tooltipId: string, ref: React.RefObject<HTMLElement>) => {\n    setActiveAnchorMap((oldMap) => {\n      if (oldMap[tooltipId]?.current === ref.current) {\n        return oldMap\n      }\n      // create new object to trigger re-render\n      return { ...oldMap, [tooltipId]: ref }\n    })\n  }\n\n  const getTooltipData = useCallback(\n    (tooltipId = DEFAULT_TOOLTIP_ID) => ({\n      anchorRefs: anchorRefMap[tooltipId] ?? new Set(),\n      activeAnchor: activeAnchorMap[tooltipId] ?? { current: null },\n      attach: (...refs: AnchorRef[]) => attach(tooltipId, ...refs),\n      detach: (...refs: AnchorRef[]) => detach(tooltipId, ...refs),\n      setActiveAnchor: (ref: AnchorRef) => setActiveAnchor(tooltipId, ref),\n    }),\n    [anchorRefMap, activeAnchorMap, attach, detach],\n  )\n\n  const context = useMemo(() => {\n    return {\n      getTooltipData,\n    }\n  }, [getTooltipData])\n\n  return <TooltipContext.Provider value={context}>{children}</TooltipContext.Provider>\n}\n\nexport function useTooltip(tooltipId = DEFAULT_TOOLTIP_ID) {\n  return useContext(TooltipContext).getTooltipData(tooltipId)\n}\n\nexport default TooltipProvider\n","import React, { useEffect, useRef } from 'react'\nimport classNames from 'classnames'\nimport { useTooltip } from './TooltipProvider'\nimport type { ITooltipWrapper } from './TooltipProviderTypes'\n\n/**\n * @deprecated Use the `data-tooltip-id` attribute, or the `anchorSelect` prop instead.\n * See https://react-tooltip.com/docs/getting-started\n */\nconst TooltipWrapper = ({\n  tooltipId,\n  children,\n  className,\n  place,\n  content,\n  html,\n  variant,\n  offset,\n  wrapper,\n  events,\n  positionStrategy,\n  delayShow,\n  delayHide,\n}: ITooltipWrapper) => {\n  const { attach, detach } = useTooltip(tooltipId)\n  const anchorRef = useRef<HTMLElement | null>(null)\n\n  useEffect(() => {\n    attach(anchorRef)\n    return () => {\n      detach(anchorRef)\n    }\n  }, [])\n\n  return (\n    <span\n      ref={anchorRef}\n      className={classNames('react-tooltip-wrapper', className)}\n      data-tooltip-place={place}\n      data-tooltip-content={content}\n      data-tooltip-html={html}\n      data-tooltip-variant={variant}\n      data-tooltip-offset={offset}\n      data-tooltip-wrapper={wrapper}\n      data-tooltip-events={events}\n      data-tooltip-position-strategy={positionStrategy}\n      data-tooltip-delay-show={delayShow}\n      data-tooltip-delay-hide={delayHide}\n    >\n      {children}\n    </span>\n  )\n}\n\nexport default TooltipWrapper\n","import { useLayoutEffect, useEffect } from 'react'\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nexport default useIsomorphicLayoutEffect\n","const isScrollable = (node: Element) => {\n  if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n    return false\n  }\n  const style = getComputedStyle(node)\n  return ['overflow', 'overflow-x', 'overflow-y'].some((propertyName) => {\n    const value = style.getPropertyValue(propertyName)\n    return value === 'auto' || value === 'scroll'\n  })\n}\n\nexport const getScrollParent = (node: Element | null) => {\n  if (!node) {\n    return null\n  }\n  let currentParent = node.parentElement\n  while (currentParent) {\n    if (isScrollable(currentParent)) {\n      return currentParent\n    }\n    currentParent = currentParent.parentElement\n  }\n  return document.scrollingElement || document.documentElement\n}\n","import { computePosition, offset, shift, arrow, flip } from '@floating-ui/dom'\nimport type { IComputePositions } from './compute-positions-types'\n\nexport const computeTooltipPosition = async ({\n  elementReference = null,\n  tooltipReference = null,\n  tooltipArrowReference = null,\n  place = 'top',\n  offset: offsetValue = 10,\n  strategy = 'absolute',\n  middlewares = [offset(Number(offsetValue)), flip(), shift({ padding: 5 })],\n  border,\n}: IComputePositions) => {\n  if (!elementReference) {\n    // elementReference can be null or undefined and we will not compute the position\n    // eslint-disable-next-line no-console\n    // console.error('The reference element for tooltip was not defined: ', elementReference)\n    return { tooltipStyles: {}, tooltipArrowStyles: {}, place }\n  }\n\n  if (tooltipReference === null) {\n    return { tooltipStyles: {}, tooltipArrowStyles: {}, place }\n  }\n\n  const middleware = middlewares\n\n  if (tooltipArrowReference) {\n    middleware.push(arrow({ element: tooltipArrowReference as HTMLElement, padding: 5 }))\n\n    return computePosition(elementReference as HTMLElement, tooltipReference as HTMLElement, {\n      placement: place,\n      strategy,\n      middleware,\n    }).then(({ x, y, placement, middlewareData }) => {\n      const styles = { left: `${x}px`, top: `${y}px`, border }\n\n      const { x: arrowX, y: arrowY } = middlewareData.arrow ?? { x: 0, y: 0 }\n\n      const staticSide =\n        {\n          top: 'bottom',\n          right: 'left',\n          bottom: 'top',\n          left: 'right',\n        }[placement.split('-')[0]] ?? 'bottom'\n\n      const borderSide = border && {\n        borderBottom: border,\n        borderRight: border,\n      }\n\n      let borderWidth = 0\n      if (border) {\n        const match = `${border}`.match(/(\\d+)px/)\n        if (match?.[1]) {\n          borderWidth = Number(match[1])\n        } else {\n          /**\n           * this means `border` was set without `width`, or non-px value\n           */\n          borderWidth = 1\n        }\n      }\n\n      const arrowStyle = {\n        left: arrowX != null ? `${arrowX}px` : '',\n        top: arrowY != null ? `${arrowY}px` : '',\n        right: '',\n        bottom: '',\n        ...borderSide,\n        [staticSide]: `-${4 + borderWidth}px`,\n      }\n\n      return { tooltipStyles: styles, tooltipArrowStyles: arrowStyle, place: placement }\n    })\n  }\n\n  return computePosition(elementReference as HTMLElement, tooltipReference as HTMLElement, {\n    placement: 'bottom',\n    strategy,\n    middleware,\n  }).then(({ x, y, placement }) => {\n    const styles = { left: `${x}px`, top: `${y}px` }\n\n    return { tooltipStyles: styles, tooltipArrowStyles: {}, place: placement }\n  })\n}\n","import React, { useEffect, useState, useRef, useCallback, useImperativeHandle } from 'react'\nimport { autoUpdate } from '@floating-ui/dom'\nimport classNames from 'classnames'\nimport debounce from 'utils/debounce'\nimport { useTooltip } from 'components/TooltipProvider'\nimport useIsomorphicLayoutEffect from 'utils/use-isomorphic-layout-effect'\nimport { getScrollParent } from 'utils/get-scroll-parent'\nimport { computeTooltipPosition } from 'utils/compute-positions'\nimport coreStyles from './core-styles.module.css'\nimport styles from './styles.module.css'\nimport type {\n  AnchorCloseEvents,\n  AnchorOpenEvents,\n  GlobalCloseEvents,\n  IPosition,\n  ITooltip,\n  PlacesType,\n  TooltipImperativeOpenOptions,\n} from './TooltipTypes'\n\nconst Tooltip = ({\n  // props\n  forwardRef,\n  id,\n  className,\n  classNameArrow,\n  variant = 'dark',\n  anchorId,\n  anchorSelect,\n  place = 'top',\n  offset = 10,\n  events = ['hover'],\n  openOnClick = false,\n  positionStrategy = 'absolute',\n  middlewares,\n  wrapper: WrapperElement,\n  delayShow = 0,\n  delayHide = 0,\n  float = false,\n  hidden = false,\n  noArrow = false,\n  clickable = false,\n  closeOnEsc = false,\n  closeOnScroll = false,\n  closeOnResize = false,\n  openEvents,\n  closeEvents,\n  globalCloseEvents,\n  imperativeModeOnly,\n  style: externalStyles,\n  position,\n  afterShow,\n  afterHide,\n  // props handled by controller\n  content,\n  contentWrapperRef,\n  isOpen,\n  setIsOpen,\n  activeAnchor,\n  setActiveAnchor,\n  border,\n  opacity,\n  arrowColor,\n}: ITooltip) => {\n  const tooltipRef = useRef<HTMLElement>(null)\n  const tooltipArrowRef = useRef<HTMLElement>(null)\n  const tooltipShowDelayTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const tooltipHideDelayTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const [actualPlacement, setActualPlacement] = useState(place)\n  const [inlineStyles, setInlineStyles] = useState({})\n  const [inlineArrowStyles, setInlineArrowStyles] = useState({})\n  const [show, setShow] = useState(false)\n  const [rendered, setRendered] = useState(false)\n  const [imperativeOptions, setImperativeOptions] = useState<TooltipImperativeOpenOptions | null>(\n    null,\n  )\n  const wasShowing = useRef(false)\n  const lastFloatPosition = useRef<IPosition | null>(null)\n  /**\n   * @todo Remove this in a future version (provider/wrapper method is deprecated)\n   */\n  const { anchorRefs, setActiveAnchor: setProviderActiveAnchor } = useTooltip(id)\n  const hoveringTooltip = useRef(false)\n  const [anchorsBySelect, setAnchorsBySelect] = useState<HTMLElement[]>([])\n  const mounted = useRef(false)\n\n  /**\n   * @todo Update when deprecated stuff gets removed.\n   */\n  const shouldOpenOnClick = openOnClick || events.includes('click')\n  const hasClickEvent =\n    shouldOpenOnClick || openEvents?.click || openEvents?.dblclick || openEvents?.mousedown\n  const actualOpenEvents: AnchorOpenEvents = openEvents\n    ? { ...openEvents }\n    : {\n        mouseenter: true,\n        focus: true,\n        click: false,\n        dblclick: false,\n        mousedown: false,\n      }\n  if (!openEvents && shouldOpenOnClick) {\n    Object.assign(actualOpenEvents, {\n      mouseenter: false,\n      focus: false,\n      click: true,\n    })\n  }\n  const actualCloseEvents: AnchorCloseEvents = closeEvents\n    ? { ...closeEvents }\n    : {\n        mouseleave: true,\n        blur: true,\n        click: false,\n        dblclick: false,\n        mouseup: false,\n      }\n  if (!closeEvents && shouldOpenOnClick) {\n    Object.assign(actualCloseEvents, {\n      mouseleave: false,\n      blur: false,\n    })\n  }\n  const actualGlobalCloseEvents: GlobalCloseEvents = globalCloseEvents\n    ? { ...globalCloseEvents }\n    : {\n        escape: closeOnEsc || false,\n        scroll: closeOnScroll || false,\n        resize: closeOnResize || false,\n        clickOutsideAnchor: hasClickEvent || false,\n      }\n\n  if (imperativeModeOnly) {\n    Object.assign(actualOpenEvents, {\n      mouseenter: false,\n      focus: false,\n      click: false,\n      dblclick: false,\n      mousedown: false,\n    })\n    Object.assign(actualCloseEvents, {\n      mouseleave: false,\n      blur: false,\n      click: false,\n      dblclick: false,\n      mouseup: false,\n    })\n    Object.assign(actualGlobalCloseEvents, {\n      escape: false,\n      scroll: false,\n      resize: false,\n      clickOutsideAnchor: false,\n    })\n  }\n\n  /**\n   * useLayoutEffect runs before useEffect,\n   * but should be used carefully because of caveats\n   * https://beta.reactjs.org/reference/react/useLayoutEffect#caveats\n   */\n  useIsomorphicLayoutEffect(() => {\n    mounted.current = true\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  const handleShow = (value: boolean) => {\n    if (!mounted.current) {\n      return\n    }\n    if (value) {\n      setRendered(true)\n    }\n    /**\n     * wait for the component to render and calculate position\n     * before actually showing\n     */\n    setTimeout(() => {\n      if (!mounted.current) {\n        return\n      }\n      setIsOpen?.(value)\n      if (isOpen === undefined) {\n        setShow(value)\n      }\n    }, 10)\n  }\n\n  /**\n   * this replicates the effect from `handleShow()`\n   * when `isOpen` is changed from outside\n   */\n  useEffect(() => {\n    if (isOpen === undefined) {\n      return () => null\n    }\n    if (isOpen) {\n      setRendered(true)\n    }\n    const timeout = setTimeout(() => {\n      setShow(isOpen)\n    }, 10)\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [isOpen])\n\n  useEffect(() => {\n    if (show === wasShowing.current) {\n      return\n    }\n    wasShowing.current = show\n    if (show) {\n      afterShow?.()\n    } else {\n      /**\n       * see `onTransitionEnd` on tooltip wrapper\n       */\n    }\n  }, [show])\n\n  const handleShowTooltipDelayed = (delay = delayShow) => {\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n\n    tooltipShowDelayTimerRef.current = setTimeout(() => {\n      handleShow(true)\n    }, delay)\n  }\n\n  const handleHideTooltipDelayed = (delay = delayHide) => {\n    if (tooltipHideDelayTimerRef.current) {\n      clearTimeout(tooltipHideDelayTimerRef.current)\n    }\n\n    tooltipHideDelayTimerRef.current = setTimeout(() => {\n      if (hoveringTooltip.current) {\n        return\n      }\n      handleShow(false)\n    }, delay)\n  }\n\n  const handleShowTooltip = (event?: Event) => {\n    if (!event) {\n      return\n    }\n    const target = (event.currentTarget ?? event.target) as HTMLElement | null\n    if (!target?.isConnected) {\n      /**\n       * this happens when the target is removed from the DOM\n       * at the same time the tooltip gets triggered\n       */\n      setActiveAnchor(null)\n      setProviderActiveAnchor({ current: null })\n      return\n    }\n    if (delayShow) {\n      handleShowTooltipDelayed()\n    } else {\n      handleShow(true)\n    }\n    setActiveAnchor(target)\n    setProviderActiveAnchor({ current: target })\n\n    if (tooltipHideDelayTimerRef.current) {\n      clearTimeout(tooltipHideDelayTimerRef.current)\n    }\n  }\n\n  const handleHideTooltip = () => {\n    if (clickable) {\n      // allow time for the mouse to reach the tooltip, in case there's a gap\n      handleHideTooltipDelayed(delayHide || 100)\n    } else if (delayHide) {\n      handleHideTooltipDelayed()\n    } else {\n      handleShow(false)\n    }\n\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n  }\n\n  const handleTooltipPosition = ({ x, y }: IPosition) => {\n    const virtualElement = {\n      getBoundingClientRect() {\n        return {\n          x,\n          y,\n          width: 0,\n          height: 0,\n          top: y,\n          left: x,\n          right: x,\n          bottom: y,\n        }\n      },\n    } as Element\n    computeTooltipPosition({\n      place: imperativeOptions?.place ?? place,\n      offset,\n      elementReference: virtualElement,\n      tooltipReference: tooltipRef.current,\n      tooltipArrowReference: tooltipArrowRef.current,\n      strategy: positionStrategy,\n      middlewares,\n      border,\n    }).then((computedStylesData) => {\n      if (Object.keys(computedStylesData.tooltipStyles).length) {\n        setInlineStyles(computedStylesData.tooltipStyles)\n      }\n      if (Object.keys(computedStylesData.tooltipArrowStyles).length) {\n        setInlineArrowStyles(computedStylesData.tooltipArrowStyles)\n      }\n      setActualPlacement(computedStylesData.place as PlacesType)\n    })\n  }\n\n  const handleMouseMove = (event?: Event) => {\n    if (!event) {\n      return\n    }\n    const mouseEvent = event as MouseEvent\n    const mousePosition = {\n      x: mouseEvent.clientX,\n      y: mouseEvent.clientY,\n    }\n    handleTooltipPosition(mousePosition)\n    lastFloatPosition.current = mousePosition\n  }\n\n  const handleClickOutsideAnchors = (event: MouseEvent) => {\n    if (!show) {\n      return\n    }\n    const target = event.target as HTMLElement\n    if (tooltipRef.current?.contains(target)) {\n      return\n    }\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    const anchors = [anchorById, ...anchorsBySelect]\n    if (anchors.some((anchor) => anchor?.contains(target))) {\n      return\n    }\n    handleShow(false)\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n  }\n\n  // debounce handler to prevent call twice when\n  // mouse enter and focus events being triggered toggether\n  const debouncedHandleShowTooltip = debounce(handleShowTooltip, 50, true)\n  const debouncedHandleHideTooltip = debounce(handleHideTooltip, 50, true)\n  const updateTooltipPosition = useCallback(() => {\n    const actualPosition = imperativeOptions?.position ?? position\n    if (actualPosition) {\n      // if `position` is set, override regular and `float` positioning\n      handleTooltipPosition(actualPosition)\n      return\n    }\n\n    if (float) {\n      if (lastFloatPosition.current) {\n        /*\n          Without this, changes to `content`, `place`, `offset`, ..., will only\n          trigger a position calculation after a `mousemove` event.\n\n          To see why this matters, comment this line, run `yarn dev` and click the\n          \"Hover me!\" anchor.\n        */\n        handleTooltipPosition(lastFloatPosition.current)\n      }\n      // if `float` is set, override regular positioning\n      return\n    }\n\n    if (!activeAnchor?.isConnected) {\n      return\n    }\n\n    computeTooltipPosition({\n      place: imperativeOptions?.place ?? place,\n      offset,\n      elementReference: activeAnchor,\n      tooltipReference: tooltipRef.current,\n      tooltipArrowReference: tooltipArrowRef.current,\n      strategy: positionStrategy,\n      middlewares,\n      border,\n    }).then((computedStylesData) => {\n      if (!mounted.current) {\n        // invalidate computed positions after remount\n        return\n      }\n      if (Object.keys(computedStylesData.tooltipStyles).length) {\n        setInlineStyles(computedStylesData.tooltipStyles)\n      }\n      if (Object.keys(computedStylesData.tooltipArrowStyles).length) {\n        setInlineArrowStyles(computedStylesData.tooltipArrowStyles)\n      }\n      setActualPlacement(computedStylesData.place as PlacesType)\n    })\n  }, [\n    show,\n    activeAnchor,\n    content,\n    externalStyles,\n    place,\n    imperativeOptions?.place,\n    offset,\n    positionStrategy,\n    position,\n    imperativeOptions?.position,\n    float,\n  ])\n\n  useEffect(() => {\n    const elementRefs = new Set(anchorRefs)\n\n    anchorsBySelect.forEach((anchor) => {\n      elementRefs.add({ current: anchor })\n    })\n\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    if (anchorById) {\n      elementRefs.add({ current: anchorById })\n    }\n\n    const handleScrollResize = () => {\n      handleShow(false)\n    }\n\n    const anchorScrollParent = getScrollParent(activeAnchor)\n    const tooltipScrollParent = getScrollParent(tooltipRef.current)\n\n    if (actualGlobalCloseEvents.scroll) {\n      window.addEventListener('scroll', handleScrollResize)\n      anchorScrollParent?.addEventListener('scroll', handleScrollResize)\n      tooltipScrollParent?.addEventListener('scroll', handleScrollResize)\n    }\n    let updateTooltipCleanup: null | (() => void) = null\n    if (actualGlobalCloseEvents.resize) {\n      window.addEventListener('resize', handleScrollResize)\n    } else if (activeAnchor && tooltipRef.current) {\n      updateTooltipCleanup = autoUpdate(\n        activeAnchor as HTMLElement,\n        tooltipRef.current as HTMLElement,\n        updateTooltipPosition,\n        {\n          ancestorResize: true,\n          elementResize: true,\n          layoutShift: true,\n        },\n      )\n    }\n\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key !== 'Escape') {\n        return\n      }\n      handleShow(false)\n    }\n    if (actualGlobalCloseEvents.escape) {\n      window.addEventListener('keydown', handleEsc)\n    }\n\n    if (actualGlobalCloseEvents.clickOutsideAnchor) {\n      window.addEventListener('click', handleClickOutsideAnchors)\n    }\n\n    const enabledEvents: { event: string; listener: (event?: Event) => void }[] = []\n\n    const handleClickOpenTooltipAnchor = (event?: Event) => {\n      if (show) {\n        return\n      }\n      handleShowTooltip(event)\n    }\n    const handleClickCloseTooltipAnchor = () => {\n      if (!show) {\n        return\n      }\n      handleHideTooltip()\n    }\n\n    const regularEvents = ['mouseenter', 'mouseleave', 'focus', 'blur']\n    const clickEvents = ['click', 'dblclick', 'mousedown', 'mouseup']\n\n    Object.entries(actualOpenEvents).forEach(([event, enabled]) => {\n      if (!enabled) {\n        return\n      }\n      if (regularEvents.includes(event)) {\n        enabledEvents.push({ event, listener: debouncedHandleShowTooltip })\n      } else if (clickEvents.includes(event)) {\n        enabledEvents.push({ event, listener: handleClickOpenTooltipAnchor })\n      } else {\n        // never happens\n      }\n    })\n\n    Object.entries(actualCloseEvents).forEach(([event, enabled]) => {\n      if (!enabled) {\n        return\n      }\n      if (regularEvents.includes(event)) {\n        enabledEvents.push({ event, listener: debouncedHandleHideTooltip })\n      } else if (clickEvents.includes(event)) {\n        enabledEvents.push({ event, listener: handleClickCloseTooltipAnchor })\n      } else {\n        // never happens\n      }\n    })\n\n    if (float) {\n      enabledEvents.push({\n        event: 'mousemove',\n        listener: handleMouseMove,\n      })\n    }\n\n    const handleMouseEnterTooltip = () => {\n      hoveringTooltip.current = true\n    }\n    const handleMouseLeaveTooltip = () => {\n      hoveringTooltip.current = false\n      handleHideTooltip()\n    }\n\n    if (clickable && !hasClickEvent) {\n      // used to keep the tooltip open when hovering content.\n      // not needed if using click events.\n      tooltipRef.current?.addEventListener('mouseenter', handleMouseEnterTooltip)\n      tooltipRef.current?.addEventListener('mouseleave', handleMouseLeaveTooltip)\n    }\n\n    enabledEvents.forEach(({ event, listener }) => {\n      elementRefs.forEach((ref) => {\n        ref.current?.addEventListener(event, listener)\n      })\n    })\n\n    return () => {\n      if (actualGlobalCloseEvents.scroll) {\n        window.removeEventListener('scroll', handleScrollResize)\n        anchorScrollParent?.removeEventListener('scroll', handleScrollResize)\n        tooltipScrollParent?.removeEventListener('scroll', handleScrollResize)\n      }\n      if (actualGlobalCloseEvents.resize) {\n        window.removeEventListener('resize', handleScrollResize)\n      } else {\n        updateTooltipCleanup?.()\n      }\n      if (actualGlobalCloseEvents.clickOutsideAnchor) {\n        window.removeEventListener('click', handleClickOutsideAnchors)\n      }\n      if (actualGlobalCloseEvents.escape) {\n        window.removeEventListener('keydown', handleEsc)\n      }\n      if (clickable && !hasClickEvent) {\n        tooltipRef.current?.removeEventListener('mouseenter', handleMouseEnterTooltip)\n        tooltipRef.current?.removeEventListener('mouseleave', handleMouseLeaveTooltip)\n      }\n      enabledEvents.forEach(({ event, listener }) => {\n        elementRefs.forEach((ref) => {\n          ref.current?.removeEventListener(event, listener)\n        })\n      })\n    }\n    /**\n     * rendered is also a dependency to ensure anchor observers are re-registered\n     * since `tooltipRef` becomes stale after removing/adding the tooltip to the DOM\n     */\n  }, [\n    activeAnchor,\n    updateTooltipPosition,\n    rendered,\n    anchorRefs,\n    anchorsBySelect,\n    // the effect uses the `actual*Events` objects, but this should work\n    openEvents,\n    closeEvents,\n    globalCloseEvents,\n    shouldOpenOnClick,\n  ])\n\n  useEffect(() => {\n    let selector = imperativeOptions?.anchorSelect ?? anchorSelect ?? ''\n    if (!selector && id) {\n      selector = `[data-tooltip-id='${id}']`\n    }\n    const documentObserverCallback: MutationCallback = (mutationList) => {\n      const newAnchors: HTMLElement[] = []\n      const removedAnchors: HTMLElement[] = []\n      mutationList.forEach((mutation) => {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-tooltip-id') {\n          const newId = (mutation.target as HTMLElement).getAttribute('data-tooltip-id')\n          if (newId === id) {\n            newAnchors.push(mutation.target as HTMLElement)\n          }\n        }\n        if (mutation.type !== 'childList') {\n          return\n        }\n        if (activeAnchor) {\n          const elements = [...mutation.removedNodes].filter((node) => node.nodeType === 1)\n          if (selector) {\n            try {\n              removedAnchors.push(\n                // the element itself is an anchor\n                ...(elements.filter((element) =>\n                  (element as HTMLElement).matches(selector),\n                ) as HTMLElement[]),\n              )\n              removedAnchors.push(\n                // the element has children which are anchors\n                ...elements.flatMap(\n                  (element) =>\n                    [...(element as HTMLElement).querySelectorAll(selector)] as HTMLElement[],\n                ),\n              )\n            } catch {\n              /**\n               * invalid CSS selector.\n               * already warned on tooltip controller\n               */\n            }\n          }\n          elements.some((node) => {\n            if (node?.contains?.(activeAnchor)) {\n              setRendered(false)\n              handleShow(false)\n              setActiveAnchor(null)\n              if (tooltipShowDelayTimerRef.current) {\n                clearTimeout(tooltipShowDelayTimerRef.current)\n              }\n              if (tooltipHideDelayTimerRef.current) {\n                clearTimeout(tooltipHideDelayTimerRef.current)\n              }\n              return true\n            }\n            return false\n          })\n        }\n        if (!selector) {\n          return\n        }\n        try {\n          const elements = [...mutation.addedNodes].filter((node) => node.nodeType === 1)\n          newAnchors.push(\n            // the element itself is an anchor\n            ...(elements.filter((element) =>\n              (element as HTMLElement).matches(selector),\n            ) as HTMLElement[]),\n          )\n          newAnchors.push(\n            // the element has children which are anchors\n            ...elements.flatMap(\n              (element) =>\n                [...(element as HTMLElement).querySelectorAll(selector)] as HTMLElement[],\n            ),\n          )\n        } catch {\n          /**\n           * invalid CSS selector.\n           * already warned on tooltip controller\n           */\n        }\n      })\n      if (newAnchors.length || removedAnchors.length) {\n        setAnchorsBySelect((anchors) => [\n          ...anchors.filter((anchor) => !removedAnchors.includes(anchor)),\n          ...newAnchors,\n        ])\n      }\n    }\n    const documentObserver = new MutationObserver(documentObserverCallback)\n    // watch for anchor being removed from the DOM\n    documentObserver.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['data-tooltip-id'],\n    })\n    return () => {\n      documentObserver.disconnect()\n    }\n  }, [id, anchorSelect, imperativeOptions?.anchorSelect, activeAnchor])\n\n  useEffect(() => {\n    updateTooltipPosition()\n  }, [updateTooltipPosition])\n\n  useEffect(() => {\n    if (!contentWrapperRef?.current) {\n      return () => null\n    }\n    const contentObserver = new ResizeObserver(() => {\n      updateTooltipPosition()\n    })\n    contentObserver.observe(contentWrapperRef.current)\n    return () => {\n      contentObserver.disconnect()\n    }\n  }, [content, contentWrapperRef?.current])\n\n  useEffect(() => {\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    const anchors = [...anchorsBySelect, anchorById]\n    if (!activeAnchor || !anchors.includes(activeAnchor)) {\n      /**\n       * if there is no active anchor,\n       * or if the current active anchor is not amongst the allowed ones,\n       * reset it\n       */\n      setActiveAnchor(anchorsBySelect[0] ?? anchorById)\n    }\n  }, [anchorId, anchorsBySelect, activeAnchor])\n\n  useEffect(() => {\n    return () => {\n      if (tooltipShowDelayTimerRef.current) {\n        clearTimeout(tooltipShowDelayTimerRef.current)\n      }\n      if (tooltipHideDelayTimerRef.current) {\n        clearTimeout(tooltipHideDelayTimerRef.current)\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    let selector = imperativeOptions?.anchorSelect ?? anchorSelect\n    if (!selector && id) {\n      selector = `[data-tooltip-id='${id}']`\n    }\n    if (!selector) {\n      return\n    }\n    try {\n      const anchors = Array.from(document.querySelectorAll<HTMLElement>(selector))\n      setAnchorsBySelect(anchors)\n    } catch {\n      // warning was already issued in the controller\n      setAnchorsBySelect([])\n    }\n  }, [id, anchorSelect, imperativeOptions?.anchorSelect])\n\n  const actualContent = imperativeOptions?.content ?? content\n  const canShow = show && Object.keys(inlineStyles).length > 0\n\n  useImperativeHandle(forwardRef, () => ({\n    open: (options) => {\n      if (options?.anchorSelect) {\n        try {\n          document.querySelector(options.anchorSelect)\n        } catch {\n          if (!process.env.NODE_ENV || process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.warn(`[react-tooltip] \"${options.anchorSelect}\" is not a valid CSS selector`)\n          }\n          return\n        }\n      }\n      setImperativeOptions(options ?? null)\n      if (options?.delay) {\n        handleShowTooltipDelayed(options.delay)\n      } else {\n        handleShow(true)\n      }\n    },\n    close: (options) => {\n      if (options?.delay) {\n        handleHideTooltipDelayed(options.delay)\n      } else {\n        handleShow(false)\n      }\n    },\n    activeAnchor,\n    place: actualPlacement,\n    isOpen: Boolean(rendered && !hidden && actualContent && canShow),\n  }))\n\n  return rendered && !hidden && actualContent ? (\n    <WrapperElement\n      id={id}\n      role=\"tooltip\"\n      className={classNames(\n        'react-tooltip',\n        coreStyles['tooltip'],\n        styles['tooltip'],\n        styles[variant],\n        className,\n        `react-tooltip__place-${actualPlacement}`,\n        coreStyles[canShow ? 'show' : 'closing'],\n        canShow ? 'react-tooltip__show' : 'react-tooltip__closing',\n        positionStrategy === 'fixed' && coreStyles['fixed'],\n        clickable && coreStyles['clickable'],\n      )}\n      onTransitionEnd={(event: TransitionEvent) => {\n        /**\n         * @warning if `--rt-transition-closing-delay` is set to 0,\n         * the tooltip will be stuck (but not visible) on the DOM\n         */\n        if (show || event.propertyName !== 'opacity') {\n          return\n        }\n        setRendered(false)\n        setImperativeOptions(null)\n        afterHide?.()\n      }}\n      style={{\n        ...externalStyles,\n        ...inlineStyles,\n        opacity: opacity !== undefined && canShow ? opacity : undefined,\n      }}\n      ref={tooltipRef}\n    >\n      {actualContent}\n      <WrapperElement\n        className={classNames(\n          'react-tooltip-arrow',\n          coreStyles['arrow'],\n          styles['arrow'],\n          classNameArrow,\n          noArrow && coreStyles['noArrow'],\n        )}\n        style={{\n          ...inlineArrowStyles,\n          background: arrowColor\n            ? `linear-gradient(to right bottom, transparent 50%, ${arrowColor} 50%)`\n            : undefined,\n        }}\n        ref={tooltipArrowRef}\n      />\n    </WrapperElement>\n  ) : null\n}\n\nexport default Tooltip\n","/* eslint-disable react/no-danger */\nimport React from 'react'\nimport type { ITooltipContent } from './TooltipContentTypes'\n\nconst TooltipContent = ({ content }: ITooltipContent) => {\n  return <span dangerouslySetInnerHTML={{ __html: content }} />\n}\n\nexport default TooltipContent\n","const cssSupports = (property: string, value: string): boolean => {\n  const hasCssSupports = 'CSS' in window && 'supports' in window.CSS\n  return hasCssSupports ? window.CSS.supports(property, value) : true\n}\n\nexport default cssSupports\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Tooltip } from 'components/Tooltip'\nimport type {\n  EventsType,\n  PositionStrategy,\n  PlacesType,\n  VariantType,\n  WrapperType,\n  DataAttribute,\n  ITooltip,\n  ChildrenType,\n  TooltipRefProps,\n} from 'components/Tooltip/TooltipTypes'\nimport { useTooltip } from 'components/TooltipProvider'\nimport { TooltipContent } from 'components/TooltipContent'\nimport cssSupports from 'utils/css-supports'\nimport type { ITooltipController } from './TooltipControllerTypes'\n\nconst TooltipController = React.forwardRef<TooltipRefProps, ITooltipController>(\n  (\n    {\n      id,\n      anchorId,\n      anchorSelect,\n      content,\n      html,\n      render,\n      className,\n      classNameArrow,\n      variant = 'dark',\n      place = 'top',\n      offset = 10,\n      wrapper = 'div',\n      children = null,\n      events = ['hover'],\n      openOnClick = false,\n      positionStrategy = 'absolute',\n      middlewares,\n      delayShow = 0,\n      delayHide = 0,\n      float = false,\n      hidden = false,\n      noArrow = false,\n      clickable = false,\n      closeOnEsc = false,\n      closeOnScroll = false,\n      closeOnResize = false,\n      openEvents,\n      closeEvents,\n      globalCloseEvents,\n      imperativeModeOnly = false,\n      style,\n      position,\n      isOpen,\n      disableStyleInjection = false,\n      border,\n      opacity,\n      arrowColor,\n      setIsOpen,\n      afterShow,\n      afterHide,\n    }: ITooltipController,\n    ref,\n  ) => {\n    const [tooltipContent, setTooltipContent] = useState(content)\n    const [tooltipHtml, setTooltipHtml] = useState(html)\n    const [tooltipPlace, setTooltipPlace] = useState(place)\n    const [tooltipVariant, setTooltipVariant] = useState(variant)\n    const [tooltipOffset, setTooltipOffset] = useState(offset)\n    const [tooltipDelayShow, setTooltipDelayShow] = useState(delayShow)\n    const [tooltipDelayHide, setTooltipDelayHide] = useState(delayHide)\n    const [tooltipFloat, setTooltipFloat] = useState(float)\n    const [tooltipHidden, setTooltipHidden] = useState(hidden)\n    const [tooltipWrapper, setTooltipWrapper] = useState<WrapperType>(wrapper)\n    const [tooltipEvents, setTooltipEvents] = useState(events)\n    const [tooltipPositionStrategy, setTooltipPositionStrategy] = useState(positionStrategy)\n    const [activeAnchor, setActiveAnchor] = useState<HTMLElement | null>(null)\n    const styleInjectionRef = useRef(disableStyleInjection)\n    /**\n     * @todo Remove this in a future version (provider/wrapper method is deprecated)\n     */\n    const { anchorRefs, activeAnchor: providerActiveAnchor } = useTooltip(id)\n\n    const getDataAttributesFromAnchorElement = (elementReference: HTMLElement) => {\n      const dataAttributes = elementReference?.getAttributeNames().reduce((acc, name) => {\n        if (name.startsWith('data-tooltip-')) {\n          const parsedAttribute = name.replace(/^data-tooltip-/, '') as DataAttribute\n          acc[parsedAttribute] = elementReference?.getAttribute(name) ?? null\n        }\n        return acc\n      }, {} as Record<DataAttribute, string | null>)\n\n      return dataAttributes\n    }\n\n    const applyAllDataAttributesFromAnchorElement = (\n      dataAttributes: Record<string, string | null>,\n    ) => {\n      const handleDataAttributes: Record<DataAttribute, (value: string | null) => void> = {\n        place: (value) => {\n          setTooltipPlace((value as PlacesType) ?? place)\n        },\n        content: (value) => {\n          setTooltipContent(value ?? content)\n        },\n        html: (value) => {\n          setTooltipHtml(value ?? html)\n        },\n        variant: (value) => {\n          setTooltipVariant((value as VariantType) ?? variant)\n        },\n        offset: (value) => {\n          setTooltipOffset(value === null ? offset : Number(value))\n        },\n        wrapper: (value) => {\n          setTooltipWrapper((value as WrapperType) ?? wrapper)\n        },\n        events: (value) => {\n          const parsed = value?.split(' ') as EventsType[]\n          setTooltipEvents(parsed ?? events)\n        },\n        'position-strategy': (value) => {\n          setTooltipPositionStrategy((value as PositionStrategy) ?? positionStrategy)\n        },\n        'delay-show': (value) => {\n          setTooltipDelayShow(value === null ? delayShow : Number(value))\n        },\n        'delay-hide': (value) => {\n          setTooltipDelayHide(value === null ? delayHide : Number(value))\n        },\n        float: (value) => {\n          setTooltipFloat(value === null ? float : value === 'true')\n        },\n        hidden: (value) => {\n          setTooltipHidden(value === null ? hidden : value === 'true')\n        },\n      }\n      // reset unset data attributes to default values\n      // without this, data attributes from the last active anchor will still be used\n      Object.values(handleDataAttributes).forEach((handler) => handler(null))\n      Object.entries(dataAttributes).forEach(([key, value]) => {\n        handleDataAttributes[key as DataAttribute]?.(value)\n      })\n    }\n\n    useEffect(() => {\n      setTooltipContent(content)\n    }, [content])\n\n    useEffect(() => {\n      setTooltipHtml(html)\n    }, [html])\n\n    useEffect(() => {\n      setTooltipPlace(place)\n    }, [place])\n\n    useEffect(() => {\n      setTooltipVariant(variant)\n    }, [variant])\n\n    useEffect(() => {\n      setTooltipOffset(offset)\n    }, [offset])\n\n    useEffect(() => {\n      setTooltipDelayShow(delayShow)\n    }, [delayShow])\n\n    useEffect(() => {\n      setTooltipDelayHide(delayHide)\n    }, [delayHide])\n\n    useEffect(() => {\n      setTooltipFloat(float)\n    }, [float])\n\n    useEffect(() => {\n      setTooltipHidden(hidden)\n    }, [hidden])\n\n    useEffect(() => {\n      setTooltipPositionStrategy(positionStrategy)\n    }, [positionStrategy])\n\n    useEffect(() => {\n      if (styleInjectionRef.current === disableStyleInjection) {\n        return\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.warn('[react-tooltip] Do not change `disableStyleInjection` dynamically.')\n      }\n    }, [disableStyleInjection])\n\n    useEffect(() => {\n      if (typeof window !== 'undefined') {\n        window.dispatchEvent(\n          new CustomEvent('react-tooltip-inject-styles', {\n            detail: {\n              disableCore: disableStyleInjection === 'core',\n              disableBase: disableStyleInjection,\n            },\n          }),\n        )\n      }\n    }, [])\n\n    useEffect(() => {\n      const elementRefs = new Set(anchorRefs)\n\n      let selector = anchorSelect\n      if (!selector && id) {\n        selector = `[data-tooltip-id='${id}']`\n      }\n      if (selector) {\n        try {\n          const anchorsBySelect = document.querySelectorAll<HTMLElement>(selector)\n          anchorsBySelect.forEach((anchor) => {\n            elementRefs.add({ current: anchor })\n          })\n        } catch {\n          if (!process.env.NODE_ENV || process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.warn(`[react-tooltip] \"${selector}\" is not a valid CSS selector`)\n          }\n        }\n      }\n\n      const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n      if (anchorById) {\n        elementRefs.add({ current: anchorById })\n      }\n\n      if (!elementRefs.size) {\n        return () => null\n      }\n\n      const anchorElement = activeAnchor ?? anchorById ?? providerActiveAnchor.current\n\n      const observerCallback: MutationCallback = (mutationList) => {\n        mutationList.forEach((mutation) => {\n          if (\n            !anchorElement ||\n            mutation.type !== 'attributes' ||\n            !mutation.attributeName?.startsWith('data-tooltip-')\n          ) {\n            return\n          }\n          // make sure to get all set attributes, since all unset attributes are reset\n          const dataAttributes = getDataAttributesFromAnchorElement(anchorElement)\n          applyAllDataAttributesFromAnchorElement(dataAttributes)\n        })\n      }\n\n      // Create an observer instance linked to the callback function\n      const observer = new MutationObserver(observerCallback)\n\n      // do not check for subtree and childrens, we only want to know attribute changes\n      // to stay watching `data-attributes-*` from anchor element\n      const observerConfig = { attributes: true, childList: false, subtree: false }\n\n      if (anchorElement) {\n        const dataAttributes = getDataAttributesFromAnchorElement(anchorElement)\n        applyAllDataAttributesFromAnchorElement(dataAttributes)\n        // Start observing the target node for configured mutations\n        observer.observe(anchorElement, observerConfig)\n      }\n\n      return () => {\n        // Remove the observer when the tooltip is destroyed\n        observer.disconnect()\n      }\n    }, [anchorRefs, providerActiveAnchor, activeAnchor, anchorId, anchorSelect])\n\n    useEffect(() => {\n      if (process.env.NODE_ENV === 'production') {\n        return\n      }\n      if (style?.border) {\n        // eslint-disable-next-line no-console\n        console.warn('[react-tooltip] Do not set `style.border`. Use `border` prop instead.')\n      }\n      if (border && !cssSupports('border', `${border}`)) {\n        // eslint-disable-next-line no-console\n        console.warn(`[react-tooltip] \"${border}\" is not a valid \\`border\\`.`)\n      }\n      if (style?.opacity) {\n        // eslint-disable-next-line no-console\n        console.warn('[react-tooltip] Do not set `style.opacity`. Use `opacity` prop instead.')\n      }\n      if (opacity && !cssSupports('opacity', `${opacity}`)) {\n        // eslint-disable-next-line no-console\n        console.warn(`[react-tooltip] \"${opacity}\" is not a valid \\`opacity\\`.`)\n      }\n    }, [])\n\n    /**\n     * content priority: children < render or content < html\n     * children should be lower priority so that it can be used as the \"default\" content\n     */\n    let renderedContent: ChildrenType = children\n    const contentWrapperRef = useRef<HTMLDivElement>(null)\n    if (render) {\n      const rendered = render({ content: tooltipContent ?? null, activeAnchor }) as React.ReactNode\n      renderedContent = rendered ? (\n        <div ref={contentWrapperRef} className=\"react-tooltip-content-wrapper\">\n          {rendered}\n        </div>\n      ) : null\n    } else if (tooltipContent) {\n      renderedContent = tooltipContent\n    }\n    if (tooltipHtml) {\n      renderedContent = <TooltipContent content={tooltipHtml} />\n    }\n\n    const props: ITooltip = {\n      forwardRef: ref,\n      id,\n      anchorId,\n      anchorSelect,\n      className,\n      classNameArrow,\n      content: renderedContent,\n      contentWrapperRef,\n      place: tooltipPlace,\n      variant: tooltipVariant,\n      offset: tooltipOffset,\n      wrapper: tooltipWrapper,\n      events: tooltipEvents,\n      openOnClick,\n      positionStrategy: tooltipPositionStrategy,\n      middlewares,\n      delayShow: tooltipDelayShow,\n      delayHide: tooltipDelayHide,\n      float: tooltipFloat,\n      hidden: tooltipHidden,\n      noArrow,\n      clickable,\n      closeOnEsc,\n      closeOnScroll,\n      closeOnResize,\n      openEvents,\n      closeEvents,\n      globalCloseEvents,\n      imperativeModeOnly,\n      style,\n      position,\n      isOpen,\n      border,\n      opacity,\n      arrowColor,\n      setIsOpen,\n      afterShow,\n      afterHide,\n      activeAnchor,\n      setActiveAnchor: (anchor: HTMLElement | null) => setActiveAnchor(anchor),\n    }\n\n    return <Tooltip {...props} />\n  },\n)\n\nexport default TooltipController\n","import './tokens.css'\n\nimport { injectStyle } from 'utils/handle-style'\n\nimport type {\n  ChildrenType,\n  DataAttribute,\n  EventsType,\n  PlacesType,\n  PositionStrategy,\n  VariantType,\n  WrapperType,\n  IPosition,\n  Middleware,\n  TooltipRefProps,\n} from './components/Tooltip/TooltipTypes'\nimport type { ITooltipController } from './components/TooltipController/TooltipControllerTypes'\nimport type { ITooltipWrapper } from './components/TooltipProvider/TooltipProviderTypes'\n\n// those content will be replaced in build time with the `react-tooltip.css` builded content\nconst TooltipCoreStyles = 'react-tooltip-core-css-placeholder'\nconst TooltipStyles = 'react-tooltip-css-placeholder'\n\nif (typeof window !== 'undefined') {\n  window.addEventListener('react-tooltip-inject-styles', ((\n    event: CustomEvent<{ disableCore: boolean; disableBase: boolean }>,\n  ) => {\n    if (!event.detail.disableCore) {\n      injectStyle({ css: TooltipCoreStyles, type: 'core' })\n    }\n    if (!event.detail.disableBase) {\n      injectStyle({ css: TooltipStyles, type: 'base' })\n    }\n  }) as EventListener)\n}\n\nexport { TooltipController as Tooltip } from './components/TooltipController'\nexport { TooltipProvider, TooltipWrapper } from './components/TooltipProvider'\nexport type {\n  ChildrenType,\n  DataAttribute,\n  EventsType,\n  PlacesType,\n  PositionStrategy,\n  VariantType,\n  WrapperType,\n  ITooltipController as ITooltip,\n  ITooltipWrapper,\n  IPosition,\n  Middleware,\n  TooltipRefProps,\n}\n\nexport { removeStyle } from './utils/handle-style'\n"],"names":["REACT_TOOLTIP_CORE_STYLES_ID","REACT_TOOLTIP_BASE_STYLES_ID","injected","core","base","injectStyle","css","id","type","ref","document","process","_a","env","REACT_TOOLTIP_DISABLE_CORE_STYLES","_b","REACT_TOOLTIP_DISABLE_BASE_STYLES","insertAt","getElementById","console","warn","head","getElementsByTagName","style","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","debounce","func","wait","immediate","timeout","args","later","apply","this","setTimeout","clearTimeout","DEFAULT_TOOLTIP_ID","DEFAULT_CONTEXT_DATA","anchorRefs","Set","activeAnchor","current","attach","detach","setActiveAnchor","DEFAULT_CONTEXT_DATA_WRAPPER","getTooltipData","TooltipContext","createContext","useTooltip","tooltipId","useContext","useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","isScrollable","node","HTMLElement","SVGElement","getComputedStyle","some","propertyName","value","getPropertyValue","getScrollParent","currentParent","parentElement","scrollingElement","documentElement","computeTooltipPosition","async","elementReference","tooltipReference","tooltipArrowReference","place","offset","offsetValue","strategy","middlewares","Number","flip","shift","padding","border","tooltipStyles","tooltipArrowStyles","middleware","push","arrow","element","computePosition","placement","then","x","y","middlewareData","styles","left","top","arrowX","arrowY","staticSide","right","bottom","split","borderSide","borderBottom","borderRight","borderWidth","match","Tooltip","forwardRef","className","classNameArrow","variant","anchorId","anchorSelect","events","openOnClick","positionStrategy","wrapper","WrapperElement","delayShow","delayHide","float","hidden","noArrow","clickable","closeOnEsc","closeOnScroll","closeOnResize","openEvents","closeEvents","globalCloseEvents","imperativeModeOnly","externalStyles","position","afterShow","afterHide","content","contentWrapperRef","isOpen","setIsOpen","opacity","arrowColor","tooltipRef","useRef","tooltipArrowRef","tooltipShowDelayTimerRef","tooltipHideDelayTimerRef","actualPlacement","setActualPlacement","useState","inlineStyles","setInlineStyles","inlineArrowStyles","setInlineArrowStyles","show","setShow","rendered","setRendered","imperativeOptions","setImperativeOptions","wasShowing","lastFloatPosition","setProviderActiveAnchor","hoveringTooltip","anchorsBySelect","setAnchorsBySelect","mounted","shouldOpenOnClick","includes","hasClickEvent","click","dblclick","mousedown","actualOpenEvents","mouseenter","focus","Object","assign","actualCloseEvents","mouseleave","blur","mouseup","actualGlobalCloseEvents","escape","scroll","resize","clickOutsideAnchor","handleShow","undefined","handleShowTooltipDelayed","delay","handleHideTooltipDelayed","handleShowTooltip","event","target","currentTarget","isConnected","handleHideTooltip","handleTooltipPosition","virtualElement","getBoundingClientRect","width","height","computedStylesData","keys","length","handleMouseMove","mouseEvent","mousePosition","clientX","clientY","handleClickOutsideAnchors","contains","querySelector","anchor","debouncedHandleShowTooltip","debouncedHandleHideTooltip","updateTooltipPosition","useCallback","actualPosition","elementRefs","forEach","add","anchorById","handleScrollResize","anchorScrollParent","tooltipScrollParent","addEventListener","updateTooltipCleanup","autoUpdate","ancestorResize","elementResize","layoutShift","handleEsc","key","enabledEvents","handleClickOpenTooltipAnchor","handleClickCloseTooltipAnchor","regularEvents","clickEvents","entries","enabled","listener","handleMouseEnterTooltip","handleMouseLeaveTooltip","removeEventListener","selector","documentObserver","MutationObserver","mutationList","newAnchors","removedAnchors","mutation","attributeName","getAttribute","elements","removedNodes","filter","nodeType","matches","flatMap","querySelectorAll","call","addedNodes","anchors","observe","body","childList","subtree","attributes","attributeFilter","disconnect","contentObserver","ResizeObserver","Array","from","actualContent","canShow","useImperativeHandle","open","options","close","Boolean","React","role","classNames","coreStyles","onTransitionEnd","background","TooltipContent","dangerouslySetInnerHTML","__html","cssSupports","property","CSS","supports","TooltipController","html","render","children","disableStyleInjection","tooltipContent","setTooltipContent","tooltipHtml","setTooltipHtml","tooltipPlace","setTooltipPlace","tooltipVariant","setTooltipVariant","tooltipOffset","setTooltipOffset","tooltipDelayShow","setTooltipDelayShow","tooltipDelayHide","setTooltipDelayHide","tooltipFloat","setTooltipFloat","tooltipHidden","setTooltipHidden","tooltipWrapper","setTooltipWrapper","tooltipEvents","setTooltipEvents","tooltipPositionStrategy","setTooltipPositionStrategy","styleInjectionRef","providerActiveAnchor","getDataAttributesFromAnchorElement","getAttributeNames","reduce","acc","name","startsWith","replace","applyAllDataAttributesFromAnchorElement","dataAttributes","handleDataAttributes","parsed","values","handler","dispatchEvent","CustomEvent","detail","disableCore","disableBase","size","anchorElement","observer","observerConfig","renderedContent","props","anchorRefMap","setAnchorRefMap","activeAnchorMap","setActiveAnchorMap","refs","oldMap","tooltipRefs","delete","context","useMemo","Provider","anchorRef","tagName","remove"],"mappings":"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"}