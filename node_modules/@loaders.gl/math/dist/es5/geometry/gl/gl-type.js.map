{"version":3,"file":"gl-type.js","names":["_constants","require","_GL_TYPE_TO_ARRAY_TYP","GL_TYPE_TO_ARRAY_TYPE","_defineProperty2","default","GL","DOUBLE","Float64Array","FLOAT","Float32Array","UNSIGNED_SHORT","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array","NAME_TO_GL_TYPE","ERR_TYPE_CONVERSION","GLType","_classCallCheck2","_createClass2","key","value","fromTypedArray","arrayOrType","ArrayBuffer","isView","constructor","glType","ArrayType","Error","fromName","name","getArrayType","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","getByteSize","BYTES_PER_ELEMENT","validate","Boolean","createTypedArray","buffer","byteOffset","arguments","length","undefined","byteLength","exports"],"sources":["../../../../src/geometry/gl/gl-type.ts"],"sourcesContent":["import type {TypedArray} from '@math.gl/core';\nimport {GL_TYPE as GL} from '../constants';\n\nconst GL_TYPE_TO_ARRAY_TYPE = {\n  [GL.DOUBLE]: Float64Array,\n  [GL.FLOAT]: Float32Array,\n  [GL.UNSIGNED_SHORT]: Uint16Array,\n  [GL.UNSIGNED_INT]: Uint32Array,\n  [GL.UNSIGNED_BYTE]: Uint8Array,\n  [GL.BYTE]: Int8Array,\n  [GL.SHORT]: Int16Array,\n  [GL.INT]: Int32Array\n};\ntype GlTypeMap = {\n  [index: string]: number;\n};\nconst NAME_TO_GL_TYPE: GlTypeMap = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nconst ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport default class GLType {\n  // Signature: fromTypedArray(new Uint8Array())\n  // Signature: fromTypedArray(Uint8Array)\n  /**\n   * Returns the size, in bytes, of the corresponding datatype\n   * @param arrayOrType\n   * @returns glType a a string\n   */\n  static fromTypedArray(arrayOrType: TypedArray | Function): string {\n    // If typed array, look up constructor\n    arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n    for (const glType in GL_TYPE_TO_ARRAY_TYPE) {\n      const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n      if (ArrayType === arrayOrType) {\n        return glType;\n      }\n    }\n    throw new Error(ERR_TYPE_CONVERSION);\n  }\n  /**\n   * Extracts name for glType from array NAME_TO_GL_TYPE\n   * @param name\n   * @returns glType as a number\n   */\n  static fromName(name: string): number {\n    const glType = NAME_TO_GL_TYPE[name];\n    if (!glType) {\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n    return glType;\n  }\n  // Converts GL constant to corresponding typed array type\n  // eslint-disable-next-line complexity\n  static getArrayType(glType: number) {\n    switch (glType) {\n      /*eslint-disable*/\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_6_5:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_4_4_4_4:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_5_5_1:\n        /* eslint-enable*/\n        return Uint16Array;\n      default:\n        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (!ArrayType) {\n          throw new Error(ERR_TYPE_CONVERSION);\n        }\n        return ArrayType;\n    }\n  }\n  /**\n   * Returns the size in bytes of one element of the provided WebGL type\n   * @param glType\n   * @returns size of glType\n   */\n  static getByteSize(glType: number): number {\n    const ArrayType = GLType.getArrayType(glType);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n  /**\n   * Returns `true` if `glType` is a valid WebGL data type.\n   * @param glType\n   * @returns boolean\n   */\n  static validate(glType: number): boolean {\n    return Boolean(GLType.getArrayType(glType));\n  }\n  /**\n   * Creates a typed view of an array of bytes\n   * @param glType The type of typed array (ArrayBuffer view) to create\n   * @param buffer The buffer storage to use for the view.\n   * @param byteOffset The offset, in bytes, to the first element in the view\n   * @param length The number of elements in the view. Defaults to buffer length\n   * @returns A typed array view of the buffer\n   */\n  static createTypedArray(\n    glType: number,\n    buffer: TypedArray,\n    byteOffset: number = 0,\n    length?: number\n  ): TypedArray {\n    if (length === undefined) {\n      length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n    }\n    const ArrayType = GLType.getArrayType(glType);\n    return new ArrayType(buffer, byteOffset, length);\n  }\n}\n"],"mappings":"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"}