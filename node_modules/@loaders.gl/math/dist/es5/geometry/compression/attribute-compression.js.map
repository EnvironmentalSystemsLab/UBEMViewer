{"version":3,"file":"attribute-compression.js","names":["_core","require","_assert","RIGHT_SHIFT","LEFT_SHIFT","scratchVector2","Vector2","scratchVector3","Vector3","scratchEncodeVector2","octEncodeScratch","uint8ForceArray","Uint8Array","forceUint8","value","fromSNorm","rangeMaximum","arguments","length","undefined","clamp","toSNorm","Math","round","signNotZero","octEncodeInRange","vector","rangeMax","result","assert","vector3","from","abs","magnitudeSquared","_MathUtils","EPSILON6","x","y","z","octEncode","octEncodeToVector4","w","octDecodeInRange","Error","concat","oldVX","normalize","octDecode","octDecodeFromVector4","encoded","xOct16","yOct16","octPackFloat","vector2","octEncodeFloat","octDecodeFloat","Number","isFinite","temp","floor","octPack","v1","v2","v3","encoded1","encoded2","encoded3","octUnpack","packed","encodedFloat1","encodedFloat2","compressTextureCoordinates","textureCoordinates","decompressTextureCoordinates","compressed","xZeroTo4095","zigZagDeltaDecode","uBuffer","vBuffer","heightBuffer","zigZagDecode","u","v","height","i"],"sources":["../../../../src/geometry/compression/attribute-compression.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Attribute compression and decompression functions.\n\nimport {Vector2, Vector3, clamp, _MathUtils} from '@math.gl/core';\nimport {assert} from '../utils/assert';\n\ntype Vector4 = {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n};\n\nconst RIGHT_SHIFT = 1.0 / 256.0;\nconst LEFT_SHIFT = 256.0;\n\nconst scratchVector2 = new Vector2();\nconst scratchVector3 = new Vector3();\nconst scratchEncodeVector2 = new Vector2();\nconst octEncodeScratch = new Vector2();\n\nconst uint8ForceArray = new Uint8Array(1);\n\n/**\n * Force a value to Uint8\n *\n * @param value\n * @returns\n */\nfunction forceUint8(value: number): number {\n  uint8ForceArray[0] = value;\n  return uint8ForceArray[0];\n}\n\n/**\n * Converts a SNORM value in the range [0, rangeMaximum] to a scalar in the range [-1.0, 1.0].\n *\n * @param value SNORM value in the range [0, rangeMaximum]\n * @param [rangeMaximum=255] The maximum value in the SNORM range, 255 by default.\n * @returns Scalar in the range [-1.0, 1.0].\n *\n * @see CesiumMath.toSNorm\n */\nfunction fromSNorm(value: number, rangeMaximum = 255): number {\n  return (clamp(value, 0.0, rangeMaximum) / rangeMaximum) * 2.0 - 1.0;\n}\n\n/**\n * Converts a scalar value in the range [-1.0, 1.0] to a SNORM in the range [0, rangeMaximum].\n *\n * @param value The scalar value in the range [-1.0, 1.0]\n * @param [rangeMaximum=255] The maximum value in the mapped range, 255 by default.\n * @returns A SNORM value, where 0 maps to -1.0 and rangeMaximum maps to 1.0.\n *\n * @see CesiumMath.fromSNorm\n */\nfunction toSNorm(value: number, rangeMaximum = 255): number {\n  return Math.round((clamp(value, -1.0, 1.0) * 0.5 + 0.5) * rangeMaximum);\n}\n\n/**\n * Returns 1.0 if the given value is positive or zero, and -1.0 if it is negative.\n * This is similar to `Math.sign` except that returns 1.0 instead of\n * 0.0 when the input value is 0.0.\n *\n * @param value The value to return the sign of.\n * @returns The sign of value.\n */\nfunction signNotZero(value: number): number {\n  return value < 0.0 ? -1.0 : 1.0;\n}\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-rangeMax] following the 'oct' encoding.\n *\n * Oct encoding is a compact representation of unit length vectors.\n * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\n * Cigolle et al 2014: {@link http://jcgt.org/published/0003/02/01/}\n *\n * @param vector The normalized vector to be compressed into 2 component 'oct' encoding.\n * @param result The 2 component oct-encoded unit length vector.\n * @param rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\n * @returns The 2 component oct-encoded unit length vector.\n *\n * @exception vector must be normalized.\n *\n * @see octDecodeInRange\n */\nexport function octEncodeInRange(vector: Vector3, rangeMax: number, result: Vector2): Vector2 {\n  assert(vector);\n  assert(result);\n\n  const vector3 = scratchVector3.from(vector);\n\n  assert(Math.abs(vector3.magnitudeSquared() - 1.0) <= _MathUtils.EPSILON6);\n\n  result.x = vector.x / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\n  result.y = vector.y / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\n\n  if (vector.z < 0) {\n    const x = result.x;\n    const y = result.y;\n    result.x = (1.0 - Math.abs(y)) * signNotZero(x);\n    result.y = (1.0 - Math.abs(x)) * signNotZero(y);\n  }\n\n  result.x = toSNorm(result.x, rangeMax);\n  result.y = toSNorm(result.y, rangeMax);\n\n  return result;\n}\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding.\n *\n * @param vector The normalized vector to be compressed into 2 byte 'oct' encoding.\n * @param result The 2 byte oct-encoded unit length vector.\n * @returns he 2 byte oct-encoded unit length vector.\n *\n * @exception vector must be normalized.\n *\n * @see octEncodeInRange\n * @see octDecode\n */\nexport function octEncode(vector: Vector3, result: Vector2): Vector2 {\n  return octEncodeInRange(vector, 255, result);\n}\n\n/**\n * Encodes a normalized vector into 4-byte vector\n * @param vector The normalized vector to be compressed into 4 byte 'oct' encoding.\n * @param result The 4 byte oct-encoded unit length vector.\n * @returns The 4 byte oct-encoded unit length vector.\n *\n * @exception vector must be normalized.\n *\n * @see octEncodeInRange\n * @see octDecodeFromVector4\n */\nexport function octEncodeToVector4(vector: Vector3, result: Vector4): Vector4 {\n  octEncodeInRange(vector, 65535, octEncodeScratch);\n  result.x = forceUint8(octEncodeScratch.x * RIGHT_SHIFT);\n  result.y = forceUint8(octEncodeScratch.x);\n  result.z = forceUint8(octEncodeScratch.y * RIGHT_SHIFT);\n  result.w = forceUint8(octEncodeScratch.y);\n  return result;\n}\n\n/**\n * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component vector.\n *\n * @param x The x component of the oct-encoded unit length vector.\n * @param y The y component of the oct-encoded unit length vector.\n * @param rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\n * @param result The decoded and normalized vector\n * @returns The decoded and normalized vector.\n *\n * @exception x and y must be unsigned normalized integers between 0 and rangeMax.\n *\n * @see octEncodeInRange\n */\nexport function octDecodeInRange(x: number, y: number, rangeMax: number, result: Vector3): Vector3 {\n  assert(result);\n  if (x < 0 || x > rangeMax || y < 0 || y > rangeMax) {\n    throw new Error(`x and y must be unsigned normalized integers between 0 and ${rangeMax}`);\n  }\n\n  result.x = fromSNorm(x, rangeMax);\n  result.y = fromSNorm(y, rangeMax);\n  result.z = 1.0 - (Math.abs(result.x) + Math.abs(result.y));\n\n  if (result.z < 0.0) {\n    const oldVX = result.x;\n    result.x = (1.0 - Math.abs(result.y)) * signNotZero(oldVX);\n    result.y = (1.0 - Math.abs(oldVX)) * signNotZero(result.y);\n  }\n\n  return result.normalize();\n}\n\n/**\n * Decodes a unit-length vector in 2 byte 'oct' encoding to a normalized 3-component vector.\n *\n * @param x The x component of the oct-encoded unit length vector.\n * @param y The y component of the oct-encoded unit length vector.\n * @param result The decoded and normalized vector.\n * @returns he decoded and normalized vector.\n *\n * @exception x and y must be an unsigned normalized integer between 0 and 255.\n *\n * @see octDecodeInRange\n */\nexport function octDecode(x: number, y: number, result: Vector3): Vector3 {\n  return octDecodeInRange(x, y, 255, result);\n}\n\n/**\n * Decodes a unit-length vector in 4 byte 'oct' encoding to a normalized 3-component vector.\n *\n * @param encoded The oct-encoded unit length vector.\n * @param esult The decoded and normalized vector.\n * @returns The decoded and normalized vector.\n *\n * @exception x, y, z, and w must be unsigned normalized integers between 0 and 255.\n *\n * @see octDecodeInRange\n * @see octEncodeToVector4\n */\nexport function octDecodeFromVector4(encoded: Vector4, result: Vector3): Vector3 {\n  assert(encoded);\n  assert(result);\n  const x = encoded.x;\n  const y = encoded.y;\n  const z = encoded.z;\n  const w = encoded.w;\n\n  if (x < 0 || x > 255 || y < 0 || y > 255 || z < 0 || z > 255 || w < 0 || w > 255) {\n    throw new Error('x, y, z, and w must be unsigned normalized integers between 0 and 255');\n  }\n\n  const xOct16 = x * LEFT_SHIFT + y;\n  const yOct16 = z * LEFT_SHIFT + w;\n  return octDecodeInRange(xOct16, yOct16, 65535, result);\n}\n\n/**\n * Packs an oct encoded vector into a single floating-point number.\n *\n * @param encoded The oct encoded vector.\n * @returns The oct encoded vector packed into a single float.\n *\n */\nexport function octPackFloat(encoded: Vector2): number {\n  const vector2 = scratchVector2.from(encoded);\n  return 256.0 * vector2.x + vector2.y;\n}\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding and\n * stores those values in a single float-point number.\n *\n * @param vector The normalized vector to be compressed into 2 byte 'oct' encoding.\n * @returns The 2 byte oct-encoded unit length vector.\n *\n * @exception vector must be normalized.\n */\nexport function octEncodeFloat(vector: Vector3): number {\n  octEncode(vector, scratchEncodeVector2);\n  return octPackFloat(scratchEncodeVector2);\n}\n\n/**\n * Decodes a unit-length vector in 'oct' encoding packed in a floating-point number to a normalized 3-component vector.\n *\n * @param value The oct-encoded unit length vector stored as a single floating-point number.\n * @param result The decoded and normalized vector\n * @returns The decoded and normalized vector.\n *\n */\nexport function octDecodeFloat(value: number, result: Vector3): Vector3 {\n  assert(Number.isFinite(value));\n\n  const temp = value / 256.0;\n  const x = Math.floor(temp);\n  const y = (temp - x) * 256.0;\n\n  return octDecode(x, y, result);\n}\n\n/**\n * Encodes three normalized vectors into 6 SNORM values in the range of [0-255] following the 'oct' encoding and\n * packs those into two floating-point numbers.\n *\n * @param v1 A normalized vector to be compressed.\n * @param v2 A normalized vector to be compressed.\n * @param v3 A normalized vector to be compressed.\n * @param result The 'oct' encoded vectors packed into two floating-point numbers.\n * @returns The 'oct' encoded vectors packed into two floating-point numbers.\n *\n */\nexport function octPack(v1: Vector3, v2: Vector3, v3: Vector3, result: Vector2): Vector2 {\n  assert(v1);\n  assert(v2);\n  assert(v3);\n  assert(result);\n\n  const encoded1 = octEncodeFloat(v1);\n  const encoded2 = octEncodeFloat(v2);\n\n  const encoded3 = octEncode(v3, scratchEncodeVector2);\n  result.x = 65536.0 * encoded3.x + encoded1;\n  result.y = 65536.0 * encoded3.y + encoded2;\n  return result;\n}\n\n/**\n * Decodes three unit-length vectors in 'oct' encoding packed into a floating-point number to a normalized 3-component vector.\n *\n * @param packed The three oct-encoded unit length vectors stored as two floating-point number.\n * @param v1 One decoded and normalized vector.\n * @param v2 One decoded and normalized vector.\n * @param v3 One decoded and normalized vector.\n */\nexport function octUnpack(packed: Vector2, v1: Vector3, v2: Vector3, v3: Vector3): void {\n  let temp = packed.x / 65536.0;\n  const x = Math.floor(temp);\n  const encodedFloat1 = (temp - x) * 65536.0;\n\n  temp = packed.y / 65536.0;\n  const y = Math.floor(temp);\n  const encodedFloat2 = (temp - y) * 65536.0;\n\n  octDecodeFloat(encodedFloat1, v1);\n  octDecodeFloat(encodedFloat2, v2);\n  octDecode(x, y, v3);\n}\n\n/**\n * Pack texture coordinates into a single float. The texture coordinates will only preserve 12 bits of precision.\n *\n * @param textureCoordinates The texture coordinates to compress.  Both coordinates must be in the range 0.0-1.0.\n * @returns The packed texture coordinates.\n *\n */\nexport function compressTextureCoordinates(textureCoordinates: Vector2): number {\n  // Move x and y to the range 0-4095;\n  const x = (textureCoordinates.x * 4095.0) | 0;\n  const y = (textureCoordinates.y * 4095.0) | 0;\n  return 4096.0 * x + y;\n}\n\n/**\n * Decompresses texture coordinates that were packed into a single float.\n *\n * @param compressed The compressed texture coordinates.\n * @param result The decompressed texture coordinates.\n * @returns The modified result parameter.\n *\n */\nexport function decompressTextureCoordinates(compressed: number, result: Vector2): Vector2 {\n  const temp = compressed / 4096.0;\n  const xZeroTo4095 = Math.floor(temp);\n  result.x = xZeroTo4095 / 4095.0;\n  result.y = (compressed - xZeroTo4095 * 4096) / 4095;\n  return result;\n}\n\n/**\n * Decodes delta and ZigZag encoded vertices. This modifies the buffers in place.\n *\n * @param uBuffer The buffer view of u values.\n * @param vBuffer The buffer view of v values.\n * @param [heightBuffer] The buffer view of height values.\n *\n * @link https://github.com/AnalyticalGraphicsInc/quantized-mesh|quantized-mesh-1.0 terrain format\n */\nexport function zigZagDeltaDecode(\n  uBuffer: Uint16Array,\n  vBuffer: Uint16Array,\n  heightBuffer?: Uint16Array | number[]\n) {\n  assert(uBuffer);\n  assert(vBuffer);\n  assert(uBuffer.length === vBuffer.length);\n  if (heightBuffer) {\n    assert(uBuffer.length === heightBuffer.length);\n  }\n\n  function zigZagDecode(value: number) {\n    return (value >> 1) ^ -(value & 1);\n  }\n\n  let u = 0;\n  let v = 0;\n  let height = 0;\n\n  for (let i = 0; i < uBuffer.length; ++i) {\n    u += zigZagDecode(uBuffer[i]);\n    v += zigZagDecode(vBuffer[i]);\n\n    uBuffer[i] = u;\n    vBuffer[i] = v;\n\n    if (heightBuffer) {\n      height += zigZagDecode(heightBuffer[i]);\n      heightBuffer[i] = height;\n    }\n  }\n}\n"],"mappings":"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"}