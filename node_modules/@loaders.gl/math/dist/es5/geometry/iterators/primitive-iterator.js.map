{"version":3,"file":"primitive-iterator.js","names":["_constants","require","_modes","_loaderUtils","makePrimitiveIterator","indices","attributes","arguments","length","undefined","mode","start","end","_regenerator","default","mark","_callee","info","i","wrap","_callee$","_context","prev","next","values","value","type","getPrimitiveModeType","i1","i2","i3","t0","GL","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","abrupt","assert","stop"],"sources":["../../../../src/geometry/iterators/primitive-iterator.ts"],"sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * Iteration info for making primitive iterator\n */\ntype Information = {\n  attributes: object;\n  type: number | void;\n  i1: number;\n  i2: number;\n  i3: number;\n  primitiveIndex?: object;\n};\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(\n  indices?: any,\n  attributes: object = {},\n  mode?: number,\n  start = 0,\n  end?: number\n): Iterable<{attributes: object; type: number; i1: number; i2: number; i3: number}> {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info: Information = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}\n"],"mappings":"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"}