{"version":3,"file":"attribute-compression.js","names":["Vector2","Vector3","clamp","_MathUtils","assert","RIGHT_SHIFT","LEFT_SHIFT","scratchVector2","scratchVector3","scratchEncodeVector2","octEncodeScratch","uint8ForceArray","Uint8Array","forceUint8","value","fromSNorm","rangeMaximum","arguments","length","undefined","toSNorm","Math","round","signNotZero","octEncodeInRange","vector","rangeMax","result","vector3","from","abs","magnitudeSquared","EPSILON6","x","y","z","octEncode","octEncodeToVector4","w","octDecodeInRange","Error","concat","oldVX","normalize","octDecode","octDecodeFromVector4","encoded","xOct16","yOct16","octPackFloat","vector2","octEncodeFloat","octDecodeFloat","Number","isFinite","temp","floor","octPack","v1","v2","v3","encoded1","encoded2","encoded3","octUnpack","packed","encodedFloat1","encodedFloat2","compressTextureCoordinates","textureCoordinates","decompressTextureCoordinates","compressed","xZeroTo4095","zigZagDeltaDecode","uBuffer","vBuffer","heightBuffer","zigZagDecode","u","v","height","i"],"sources":["../../../../src/geometry/compression/attribute-compression.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Attribute compression and decompression functions.\n\nimport {Vector2, Vector3, clamp, _MathUtils} from '@math.gl/core';\nimport {assert} from '../utils/assert';\n\ntype Vector4 = {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n};\n\nconst RIGHT_SHIFT = 1.0 / 256.0;\nconst LEFT_SHIFT = 256.0;\n\nconst scratchVector2 = new Vector2();\nconst scratchVector3 = new Vector3();\nconst scratchEncodeVector2 = new Vector2();\nconst octEncodeScratch = new Vector2();\n\nconst uint8ForceArray = new Uint8Array(1);\n\n/**\n * Force a value to Uint8\n *\n * @param value\n * @returns\n */\nfunction forceUint8(value: number): number {\n  uint8ForceArray[0] = value;\n  return uint8ForceArray[0];\n}\n\n/**\n * Converts a SNORM value in the range [0, rangeMaximum] to a scalar in the range [-1.0, 1.0].\n *\n * @param value SNORM value in the range [0, rangeMaximum]\n * @param [rangeMaximum=255] The maximum value in the SNORM range, 255 by default.\n * @returns Scalar in the range [-1.0, 1.0].\n *\n * @see CesiumMath.toSNorm\n */\nfunction fromSNorm(value: number, rangeMaximum = 255): number {\n  return (clamp(value, 0.0, rangeMaximum) / rangeMaximum) * 2.0 - 1.0;\n}\n\n/**\n * Converts a scalar value in the range [-1.0, 1.0] to a SNORM in the range [0, rangeMaximum].\n *\n * @param value The scalar value in the range [-1.0, 1.0]\n * @param [rangeMaximum=255] The maximum value in the mapped range, 255 by default.\n * @returns A SNORM value, where 0 maps to -1.0 and rangeMaximum maps to 1.0.\n *\n * @see CesiumMath.fromSNorm\n */\nfunction toSNorm(value: number, rangeMaximum = 255): number {\n  return Math.round((clamp(value, -1.0, 1.0) * 0.5 + 0.5) * rangeMaximum);\n}\n\n/**\n * Returns 1.0 if the given value is positive or zero, and -1.0 if it is negative.\n * This is similar to `Math.sign` except that returns 1.0 instead of\n * 0.0 when the input value is 0.0.\n *\n * @param value The value to return the sign of.\n * @returns The sign of value.\n */\nfunction signNotZero(value: number): number {\n  return value < 0.0 ? -1.0 : 1.0;\n}\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-rangeMax] following the 'oct' encoding.\n *\n * Oct encoding is a compact representation of unit length vectors.\n * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\n * Cigolle et al 2014: {@link http://jcgt.org/published/0003/02/01/}\n *\n * @param vector The normalized vector to be compressed into 2 component 'oct' encoding.\n * @param result The 2 component oct-encoded unit length vector.\n * @param rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\n * @returns The 2 component oct-encoded unit length vector.\n *\n * @exception vector must be normalized.\n *\n * @see octDecodeInRange\n */\nexport function octEncodeInRange(vector: Vector3, rangeMax: number, result: Vector2): Vector2 {\n  assert(vector);\n  assert(result);\n\n  const vector3 = scratchVector3.from(vector);\n\n  assert(Math.abs(vector3.magnitudeSquared() - 1.0) <= _MathUtils.EPSILON6);\n\n  result.x = vector.x / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\n  result.y = vector.y / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\n\n  if (vector.z < 0) {\n    const x = result.x;\n    const y = result.y;\n    result.x = (1.0 - Math.abs(y)) * signNotZero(x);\n    result.y = (1.0 - Math.abs(x)) * signNotZero(y);\n  }\n\n  result.x = toSNorm(result.x, rangeMax);\n  result.y = toSNorm(result.y, rangeMax);\n\n  return result;\n}\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding.\n *\n * @param vector The normalized vector to be compressed into 2 byte 'oct' encoding.\n * @param result The 2 byte oct-encoded unit length vector.\n * @returns he 2 byte oct-encoded unit length vector.\n *\n * @exception vector must be normalized.\n *\n * @see octEncodeInRange\n * @see octDecode\n */\nexport function octEncode(vector: Vector3, result: Vector2): Vector2 {\n  return octEncodeInRange(vector, 255, result);\n}\n\n/**\n * Encodes a normalized vector into 4-byte vector\n * @param vector The normalized vector to be compressed into 4 byte 'oct' encoding.\n * @param result The 4 byte oct-encoded unit length vector.\n * @returns The 4 byte oct-encoded unit length vector.\n *\n * @exception vector must be normalized.\n *\n * @see octEncodeInRange\n * @see octDecodeFromVector4\n */\nexport function octEncodeToVector4(vector: Vector3, result: Vector4): Vector4 {\n  octEncodeInRange(vector, 65535, octEncodeScratch);\n  result.x = forceUint8(octEncodeScratch.x * RIGHT_SHIFT);\n  result.y = forceUint8(octEncodeScratch.x);\n  result.z = forceUint8(octEncodeScratch.y * RIGHT_SHIFT);\n  result.w = forceUint8(octEncodeScratch.y);\n  return result;\n}\n\n/**\n * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component vector.\n *\n * @param x The x component of the oct-encoded unit length vector.\n * @param y The y component of the oct-encoded unit length vector.\n * @param rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\n * @param result The decoded and normalized vector\n * @returns The decoded and normalized vector.\n *\n * @exception x and y must be unsigned normalized integers between 0 and rangeMax.\n *\n * @see octEncodeInRange\n */\nexport function octDecodeInRange(x: number, y: number, rangeMax: number, result: Vector3): Vector3 {\n  assert(result);\n  if (x < 0 || x > rangeMax || y < 0 || y > rangeMax) {\n    throw new Error(`x and y must be unsigned normalized integers between 0 and ${rangeMax}`);\n  }\n\n  result.x = fromSNorm(x, rangeMax);\n  result.y = fromSNorm(y, rangeMax);\n  result.z = 1.0 - (Math.abs(result.x) + Math.abs(result.y));\n\n  if (result.z < 0.0) {\n    const oldVX = result.x;\n    result.x = (1.0 - Math.abs(result.y)) * signNotZero(oldVX);\n    result.y = (1.0 - Math.abs(oldVX)) * signNotZero(result.y);\n  }\n\n  return result.normalize();\n}\n\n/**\n * Decodes a unit-length vector in 2 byte 'oct' encoding to a normalized 3-component vector.\n *\n * @param x The x component of the oct-encoded unit length vector.\n * @param y The y component of the oct-encoded unit length vector.\n * @param result The decoded and normalized vector.\n * @returns he decoded and normalized vector.\n *\n * @exception x and y must be an unsigned normalized integer between 0 and 255.\n *\n * @see octDecodeInRange\n */\nexport function octDecode(x: number, y: number, result: Vector3): Vector3 {\n  return octDecodeInRange(x, y, 255, result);\n}\n\n/**\n * Decodes a unit-length vector in 4 byte 'oct' encoding to a normalized 3-component vector.\n *\n * @param encoded The oct-encoded unit length vector.\n * @param esult The decoded and normalized vector.\n * @returns The decoded and normalized vector.\n *\n * @exception x, y, z, and w must be unsigned normalized integers between 0 and 255.\n *\n * @see octDecodeInRange\n * @see octEncodeToVector4\n */\nexport function octDecodeFromVector4(encoded: Vector4, result: Vector3): Vector3 {\n  assert(encoded);\n  assert(result);\n  const x = encoded.x;\n  const y = encoded.y;\n  const z = encoded.z;\n  const w = encoded.w;\n\n  if (x < 0 || x > 255 || y < 0 || y > 255 || z < 0 || z > 255 || w < 0 || w > 255) {\n    throw new Error('x, y, z, and w must be unsigned normalized integers between 0 and 255');\n  }\n\n  const xOct16 = x * LEFT_SHIFT + y;\n  const yOct16 = z * LEFT_SHIFT + w;\n  return octDecodeInRange(xOct16, yOct16, 65535, result);\n}\n\n/**\n * Packs an oct encoded vector into a single floating-point number.\n *\n * @param encoded The oct encoded vector.\n * @returns The oct encoded vector packed into a single float.\n *\n */\nexport function octPackFloat(encoded: Vector2): number {\n  const vector2 = scratchVector2.from(encoded);\n  return 256.0 * vector2.x + vector2.y;\n}\n\n/**\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding and\n * stores those values in a single float-point number.\n *\n * @param vector The normalized vector to be compressed into 2 byte 'oct' encoding.\n * @returns The 2 byte oct-encoded unit length vector.\n *\n * @exception vector must be normalized.\n */\nexport function octEncodeFloat(vector: Vector3): number {\n  octEncode(vector, scratchEncodeVector2);\n  return octPackFloat(scratchEncodeVector2);\n}\n\n/**\n * Decodes a unit-length vector in 'oct' encoding packed in a floating-point number to a normalized 3-component vector.\n *\n * @param value The oct-encoded unit length vector stored as a single floating-point number.\n * @param result The decoded and normalized vector\n * @returns The decoded and normalized vector.\n *\n */\nexport function octDecodeFloat(value: number, result: Vector3): Vector3 {\n  assert(Number.isFinite(value));\n\n  const temp = value / 256.0;\n  const x = Math.floor(temp);\n  const y = (temp - x) * 256.0;\n\n  return octDecode(x, y, result);\n}\n\n/**\n * Encodes three normalized vectors into 6 SNORM values in the range of [0-255] following the 'oct' encoding and\n * packs those into two floating-point numbers.\n *\n * @param v1 A normalized vector to be compressed.\n * @param v2 A normalized vector to be compressed.\n * @param v3 A normalized vector to be compressed.\n * @param result The 'oct' encoded vectors packed into two floating-point numbers.\n * @returns The 'oct' encoded vectors packed into two floating-point numbers.\n *\n */\nexport function octPack(v1: Vector3, v2: Vector3, v3: Vector3, result: Vector2): Vector2 {\n  assert(v1);\n  assert(v2);\n  assert(v3);\n  assert(result);\n\n  const encoded1 = octEncodeFloat(v1);\n  const encoded2 = octEncodeFloat(v2);\n\n  const encoded3 = octEncode(v3, scratchEncodeVector2);\n  result.x = 65536.0 * encoded3.x + encoded1;\n  result.y = 65536.0 * encoded3.y + encoded2;\n  return result;\n}\n\n/**\n * Decodes three unit-length vectors in 'oct' encoding packed into a floating-point number to a normalized 3-component vector.\n *\n * @param packed The three oct-encoded unit length vectors stored as two floating-point number.\n * @param v1 One decoded and normalized vector.\n * @param v2 One decoded and normalized vector.\n * @param v3 One decoded and normalized vector.\n */\nexport function octUnpack(packed: Vector2, v1: Vector3, v2: Vector3, v3: Vector3): void {\n  let temp = packed.x / 65536.0;\n  const x = Math.floor(temp);\n  const encodedFloat1 = (temp - x) * 65536.0;\n\n  temp = packed.y / 65536.0;\n  const y = Math.floor(temp);\n  const encodedFloat2 = (temp - y) * 65536.0;\n\n  octDecodeFloat(encodedFloat1, v1);\n  octDecodeFloat(encodedFloat2, v2);\n  octDecode(x, y, v3);\n}\n\n/**\n * Pack texture coordinates into a single float. The texture coordinates will only preserve 12 bits of precision.\n *\n * @param textureCoordinates The texture coordinates to compress.  Both coordinates must be in the range 0.0-1.0.\n * @returns The packed texture coordinates.\n *\n */\nexport function compressTextureCoordinates(textureCoordinates: Vector2): number {\n  // Move x and y to the range 0-4095;\n  const x = (textureCoordinates.x * 4095.0) | 0;\n  const y = (textureCoordinates.y * 4095.0) | 0;\n  return 4096.0 * x + y;\n}\n\n/**\n * Decompresses texture coordinates that were packed into a single float.\n *\n * @param compressed The compressed texture coordinates.\n * @param result The decompressed texture coordinates.\n * @returns The modified result parameter.\n *\n */\nexport function decompressTextureCoordinates(compressed: number, result: Vector2): Vector2 {\n  const temp = compressed / 4096.0;\n  const xZeroTo4095 = Math.floor(temp);\n  result.x = xZeroTo4095 / 4095.0;\n  result.y = (compressed - xZeroTo4095 * 4096) / 4095;\n  return result;\n}\n\n/**\n * Decodes delta and ZigZag encoded vertices. This modifies the buffers in place.\n *\n * @param uBuffer The buffer view of u values.\n * @param vBuffer The buffer view of v values.\n * @param [heightBuffer] The buffer view of height values.\n *\n * @link https://github.com/AnalyticalGraphicsInc/quantized-mesh|quantized-mesh-1.0 terrain format\n */\nexport function zigZagDeltaDecode(\n  uBuffer: Uint16Array,\n  vBuffer: Uint16Array,\n  heightBuffer?: Uint16Array | number[]\n) {\n  assert(uBuffer);\n  assert(vBuffer);\n  assert(uBuffer.length === vBuffer.length);\n  if (heightBuffer) {\n    assert(uBuffer.length === heightBuffer.length);\n  }\n\n  function zigZagDecode(value: number) {\n    return (value >> 1) ^ -(value & 1);\n  }\n\n  let u = 0;\n  let v = 0;\n  let height = 0;\n\n  for (let i = 0; i < uBuffer.length; ++i) {\n    u += zigZagDecode(uBuffer[i]);\n    v += zigZagDecode(vBuffer[i]);\n\n    uBuffer[i] = u;\n    vBuffer[i] = v;\n\n    if (heightBuffer) {\n      height += zigZagDecode(heightBuffer[i]);\n      heightBuffer[i] = height;\n    }\n  }\n}\n"],"mappings":"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"}