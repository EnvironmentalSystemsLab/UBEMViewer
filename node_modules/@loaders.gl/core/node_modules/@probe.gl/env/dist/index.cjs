var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  VERSION: () => VERSION,
  assert: () => assert,
  console: () => console_,
  document: () => document_,
  getBrowser: () => getBrowser,
  global: () => global_,
  isBrowser: () => isBrowser,
  isBrowserMainThread: () => isBrowserMainThread,
  isElectron: () => isElectron,
  isMobile: () => isMobile,
  process: () => process_,
  self: () => self_,
  window: () => window_
});
module.exports = __toCommonJS(src_exports);

// src/lib/is-electron.ts
function isElectron(mockUserAgent) {
  if (typeof window !== "undefined" && typeof window.process === "object" && window.process.type === "renderer") {
    return true;
  }
  if (typeof process !== "undefined" && typeof process.versions === "object" && Boolean(process.versions["electron"])) {
    return true;
  }
  const realUserAgent = typeof navigator === "object" && typeof navigator.userAgent === "string" && navigator.userAgent;
  const userAgent = mockUserAgent || realUserAgent;
  if (userAgent && userAgent.indexOf("Electron") >= 0) {
    return true;
  }
  return false;
}

// src/lib/is-browser.ts
function isBrowser() {
  const isNode = typeof process === "object" && String(process) === "[object process]" && !process.browser;
  return !isNode || isElectron();
}
function isBrowserMainThread() {
  return isBrowser() && typeof document !== "undefined";
}

// src/lib/globals.ts
var global_ = globalThis;
var self_ = globalThis.self || globalThis.window || globalThis.global;
var window_ = globalThis.window || globalThis.self || globalThis.global;
var document_ = globalThis.document || {};
var process_ = globalThis.process || {};
var console_ = globalThis.console;
var navigator_ = globalThis.navigator || {};

// src/utils/globals.ts
var VERSION = typeof __VERSION__ !== "undefined" ? __VERSION__ : "untranspiled source";
var isBrowser2 = isBrowser();

// src/lib/get-browser.ts
var window2 = globalThis;
function isMobile() {
  return typeof window2.orientation !== "undefined";
}
function getBrowser(mockUserAgent) {
  if (!mockUserAgent && !isBrowser()) {
    return "Node";
  }
  if (isElectron(mockUserAgent)) {
    return "Electron";
  }
  const userAgent = mockUserAgent || navigator_.userAgent || "";
  if (userAgent.indexOf("Edge") > -1) {
    return "Edge";
  }
  const isMSIE = userAgent.indexOf("MSIE ") !== -1;
  const isTrident = userAgent.indexOf("Trident/") !== -1;
  if (isMSIE || isTrident) {
    return "IE";
  }
  if (window2.chrome) {
    return "Chrome";
  }
  if (window2.safari) {
    return "Safari";
  }
  if (window2.mozInnerScreenX) {
    return "Firefox";
  }
  return "Unknown";
}

// src/utils/assert.ts
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || "Assertion failed");
  }
}
