{"version":3,"file":"parse-3d-implicit-tiles.js","names":["_tile3dSubtreeLoader","require","_core","_index","_s2CornersToObb","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","QUADTREE_DEVISION_COUNT","OCTREE_DEVISION_COUNT","SUBDIVISION_COUNT_MAP","QUADTREE","OCTREE","getChildS2VolumeBox","s2VolumeBox","index","subdivisionScheme","box","cellId","getS2CellIdFromToken","s2VolumeInfo","token","childCellId","getS2ChildCellId","childToken","getS2TokenFromCellId","s2ChildVolumeInfo","delta","maximumHeight","minimumHeight","sizeZ","midZ","convertS2BoundingVolumetoOBB","childS2VolumeBox","undefined","parseImplicitTiles","_x","_parseImplicitTiles","_asyncToGenerator2","_regenerator","mark","_callee","params","options","_params$parentData","parentData","_params$childIndex","childIndex","_params$globalData","globalData","subtree","_params$level","level","subtreeLevels","maximumLevel","contentUrlTemplate","subtreesUriTemplate","basePath","tile","childrenPerTile","childX","childY","childZ","levelOffset","childTileMortonIndex","tileAvailabilityIndex","childTileX","childTileY","childTileZ","isChildSubtreeAvailable","x","y","z","lev","subtreePath","childSubtreeUrl","childSubtree","isTileAvailable","isContentAvailable","childTileLevel","pData","childTileParsed","globalLevel","childCoordinates","formattedTile","wrap","_callee$","_context","prev","next","mortonIndex","children","lodMetricValue","contentUrl","Math","pow","concatBits","getAvailabilityResult","childSubtreeAvailability","concat","replaceContentUrlTemplate","load","Tile3DSubtreeLoader","sent","tileAvailability","abrupt","contentAvailability","formatTileData","stop","availabilityData","Boolean","constant","explicitBitstream","getBooleanValueFromBitstream","refine","getRefine","lodMetricType","getTileType","rootLodMetricValue","rootBoundingVolume","uri","replace","boundingVolume","boundingVolumeForChildTile","calculateBoundingVolumeForChildTile","content","id","type","geometricError","transform","region","_rootBoundingVolume$r","_slicedToArray2","west","south","east","north","boundingVolumesCount","sizeX","sizeY","childWest","childEast","childSouth","childNorth","childMinimumHeight","childMaximumHeight","Error","first","second","parseInt","toString","templateUrl","mapUrl","generateMapUrl","matched","items","availabilityIndex","availabilityBuffer","byteIndex","floor","bitIndex","bitValue"],"sources":["../../../../../src/lib/parsers/helpers/parse-3d-implicit-tiles.ts"],"sourcesContent":["import type {Availability, BoundingVolume, Subtree} from '../../../types';\nimport {Tile3DSubtreeLoader} from '../../../tile-3d-subtree-loader';\nimport {load} from '@loaders.gl/core';\n\nimport {getS2CellIdFromToken, getS2ChildCellId, getS2TokenFromCellId} from '../../utils/s2/index';\nimport type {S2VolumeInfo} from '../../utils/obb/s2-corners-to-obb';\nimport {convertS2BoundingVolumetoOBB} from '../../utils/obb/s2-corners-to-obb';\nimport Long from 'long';\n\nconst QUADTREE_DEVISION_COUNT = 4;\nconst OCTREE_DEVISION_COUNT = 8;\n\nconst SUBDIVISION_COUNT_MAP = {\n  QUADTREE: QUADTREE_DEVISION_COUNT,\n  OCTREE: OCTREE_DEVISION_COUNT\n};\n\n/**\n *  S2VolumeBox is an extention of BoundingVolume of type \"box\"\n */\nexport type S2VolumeBox = {\n  /** BoundingVolume of type \"box\" has the \"box\" field. S2VolumeBox contains it as well. */\n  box: number[];\n  /** s2VolumeInfo provides additional info about the box - specifically the token, min and max height */\n  s2VolumeInfo: S2VolumeInfo;\n};\n\nfunction getChildS2VolumeBox(\n  s2VolumeBox: S2VolumeBox | undefined,\n  index: number,\n  subdivisionScheme: string\n): S2VolumeBox | undefined {\n  if (s2VolumeBox?.box) {\n    // Check if the BoundingVolume is of type \"box\"\n    const cellId: Long = getS2CellIdFromToken(s2VolumeBox.s2VolumeInfo.token);\n    const childCellId = getS2ChildCellId(cellId, index);\n    const childToken = getS2TokenFromCellId(childCellId);\n\n    // Clone object. Note, s2VolumeInfo is a plain object that doesn't contain any nested object.\n    // So, we can use the Spread Operator to make a shallow copy of the object.\n    const s2ChildVolumeInfo: S2VolumeInfo = {...s2VolumeBox.s2VolumeInfo};\n    s2ChildVolumeInfo.token = childToken; // replace the token with the child's one\n\n    // In case of QUADTREE the sizeZ should NOT be changed!\n    // https://portal.ogc.org/files/102132\n    // A quadtree divides space only on the x and y dimensions.\n    // It divides each tile into 4 smaller tiles where the x and y dimensions are halved.\n    // The quadtree z minimum and maximum remain unchanged.\n    switch (subdivisionScheme) {\n      case 'OCTREE':\n        const s2VolumeInfo: S2VolumeInfo = s2VolumeBox.s2VolumeInfo;\n        const delta = s2VolumeInfo.maximumHeight - s2VolumeInfo.minimumHeight;\n        const sizeZ: number = delta / 2.0; // It's a next level (a child)\n        const midZ: number = s2VolumeInfo.minimumHeight + delta / 2.0;\n        s2VolumeInfo.minimumHeight = midZ - sizeZ;\n        s2VolumeInfo.maximumHeight = midZ + sizeZ;\n        break;\n      default:\n        break;\n    }\n    const box = convertS2BoundingVolumetoOBB(s2ChildVolumeInfo);\n    const childS2VolumeBox: S2VolumeBox = {\n      box,\n      s2VolumeInfo: s2ChildVolumeInfo\n    };\n    return childS2VolumeBox;\n  }\n  return undefined;\n}\n\n/**\n * Recursively parse implicit tiles tree\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling\n * TODO Check out do we able to use Tile3D class as return type here.\n * @param subtree\n * @param lodMetricValue\n * @param options\n * @param parentData\n * @param childIndex\n * @param level\n * @param globalData\n */\n// eslint-disable-next-line max-statements\nexport async function parseImplicitTiles(params: {\n  subtree: Subtree;\n  options: any;\n  parentData?: {mortonIndex: number; x: number; y: number; z: number};\n  childIndex?: number;\n  level?: number;\n  globalData?: {level: number; mortonIndex: number; x: number; y: number; z: number};\n  s2VolumeBox?: S2VolumeBox;\n}) {\n  const {\n    options,\n    parentData = {\n      mortonIndex: 0,\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    childIndex = 0,\n    globalData = {\n      level: 0,\n      mortonIndex: 0,\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    s2VolumeBox\n  } = params;\n  let {subtree, level = 0} = params;\n  const {\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    basePath\n  } = options;\n\n  const tile = {children: [], lodMetricValue: 0, contentUrl: ''};\n\n  const childrenPerTile = SUBDIVISION_COUNT_MAP[subdivisionScheme];\n\n  const childX = childIndex & 0b01;\n  const childY = (childIndex >> 1) & 0b01;\n  const childZ = (childIndex >> 2) & 0b01;\n\n  const levelOffset = (childrenPerTile ** level - 1) / (childrenPerTile - 1);\n  let childTileMortonIndex = concatBits(parentData.mortonIndex, childIndex);\n  let tileAvailabilityIndex = levelOffset + childTileMortonIndex;\n\n  // Local tile coordinates\n  let childTileX = concatBits(parentData.x, childX);\n  let childTileY = concatBits(parentData.y, childY);\n  let childTileZ = concatBits(parentData.z, childZ);\n\n  let isChildSubtreeAvailable = false;\n\n  if (level + 1 > subtreeLevels) {\n    isChildSubtreeAvailable = getAvailabilityResult(\n      subtree.childSubtreeAvailability,\n      childTileMortonIndex\n    );\n  }\n\n  const x = concatBits(globalData.x, childTileX);\n  const y = concatBits(globalData.y, childTileY);\n  const z = concatBits(globalData.z, childTileZ);\n  const lev = level + globalData.level;\n\n  if (isChildSubtreeAvailable) {\n    const subtreePath = `${basePath}/${subtreesUriTemplate}`;\n    const childSubtreeUrl = replaceContentUrlTemplate(subtreePath, lev, x, y, z);\n    const childSubtree = await load(childSubtreeUrl, Tile3DSubtreeLoader);\n\n    subtree = childSubtree;\n\n    globalData.mortonIndex = childTileMortonIndex;\n    globalData.x = childTileX;\n    globalData.y = childTileY;\n    globalData.z = childTileZ;\n    globalData.level = level;\n\n    childTileMortonIndex = 0;\n    tileAvailabilityIndex = 0;\n    childTileX = 0;\n    childTileY = 0;\n    childTileZ = 0;\n    level = 0;\n  }\n\n  const isTileAvailable = getAvailabilityResult(subtree.tileAvailability, tileAvailabilityIndex);\n\n  if (!isTileAvailable || level > maximumLevel) {\n    return tile;\n  }\n\n  const isContentAvailable = getAvailabilityResult(\n    subtree.contentAvailability,\n    tileAvailabilityIndex\n  );\n\n  if (isContentAvailable) {\n    tile.contentUrl = replaceContentUrlTemplate(contentUrlTemplate, lev, x, y, z);\n  }\n\n  const childTileLevel = level + 1;\n  const pData = {mortonIndex: childTileMortonIndex, x: childTileX, y: childTileY, z: childTileZ};\n\n  for (let index = 0; index < childrenPerTile; index++) {\n    const childS2VolumeBox: S2VolumeBox | undefined = getChildS2VolumeBox(\n      s2VolumeBox,\n      index,\n      subdivisionScheme\n    );\n\n    // Recursive calling...\n    const childTileParsed = await parseImplicitTiles({\n      subtree,\n      options,\n      parentData: pData,\n      childIndex: index,\n      level: childTileLevel,\n      globalData,\n      s2VolumeBox: childS2VolumeBox\n    });\n\n    if (childTileParsed.contentUrl || childTileParsed.children.length) {\n      const globalLevel = lev + 1;\n      const childCoordinates = {childTileX, childTileY, childTileZ};\n      const formattedTile = formatTileData(\n        childTileParsed,\n        globalLevel,\n        childCoordinates,\n        options,\n        s2VolumeBox\n      );\n      // @ts-ignore\n      tile.children.push(formattedTile);\n    }\n  }\n\n  return tile;\n}\n\nfunction getAvailabilityResult(availabilityData: Availability, index: number): boolean {\n  if ('constant' in availabilityData) {\n    return Boolean(availabilityData.constant);\n  }\n\n  if (availabilityData.explicitBitstream) {\n    return getBooleanValueFromBitstream(index, availabilityData.explicitBitstream);\n  }\n\n  return false;\n}\n\n/**\n * Do formatting of implicit tile data.\n * TODO Check out do we able to use Tile3D class as type here.\n * @param tile\n * @param lodMetricValue\n * @param options\n * @returns\n */\nfunction formatTileData(\n  tile,\n  level: number,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number},\n  options: any,\n  s2VolumeBox?: S2VolumeBox\n) {\n  const {\n    basePath,\n    refine,\n    getRefine,\n    lodMetricType,\n    getTileType,\n    rootLodMetricValue,\n    rootBoundingVolume\n  } = options;\n  const uri = tile.contentUrl && tile.contentUrl.replace(`${basePath}/`, '');\n  const lodMetricValue = rootLodMetricValue / 2 ** level;\n\n  const boundingVolume: BoundingVolume = s2VolumeBox?.box\n    ? {box: s2VolumeBox.box}\n    : rootBoundingVolume;\n\n  const boundingVolumeForChildTile = calculateBoundingVolumeForChildTile(\n    level,\n    boundingVolume,\n    childCoordinates\n  );\n\n  return {\n    children: tile.children,\n    contentUrl: tile.contentUrl,\n    content: {uri},\n    id: tile.contentUrl,\n    refine: getRefine(refine),\n    type: getTileType(tile),\n    lodMetricType,\n    lodMetricValue,\n    geometricError: lodMetricValue,\n    transform: tile.transform,\n    boundingVolume: boundingVolumeForChildTile\n  };\n}\n\n/**\n * Calculate child bounding volume.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subdivision-rules\n * @param level\n * @param rootBoundingVolume\n * @param childCoordinates\n */\nfunction calculateBoundingVolumeForChildTile(\n  level: number,\n  rootBoundingVolume: BoundingVolume,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number}\n): BoundingVolume {\n  if (rootBoundingVolume.region) {\n    const {childTileX, childTileY, childTileZ} = childCoordinates;\n    const [west, south, east, north, minimumHeight, maximumHeight] = rootBoundingVolume.region;\n    const boundingVolumesCount = 2 ** level;\n\n    const sizeX = (east - west) / boundingVolumesCount;\n    const sizeY = (north - south) / boundingVolumesCount;\n\n    // TODO : Why is the subdivisionScheme not being checked here?\n\n    // In case of QUADTREE the sizeZ should NOT be changed!\n    // https://portal.ogc.org/files/102132\n    // A quadtree divides space only on the x and y dimensions. It divides each tile into 4 smaller tiles where the x and y dimensions are halved. The quadtree z minimum and maximum remain unchanged.\n\n    const sizeZ = (maximumHeight - minimumHeight) / boundingVolumesCount;\n\n    const [childWest, childEast] = [west + sizeX * childTileX, west + sizeX * (childTileX + 1)];\n    const [childSouth, childNorth] = [south + sizeY * childTileY, south + sizeY * (childTileY + 1)];\n    const [childMinimumHeight, childMaximumHeight] = [\n      minimumHeight + sizeZ * childTileZ,\n      minimumHeight + sizeZ * (childTileZ + 1)\n    ];\n\n    return {\n      region: [childWest, childSouth, childEast, childNorth, childMinimumHeight, childMaximumHeight]\n    };\n  }\n\n  if (rootBoundingVolume.box) {\n    return rootBoundingVolume;\n  }\n\n  throw new Error(`Unsupported bounding volume type ${rootBoundingVolume}`);\n}\n\n/**\n * Do binary concatenation\n * @param first\n * @param second\n */\nfunction concatBits(first: number, second: number): number {\n  return parseInt(first.toString(2) + second.toString(2), 2);\n}\n\n/**\n * Replace implicit tile content url with real coordinates.\n * @param templateUrl\n * @param level\n * @param x\n * @param y\n * @param z\n */\nexport function replaceContentUrlTemplate(\n  templateUrl: string,\n  level: number,\n  x: number,\n  y: number,\n  z: number\n): string {\n  const mapUrl = generateMapUrl({level, x, y, z});\n  return templateUrl.replace(/{level}|{x}|{y}|{z}/gi, (matched) => mapUrl[matched]);\n}\n\n/**\n * Get Map object for content url generation\n * @param items\n */\nfunction generateMapUrl(items: {[key: string]: number}): {[key: string]: string} {\n  const mapUrl = {};\n\n  for (const key in items) {\n    mapUrl[`{${key}}`] = items[key];\n  }\n  return mapUrl;\n}\n\n/**\n * Get boolean value from bistream by index\n * A boolean value is encoded as a single bit, either 0 (false) or 1 (true).\n * Multiple boolean values are packed tightly in the same buffer.\n * These buffers of tightly-packed bits are sometimes referred to as bitstreams.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/implicit-revisions/specification/Metadata#booleans\n * @param availabilitiIndex\n */\nfunction getBooleanValueFromBitstream(\n  availabilityIndex: number,\n  availabilityBuffer: Uint8Array\n): boolean {\n  const byteIndex = Math.floor(availabilityIndex / 8);\n  const bitIndex = availabilityIndex % 8;\n  const bitValue = (availabilityBuffer[byteIndex] >> bitIndex) & 1;\n\n  return bitValue === 1;\n}\n"],"mappings":"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"}