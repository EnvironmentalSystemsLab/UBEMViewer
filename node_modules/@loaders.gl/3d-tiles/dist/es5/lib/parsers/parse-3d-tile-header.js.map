{"version":3,"file":"parse-3d-tile-header.js","names":["_tile3dSubtreeLoader","require","_core","_tiles","_parse3dImplicitTiles","_s2CornersToObb","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","getTileType","tile","contentUrl","TILE_TYPE","EMPTY","split","fileExtension","pop","POINTCLOUD","SCENEGRAPH","getRefine","refine","TILE_REFINEMENT","REPLACE","ADD","resolveUri","uri","basePath","urlSchemeRegex","url","URL","concat","decodeURI","startsWith","normalizeTileData","options","content","contentUri","id","lodMetricType","LOD_METRIC_TYPE","GEOMETRIC_ERROR","lodMetricValue","geometricError","transformMatrix","transform","type","normalizeTileHeaders","_x","_x2","_normalizeTileHeaders","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","tileset","root","rootImplicitTilingExtension","stack","children","_iterator","_step","childHeader","childImplicitTilingExtension","wrap","_callee$","_context","prev","getImplicitTilingExtensionData","normalizeImplicitTileHeaders","sent","push","t0","finish","abrupt","stop","_x3","_x4","_x5","_x6","_normalizeImplicitTileHeaders","_callee2","implicitTilingExtension","_tileset$root","_tile$boundingVolume$","subdivisionScheme","maximumLevel","subtreeLevels","subtreesUriTemplate","replacedUrlTemplate","subtreeUrl","subtree","contentUrlTemplate","rootLodMetricValue","s2VolumeInfo","box","s2VolumeBox","rootBoundingVolume","implicitOptions","_callee2$","_context2","subtrees","replaceContentUrlTemplate","load","Tile3DSubtreeLoader","boundingVolume","extensions","convertS2BoundingVolumetoOBB","normalizeImplicitTileData","_x7","_x8","_x9","_normalizeImplicitTileData","_callee3","rootSubtree","_yield$parseImplicitT","_callee3$","_context3","parseImplicitTiles","replace","_tile$extensions","implicitTiling"],"sources":["../../../../src/lib/parsers/parse-3d-tile-header.ts"],"sourcesContent":["import type {LoaderOptions} from '@loaders.gl/loader-utils';\nimport {Tile3DSubtreeLoader} from '../../tile-3d-subtree-loader';\nimport {load} from '@loaders.gl/core';\nimport {Tileset3D, LOD_METRIC_TYPE, TILE_REFINEMENT, TILE_TYPE, Tile3D} from '@loaders.gl/tiles';\nimport {ImplicitTilingExtension, Subtree} from '../../types';\nimport type {S2VolumeBox} from './helpers/parse-3d-implicit-tiles';\nimport {parseImplicitTiles, replaceContentUrlTemplate} from './helpers/parse-3d-implicit-tiles';\nimport type {S2VolumeInfo} from '../utils/obb/s2-corners-to-obb';\nimport {convertS2BoundingVolumetoOBB} from '../utils/obb/s2-corners-to-obb';\n\nfunction getTileType(tile) {\n  if (!tile.contentUrl) {\n    return TILE_TYPE.EMPTY;\n  }\n\n  const contentUrl = tile.contentUrl.split('?')[0]; // Discard query string\n  const fileExtension = contentUrl.split('.').pop();\n  switch (fileExtension) {\n    case 'pnts':\n      return TILE_TYPE.POINTCLOUD;\n    case 'i3dm':\n    case 'b3dm':\n    case 'glb':\n    case 'gltf':\n      return TILE_TYPE.SCENEGRAPH;\n    default:\n      return fileExtension;\n  }\n}\n\nfunction getRefine(refine) {\n  switch (refine) {\n    case 'REPLACE':\n    case 'replace':\n      return TILE_REFINEMENT.REPLACE;\n    case 'ADD':\n    case 'add':\n      return TILE_REFINEMENT.ADD;\n    default:\n      return refine;\n  }\n}\n\nfunction resolveUri(uri, basePath) {\n  // url scheme per RFC3986\n  const urlSchemeRegex = /^[a-z][0-9a-z+.-]*:/i;\n\n  if (urlSchemeRegex.test(basePath)) {\n    const url = new URL(uri, `${basePath}/`);\n    return decodeURI(url.toString());\n  } else if (uri.startsWith('/')) {\n    return uri;\n  }\n\n  return `${basePath}/${uri}`;\n}\n\nexport function normalizeTileData(tile, options) {\n  if (!tile) {\n    return null;\n  }\n  if (tile.content) {\n    const contentUri = tile.content.uri || tile.content.url;\n    tile.contentUrl = resolveUri(contentUri, options.basePath);\n  }\n  tile.id = tile.contentUrl;\n  tile.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tile.lodMetricValue = tile.geometricError;\n  tile.transformMatrix = tile.transform;\n  tile.type = getTileType(tile);\n  tile.refine = getRefine(tile.refine);\n\n  return tile;\n}\n\n// normalize tile headers\nexport async function normalizeTileHeaders(\n  tileset: Tileset3D,\n  options: LoaderOptions\n): Promise<Tileset3D> {\n  const basePath = tileset.basePath;\n  let root: Tileset3D;\n\n  const rootImplicitTilingExtension = getImplicitTilingExtensionData(tileset?.root);\n  if (rootImplicitTilingExtension && tileset.root) {\n    root = await normalizeImplicitTileHeaders(\n      tileset.root,\n      tileset,\n      rootImplicitTilingExtension,\n      options\n    );\n  } else {\n    root = normalizeTileData(tileset.root, tileset);\n  }\n\n  const stack: any[] = [];\n  stack.push(root);\n\n  while (stack.length > 0) {\n    const tile = stack.pop() || {};\n    const children = tile.children || [];\n    for (let childHeader of children) {\n      const childImplicitTilingExtension = getImplicitTilingExtensionData(childHeader);\n      if (childImplicitTilingExtension) {\n        childHeader = await normalizeImplicitTileHeaders(\n          childHeader,\n          tileset,\n          childImplicitTilingExtension,\n          options\n        );\n      } else {\n        normalizeTileData(childHeader, {basePath});\n      }\n\n      stack.push(childHeader);\n    }\n  }\n\n  return root;\n}\n\n/**\n * Do normalisation of implicit tile headers\n * TODO Check if Tile3D class can be a return type here.\n * @param tileset\n */\nexport async function normalizeImplicitTileHeaders(\n  tile: Tile3D,\n  tileset: Tileset3D,\n  implicitTilingExtension: ImplicitTilingExtension,\n  options: LoaderOptions\n) {\n  const basePath = tileset.basePath;\n  const {\n    subdivisionScheme,\n    maximumLevel,\n    subtreeLevels,\n    subtrees: {uri: subtreesUriTemplate}\n  } = implicitTilingExtension;\n  const replacedUrlTemplate = replaceContentUrlTemplate(subtreesUriTemplate, 0, 0, 0, 0);\n  const subtreeUrl = resolveUri(replacedUrlTemplate, basePath);\n  const subtree = await load(subtreeUrl, Tile3DSubtreeLoader, options);\n  const contentUrlTemplate = resolveUri(tile.content.uri, basePath);\n  const refine = tileset?.root?.refine;\n  // @ts-ignore\n  const rootLodMetricValue = tile.geometricError;\n\n  // Replace tile.boundingVolume with the the bounding volume specified by the extensions['3DTILES_bounding_volume_S2']\n  const s2VolumeInfo: S2VolumeInfo = tile.boundingVolume.extensions?.['3DTILES_bounding_volume_S2'];\n  if (s2VolumeInfo) {\n    const box = convertS2BoundingVolumetoOBB(s2VolumeInfo);\n    const s2VolumeBox: S2VolumeBox = {box, s2VolumeInfo};\n    tile.boundingVolume = s2VolumeBox;\n  }\n\n  const rootBoundingVolume = tile.boundingVolume;\n\n  const implicitOptions = {\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    refine,\n    basePath,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    rootLodMetricValue,\n    rootBoundingVolume,\n    getTileType,\n    getRefine\n  };\n\n  return await normalizeImplicitTileData(tile, subtree, implicitOptions);\n}\n\n/**\n * Do implicit data normalisation to create hierarchical tile structure\n * @param tile\n * @param rootSubtree\n * @param options\n * @returns\n */\nexport async function normalizeImplicitTileData(tile, rootSubtree: Subtree, options: any) {\n  if (!tile) {\n    return null;\n  }\n\n  tile.lodMetricType = LOD_METRIC_TYPE.GEOMETRIC_ERROR;\n  tile.lodMetricValue = tile.geometricError;\n  tile.transformMatrix = tile.transform;\n\n  const {children, contentUrl} = await parseImplicitTiles({\n    subtree: rootSubtree,\n    options,\n    s2VolumeBox: tile\n  });\n\n  if (contentUrl) {\n    tile.contentUrl = contentUrl;\n    tile.content = {uri: contentUrl.replace(`${options.basePath}/`, '')};\n  }\n\n  tile.refine = getRefine(tile.refine);\n  tile.type = getTileType(tile);\n  tile.children = children;\n  tile.id = tile.contentUrl;\n\n  return tile;\n}\n\n/**\n * Implicit Tiling data can be in 3DTILES_implicit_tiling for 3DTiles v.Next or directly in implicitTiling object for 3DTiles v1.1.\n * Spec 3DTiles v.Next - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling\n * Spec 3DTiles v.1.1 - https://github.com/CesiumGS/3d-tiles/tree/draft-1.1/specification/ImplicitTiling\n * @param tile\n * @returns\n */\nfunction getImplicitTilingExtensionData(tile: Tile3D | null): ImplicitTilingExtension {\n  return tile?.extensions?.['3DTILES_implicit_tiling'] || tile?.implicitTiling;\n}\n"],"mappings":"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"}