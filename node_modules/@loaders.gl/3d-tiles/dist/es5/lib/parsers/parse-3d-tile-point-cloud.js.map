{"version":3,"file":"parse-3d-tile-point-cloud.js","names":["_draco","require","_math","_core","_tile3dFeatureTable","_interopRequireDefault","_tile3dBatchTable","_parse3dTileHeader","_parse3dTileTables","_normalize3dTileColors","_normalize3dTileNormals","_normalize3dTilePositions","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","parsePointCloud3DTile","_x","_x2","_x3","_x4","_x5","_parsePointCloud3DTile","_asyncToGenerator2","_regenerator","mark","_callee","tile","arrayBuffer","byteOffset","options","context","_parsePointCloudTable","featureTable","batchTable","wrap","_callee$","_context","prev","next","parse3DTileHeaderSync","parse3DTileTablesHeaderSync","parse3DTileTablesSync","initializeTile","parsePointCloudTables","parseDraco","parsePositions","parseColors","parseNormals","abrupt","stop","attributes","positions","colors","normals","batchIds","isQuantized","isTranslucent","isRGB565","isOctEncoded16P","Tile3DFeatureTable","featureTableJson","featureTableBinary","pointsLength","getGlobalProperty","Number","isFinite","Error","featuresLength","pointCount","rtcCenter","GL","FLOAT","parseBatchIds","hasProperty","getPropertyArray","UNSIGNED_SHORT","quantizedRange","quantizedVolumeScale","quantizedVolumeOffset","normalize3DTilePositionAttribute","UNSIGNED_BYTE","normalize3DTileColorAttribute","constantRGBA","normalize3DTileNormalAttribute","batchFeatureLength","batchTableJson","batchTableBinary","Tile3DBatchTable","_x6","_x7","_x8","_x9","_x10","_parseDraco","_callee2","dracoBuffer","dracoFeatureTableProperties","dracoBatchTableProperties","batchTableDraco","featureTableDraco","dracoByteOffset","dracoByteLength","dracoData","_callee2$","_context2","extensions","properties","getExtension","byteLength","slice","hasPositions","POSITION","hasColors","RGB","RGBA","hasNormals","NORMAL","hasBatchIds","BATCH_ID","buffer","featureTableProperties","batchTableProperties","dequantizeInShader","loadDraco","sent","_x11","_x12","_x13","_x14","_loadDraco","_callee3","parse","dracoOptions","data","decodedPositions","decodedColors","decodedNormals","decodedBatchIds","isQuantizedDraco","isOctEncodedDraco","quantization","range","batchTableAttributes","_i","_Object$keys","attributeName","_callee3$","_context3","draco","extraAttributes","DracoLoader","value","COLOR_0","Vector3","minValues","quantizationBits","octEncodedRange","toLowerCase","undefined"],"sources":["../../../../src/lib/parsers/parse-3d-tile-point-cloud.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {GL} from '@loaders.gl/math';\nimport {Vector3} from '@math.gl/core';\n\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport Tile3DBatchTable from '../classes/tile-3d-batch-table';\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\nimport {parse3DTileTablesHeaderSync, parse3DTileTablesSync} from './helpers/parse-3d-tile-tables';\nimport {normalize3DTileColorAttribute} from './helpers/normalize-3d-tile-colors';\nimport {normalize3DTileNormalAttribute} from './helpers/normalize-3d-tile-normals';\nimport {normalize3DTilePositionAttribute} from './helpers/normalize-3d-tile-positions';\n\nexport async function parsePointCloud3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n  initializeTile(tile);\n\n  const {featureTable, batchTable} = parsePointCloudTables(tile);\n\n  await parseDraco(tile, featureTable, batchTable, options, context);\n\n  parsePositions(tile, featureTable, options);\n  parseColors(tile, featureTable, batchTable);\n  parseNormals(tile, featureTable);\n\n  return byteOffset;\n}\n\nfunction initializeTile(tile) {\n  // Initialize point cloud tile defaults\n  tile.attributes = {\n    positions: null,\n    colors: null,\n    normals: null,\n    batchIds: null\n  };\n  tile.isQuantized = false;\n  tile.isTranslucent = false;\n  tile.isRGB565 = false;\n  tile.isOctEncoded16P = false;\n}\n\nfunction parsePointCloudTables(tile) {\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n\n  const pointsLength = featureTable.getGlobalProperty('POINTS_LENGTH');\n  if (!Number.isFinite(pointsLength)) {\n    throw new Error('POINTS_LENGTH must be defined');\n  }\n  featureTable.featuresLength = pointsLength;\n\n  tile.featuresLength = pointsLength;\n  tile.pointsLength = pointsLength;\n  tile.pointCount = pointsLength;\n\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n\n  const batchTable = parseBatchIds(tile, featureTable);\n\n  return {featureTable, batchTable};\n}\n\nfunction parsePositions(tile, featureTable, options) {\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      const positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n\n      tile.isQuantized = true;\n      tile.quantizedRange = (1 << 16) - 1;\n\n      tile.quantizedVolumeScale = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_SCALE',\n        GL.FLOAT,\n        3\n      );\n      if (!tile.quantizedVolumeScale) {\n        throw new Error('QUANTIZED_VOLUME_SCALE must be defined for quantized positions.');\n      }\n\n      tile.quantizedVolumeOffset = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_OFFSET',\n        GL.FLOAT,\n        3\n      );\n      if (!tile.quantizedVolumeOffset) {\n        throw new Error('QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.');\n      }\n\n      tile.attributes.positions = normalize3DTilePositionAttribute(tile, positions, options);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n\nfunction parseColors(tile, featureTable, batchTable) {\n  if (!tile.attributes.colors) {\n    let colors = null;\n    if (featureTable.hasProperty('RGBA')) {\n      colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasProperty('RGB565')) {\n      colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n\n    tile.attributes.colors = normalize3DTileColorAttribute(tile, colors, batchTable);\n  }\n\n  if (featureTable.hasProperty('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n}\n\nfunction parseNormals(tile, featureTable) {\n  if (!tile.attributes.normals) {\n    let normals = null;\n    if (featureTable.hasProperty('NORMAL')) {\n      normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('NORMAL_OCT16P')) {\n      normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n\n    tile.attributes.normals = normalize3DTileNormalAttribute(tile, normals);\n  }\n}\n\nfunction parseBatchIds(tile, featureTable) {\n  let batchTable: Tile3DBatchTable | null = null;\n  if (!tile.batchIds && featureTable.hasProperty('BATCH_ID')) {\n    tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n\n    if (tile.batchIds) {\n      const batchFeatureLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n      if (!batchFeatureLength) {\n        throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n      }\n      const {batchTableJson, batchTableBinary} = tile;\n      batchTable = new Tile3DBatchTable(batchTableJson, batchTableBinary, batchFeatureLength);\n    }\n  }\n  return batchTable;\n}\n\n// eslint-disable-next-line complexity\nasync function parseDraco(tile, featureTable, batchTable, options, context) {\n  let dracoBuffer;\n  let dracoFeatureTableProperties;\n  let dracoBatchTableProperties;\n  const batchTableDraco =\n    tile.batchTableJson &&\n    tile.batchTableJson.extensions &&\n    tile.batchTableJson.extensions['3DTILES_draco_point_compression'];\n  if (batchTableDraco) {\n    dracoBatchTableProperties = batchTableDraco.properties;\n  }\n\n  const featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n  if (featureTableDraco) {\n    dracoFeatureTableProperties = featureTableDraco.properties;\n    const dracoByteOffset = featureTableDraco.byteOffset;\n    const dracoByteLength = featureTableDraco.byteLength;\n    if (!dracoFeatureTableProperties || !Number.isFinite(dracoByteOffset) || !dracoByteLength) {\n      throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n    }\n\n    dracoBuffer = tile.featureTableBinary.slice(dracoByteOffset, dracoByteOffset + dracoByteLength);\n\n    tile.hasPositions = Number.isFinite(dracoFeatureTableProperties.POSITION);\n    tile.hasColors =\n      Number.isFinite(dracoFeatureTableProperties.RGB) ||\n      Number.isFinite(dracoFeatureTableProperties.RGBA);\n    tile.hasNormals = Number.isFinite(dracoFeatureTableProperties.NORMAL);\n    tile.hasBatchIds = Number.isFinite(dracoFeatureTableProperties.BATCH_ID);\n    tile.isTranslucent = Number.isFinite(dracoFeatureTableProperties.RGBA);\n  }\n\n  if (!dracoBuffer) {\n    return true;\n  }\n\n  const dracoData = {\n    buffer: dracoBuffer,\n    properties: {...dracoFeatureTableProperties, ...dracoBatchTableProperties},\n    featureTableProperties: dracoFeatureTableProperties,\n    batchTableProperties: dracoBatchTableProperties,\n    dequantizeInShader: false\n  };\n\n  return await loadDraco(tile, dracoData, options, context);\n}\n\n// eslint-disable-next-line complexity, max-statements\nexport async function loadDraco(tile, dracoData, options, context) {\n  const {parse} = context;\n  const dracoOptions = {\n    ...options,\n    draco: {\n      ...options.draco,\n      extraAttributes: dracoData.batchTableProperties || {}\n    }\n  };\n\n  // The entire tileset might be included, too expensive to serialize\n  delete dracoOptions['3d-tiles'];\n\n  const data = await parse(dracoData.buffer, DracoLoader, dracoOptions);\n\n  const decodedPositions = data.attributes.POSITION && data.attributes.POSITION.value;\n  const decodedColors = data.attributes.COLOR_0 && data.attributes.COLOR_0.value;\n  const decodedNormals = data.attributes.NORMAL && data.attributes.NORMAL.value;\n  const decodedBatchIds = data.attributes.BATCH_ID && data.attributes.BATCH_ID.value;\n  const isQuantizedDraco = decodedPositions && data.attributes.POSITION.value.quantization;\n  const isOctEncodedDraco = decodedNormals && data.attributes.NORMAL.value.quantization;\n  if (isQuantizedDraco) {\n    // Draco quantization range == quantized volume scale - size in meters of the quantized volume\n    // Internal quantized range is the range of values of the quantized data, e.g. 255 for 8-bit, 1023 for 10-bit, etc\n    const quantization = data.POSITION.data.quantization;\n    const range = quantization.range;\n    tile.quantizedVolumeScale = new Vector3(range, range, range);\n    tile.quantizedVolumeOffset = new Vector3(quantization.minValues);\n    tile.quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n    tile.isQuantizedDraco = true;\n  }\n  if (isOctEncodedDraco) {\n    tile.octEncodedRange = (1 << data.NORMAL.data.quantization.quantizationBits) - 1.0;\n    tile.isOctEncodedDraco = true;\n  }\n\n  // Extra batch table attributes\n  const batchTableAttributes = {};\n  if (dracoData.batchTableProperties) {\n    for (const attributeName of Object.keys(dracoData.batchTableProperties)) {\n      if (data.attributes[attributeName] && data.attributes[attributeName].value) {\n        batchTableAttributes[attributeName.toLowerCase()] = data.attributes[attributeName].value;\n      }\n    }\n  }\n\n  tile.attributes = {\n    positions: decodedPositions,\n    colors: normalize3DTileColorAttribute(tile, decodedColors, undefined),\n    normals: decodedNormals,\n    batchIds: decodedBatchIds,\n    ...batchTableAttributes\n  };\n}\n\n// TODO - this is the remaining code from Cesium's parser\n/*\n  const batchTable = new Tile3DBatchTable(tile);\n\n  // parseDracoBuffer(tile, featureTable, batchTable);\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n}\n/*\n\n  if (!tile.attributes.positions) {\n    if (featureTable.hasProperty('POSITION')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION', GL.FLOAT, 3);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      tile.attributes.positions = featureTable.getPropertyArray('POSITION_QUANTIZED', GL.UNSIGNED_SHORT, 3);\n\n\n  if (!tile.colors) {\n    if (featureTable.hasProperty('RGBA')) {\n      tile.colors = featureTable.getPropertyArray('RGBA', GL.UNSIGNED_BYTE, 4);\n      tile.isTranslucent = true;\n    } else if (featureTable.hasProperty('RGB')) {\n      tile.colors = featureTable.getPropertyArray('RGB', GL.UNSIGNED_BYTE, 3);\n    } else if (featureTable.hasPropertry('RGB565')) {\n      tile.colors = featureTable.getPropertyArray('RGB565', GL.UNSIGNED_SHORT, 1);\n      tile.isRGB565 = true;\n    }\n  }\n\n  if (!tile.attributes.normals) {\n    if (featureTable.getPropertry('NORMAL')) {\n      tile.attributes.normals = featureTable.getPropertyArray('NORMAL', GL.FLOAT, 3);\n    } else if (featureTable.getProperty('NORMAL_OCT16P')) {\n      tile.attributes.normals = featureTable.getPropertyArray('NORMAL_OCT16P', GL.UNSIGNED_BYTE, 2);\n      tile.isOctEncoded16P = true;\n    }\n  }\n\n  if (!tile.batchIds) {\n    if (featureTable.hasProperty('BATCH_ID')) {\n      tile.batchIds = featureTable.getPropertyArray('BATCH_ID', GL.UNSIGNED_SHORT, 1);\n    }\n  }\n\n  if (!tile.attributes.positions) {\n    throw new Error('Either POSITION or POSITION_QUANTIZED must be defined.');\n  }\n\n  if (featureTable.getPropertry('CONSTANT_RGBA')) {\n    tile.constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', GL.UNSIGNED_BYTE, 4);\n  }\n\n  if (tile.batchIds) {\n    const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n    if (!defined(batchLength)) {\n      throw new Error('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n    }\n\n    if (defined(batchTableBinary)) {\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      batchTableBinary = new Uint8Array(batchTableBinary);\n    }\n\n    if (defined(pointCloud._batchTableLoaded)) {\n      pointCloud._batchTableLoaded(batchLength, batchTableJson, batchTableBinary);\n    }\n  }\n\n  // If points are not batched and there are per-point properties, use these properties for styling purposes\n  var styleableProperties;\n  if (!hasBatchIds && defined(batchTableBinary)) {\n    tile.styleableProperties = Cesium3DTileBatchTable.getBinaryProperties(\n      pointsLength,\n      batchTableJson,\n      batchTableBinary\n    );\n  }\n\n  tile.draco = draco;\n}\n\n// Separate parsing and decoding of Draco\nexport function parseDracoBuffer(tile, featureTable, batchTable) {\n  let dracoBuffer;\n  let dracoFeatureTableProperties;\n  let dracoBatchTableProperties;\n\n  const batchTableDraco = batchTable.getExtension('3DTILES_draco_point_compression');\n  if (batchTableDraco) {\n    dracoBatchTableProperties = batchTableDraco.properties;\n  }\n\n  const featureTableDraco = featureTable.getExtension('3DTILES_draco_point_compression');\n  if (featureTableDraco) {\n    dracoFeatureTableProperties = featureTableDraco.properties;\n    const dracoByteOffset = featureTableDraco.byteOffset;\n    const dracoByteLength = featureTableDraco.byteLength;\n    if (!dracoFeatureTableProperties || !dracoByteOffset || !dracoByteLength) {\n      throw new Error('Draco properties, byteOffset, and byteLength must be defined');\n    }\n\n    dracoBuffer = arraySlice(\n      featureTableBinary,\n      dracoByteOffset,\n      dracoByteOffset + dracoByteLength\n    );\n    tile.hasPositions = dracoFeatureTableProperties.POSITION;\n    tile.hasColors = dracoFeatureTableProperties.RGB || dracoFeatureTableProperties.RGBA;\n    tile.hasNormals = dracoFeatureTableProperties.NORMAL;\n    tile.hasBatchIds = dracoFeatureTableProperties.BATCH_ID;\n    tile.isTranslucent = dracoFeatureTableProperties.RGBA;\n  }\n\n  if (dracoBuffer) {\n    tile.draco = {\n      buffer: dracoBuffer,\n      properties: {...dracoFeatureTableProperties, ...dracoBatchTableProperties},\n      featureTableProperties: dracoFeatureTableProperties,\n      batchTableProperties: dracoBatchTableProperties,\n      dequantizeInShader: false\n    };\n\n    tile.decodingState = DECODING_STATE.NEEDS_DECODE;\n  }\n}\n\n/*\nfunction decodeDraco(tile, context) {\n  if (tile.decodingState === DECODING_STATE.READY) {\n    return false;\n  }\n  if (tile.decodingState === DECODING_STATE.NEEDS_DECODE) {\n    var parsedContent = tile._parsedContent;\n    var draco = parsedContent.draco;\n    var decodePromise = DracoLoader.decodePointCloud(draco, context);\n    if (defined(decodePromise)) {\n      tile.decodingState = DECODING_STATE.DECODING;\n      decodePromise.then(function(result) {\n        tile.decodingState = DECODING_STATE.READY;\n        var decodedPositions = defined(result.POSITION) ? result.POSITION.array : undefined;\n        var decodedRgb = defined(result.RGB) ? result.RGB.array : undefined;\n        var decodedRgba = defined(result.RGBA) ? result.RGBA.array : undefined;\n        var decodedNormals = defined(result.NORMAL) ? result.NORMAL.array : undefined;\n        var decodedBatchIds = defined(result.BATCH_ID) ? result.BATCH_ID.array : undefined;\n        var isQuantizedDraco = defined(decodedPositions) && defined(result.POSITION.data.quantization);\n        var isOctEncodedDraco = defined(decodedNormals) && defined(result.NORMAL.data.quantization);\n        if (isQuantizedDraco) {\n          // Draco quantization range == quantized volume scale - size in meters of the quantized volume\n          // Internal quantized range is the range of values of the quantized data, e.g. 255 for 8-bit, 1023 for 10-bit, etc\n          var quantization = result.POSITION.data.quantization;\n          var range = quantization.range;\n          tile._quantizedVolumeScale = Cartesian3.fromElements(range, range, range);\n          tile._quantizedVolumeOffset = Cartesian3.unpack(quantization.minValues);\n          tile._quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n          tile._isQuantizedDraco = true;\n        }\n        if (isOctEncodedDraco) {\n          tile._octEncodedRange = (1 << result.NORMAL.data.quantization.quantizationBits) - 1.0;\n          tile._isOctEncodedDraco = true;\n        }\n        var styleableProperties = parsedContent.styleableProperties;\n        var batchTableProperties = draco.batchTableProperties;\n        for (var name in batchTableProperties) {\n          if (batchTableProperties.hasOwnProperty(name)) {\n            var property = result[name];\n            if (!defined(styleableProperties)) {\n              styleableProperties = {};\n            }\n            styleableProperties[name] = {\n              typedArray : property.array,\n              componentCount : property.data.componentsPerAttribute\n            };\n          }\n        }\n        parsedContent.positions = defaultValue(decodedPositions, parsedContent.positions);\n        parsedContent.colors = defaultValue(defaultValue(decodedRgba, decodedRgb), parsedContent.colors);\n        parsedContent.normals = defaultValue(decodedNormals, parsedContent.normals);\n        parsedContent.batchIds = defaultValue(decodedBatchIds, parsedContent.batchIds);\n        parsedContent.styleableProperties = styleableProperties;\n      }).otherwise(function(error) {\n        tile.decodingState = DECODING_STATE.FAILED;\n        tile._readyPromise.reject(error);\n      });\n    }\n  }\n  return true;\n}\n*/\n"],"mappings":"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"}