{"version":3,"file":"s2-cell-utils.js","names":["_s2Geometry","require","_s2TokenFunctions","getS2Cell","tokenOrKey","key","getS2QuadKey","s2cell","getS2CellFromQuadKey","indexOf","id","getS2CellIdFromToken","getS2QuadkeyFromCellId"],"sources":["../../../../../../src/lib/utils/s2/s2geometry/s2-cell-utils.ts"],"sourcesContent":["// math.gl, MIT license\n\nimport type {S2Cell} from './s2-geometry';\nimport {getS2CellFromQuadKey, getS2QuadkeyFromCellId} from './s2-geometry';\nimport {getS2CellIdFromToken} from '../s2-token-functions';\n\nimport Long from 'long';\n\n/**\n * Return the S2Cell from the cell's hex token or the Hilbert quad key\n * @param tokenOrKey {string} A string that is the cell's hex token or the Hilbert quad key (containing /)\n * @returns {@link S2Cell}\n */\nexport function getS2Cell(tokenOrKey: string): S2Cell {\n  const key = getS2QuadKey(tokenOrKey);\n  const s2cell = getS2CellFromQuadKey(key);\n  return s2cell;\n}\n\n/**\n * Get the underlying Hilbert quad key\n * @param tokenOrKey {string} A string that is the cell's hex token or the Hilbert quad key (containing /)\n * @returns Hilbert quad key\n */\nexport function getS2QuadKey(tokenOrKey: string): string {\n  if (tokenOrKey.indexOf('/') > 0) {\n    // is Hilbert quad key\n    return tokenOrKey;\n  }\n  // is S2 cell's hex token\n  const id: Long = getS2CellIdFromToken(tokenOrKey);\n  return getS2QuadkeyFromCellId(id);\n}\n"],"mappings":";;;;;;;AAGA,IAAAA,WAAA,GAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AASO,SAASE,SAASA,CAACC,UAAkB,EAAU;EACpD,IAAMC,GAAG,GAAGC,YAAY,CAACF,UAAU,CAAC;EACpC,IAAMG,MAAM,GAAG,IAAAC,gCAAoB,EAACH,GAAG,CAAC;EACxC,OAAOE,MAAM;AACf;AAOO,SAASD,YAAYA,CAACF,UAAkB,EAAU;EACvD,IAAIA,UAAU,CAACK,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IAE/B,OAAOL,UAAU;EACnB;EAEA,IAAMM,EAAQ,GAAG,IAAAC,sCAAoB,EAACP,UAAU,CAAC;EACjD,OAAO,IAAAQ,kCAAsB,EAACF,EAAE,CAAC;AACnC"}