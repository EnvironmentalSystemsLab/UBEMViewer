{"version":3,"file":"parse-3d-implicit-tiles.js","names":["Tile3DSubtreeLoader","load","getS2CellIdFromToken","getS2ChildCellId","getS2TokenFromCellId","convertS2BoundingVolumetoOBB","QUADTREE_DEVISION_COUNT","OCTREE_DEVISION_COUNT","SUBDIVISION_COUNT_MAP","QUADTREE","OCTREE","getChildS2VolumeBox","s2VolumeBox","index","subdivisionScheme","box","cellId","s2VolumeInfo","token","childCellId","childToken","s2ChildVolumeInfo","delta","maximumHeight","minimumHeight","sizeZ","midZ","childS2VolumeBox","undefined","parseImplicitTiles","params","options","parentData","mortonIndex","x","y","z","childIndex","globalData","level","subtree","subtreeLevels","maximumLevel","contentUrlTemplate","subtreesUriTemplate","basePath","tile","children","lodMetricValue","contentUrl","childrenPerTile","childX","childY","childZ","levelOffset","childTileMortonIndex","concatBits","tileAvailabilityIndex","childTileX","childTileY","childTileZ","isChildSubtreeAvailable","getAvailabilityResult","childSubtreeAvailability","lev","subtreePath","concat","childSubtreeUrl","replaceContentUrlTemplate","childSubtree","isTileAvailable","tileAvailability","isContentAvailable","contentAvailability","childTileLevel","pData","childTileParsed","length","globalLevel","childCoordinates","formattedTile","formatTileData","push","availabilityData","Boolean","constant","explicitBitstream","getBooleanValueFromBitstream","refine","getRefine","lodMetricType","getTileType","rootLodMetricValue","rootBoundingVolume","uri","replace","boundingVolume","boundingVolumeForChildTile","calculateBoundingVolumeForChildTile","content","id","type","geometricError","transform","region","west","south","east","north","boundingVolumesCount","sizeX","sizeY","childWest","childEast","childSouth","childNorth","childMinimumHeight","childMaximumHeight","Error","first","second","parseInt","toString","templateUrl","mapUrl","generateMapUrl","matched","items","key","availabilityIndex","availabilityBuffer","byteIndex","Math","floor","bitIndex","bitValue"],"sources":["../../../../../src/lib/parsers/helpers/parse-3d-implicit-tiles.ts"],"sourcesContent":["import type {Availability, BoundingVolume, Subtree} from '../../../types';\nimport {Tile3DSubtreeLoader} from '../../../tile-3d-subtree-loader';\nimport {load} from '@loaders.gl/core';\n\nimport {getS2CellIdFromToken, getS2ChildCellId, getS2TokenFromCellId} from '../../utils/s2/index';\nimport type {S2VolumeInfo} from '../../utils/obb/s2-corners-to-obb';\nimport {convertS2BoundingVolumetoOBB} from '../../utils/obb/s2-corners-to-obb';\nimport Long from 'long';\n\nconst QUADTREE_DEVISION_COUNT = 4;\nconst OCTREE_DEVISION_COUNT = 8;\n\nconst SUBDIVISION_COUNT_MAP = {\n  QUADTREE: QUADTREE_DEVISION_COUNT,\n  OCTREE: OCTREE_DEVISION_COUNT\n};\n\n/**\n *  S2VolumeBox is an extention of BoundingVolume of type \"box\"\n */\nexport type S2VolumeBox = {\n  /** BoundingVolume of type \"box\" has the \"box\" field. S2VolumeBox contains it as well. */\n  box: number[];\n  /** s2VolumeInfo provides additional info about the box - specifically the token, min and max height */\n  s2VolumeInfo: S2VolumeInfo;\n};\n\nfunction getChildS2VolumeBox(\n  s2VolumeBox: S2VolumeBox | undefined,\n  index: number,\n  subdivisionScheme: string\n): S2VolumeBox | undefined {\n  if (s2VolumeBox?.box) {\n    // Check if the BoundingVolume is of type \"box\"\n    const cellId: Long = getS2CellIdFromToken(s2VolumeBox.s2VolumeInfo.token);\n    const childCellId = getS2ChildCellId(cellId, index);\n    const childToken = getS2TokenFromCellId(childCellId);\n\n    // Clone object. Note, s2VolumeInfo is a plain object that doesn't contain any nested object.\n    // So, we can use the Spread Operator to make a shallow copy of the object.\n    const s2ChildVolumeInfo: S2VolumeInfo = {...s2VolumeBox.s2VolumeInfo};\n    s2ChildVolumeInfo.token = childToken; // replace the token with the child's one\n\n    // In case of QUADTREE the sizeZ should NOT be changed!\n    // https://portal.ogc.org/files/102132\n    // A quadtree divides space only on the x and y dimensions.\n    // It divides each tile into 4 smaller tiles where the x and y dimensions are halved.\n    // The quadtree z minimum and maximum remain unchanged.\n    switch (subdivisionScheme) {\n      case 'OCTREE':\n        const s2VolumeInfo: S2VolumeInfo = s2VolumeBox.s2VolumeInfo;\n        const delta = s2VolumeInfo.maximumHeight - s2VolumeInfo.minimumHeight;\n        const sizeZ: number = delta / 2.0; // It's a next level (a child)\n        const midZ: number = s2VolumeInfo.minimumHeight + delta / 2.0;\n        s2VolumeInfo.minimumHeight = midZ - sizeZ;\n        s2VolumeInfo.maximumHeight = midZ + sizeZ;\n        break;\n      default:\n        break;\n    }\n    const box = convertS2BoundingVolumetoOBB(s2ChildVolumeInfo);\n    const childS2VolumeBox: S2VolumeBox = {\n      box,\n      s2VolumeInfo: s2ChildVolumeInfo\n    };\n    return childS2VolumeBox;\n  }\n  return undefined;\n}\n\n/**\n * Recursively parse implicit tiles tree\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling\n * TODO Check out do we able to use Tile3D class as return type here.\n * @param subtree\n * @param lodMetricValue\n * @param options\n * @param parentData\n * @param childIndex\n * @param level\n * @param globalData\n */\n// eslint-disable-next-line max-statements\nexport async function parseImplicitTiles(params: {\n  subtree: Subtree;\n  options: any;\n  parentData?: {mortonIndex: number; x: number; y: number; z: number};\n  childIndex?: number;\n  level?: number;\n  globalData?: {level: number; mortonIndex: number; x: number; y: number; z: number};\n  s2VolumeBox?: S2VolumeBox;\n}) {\n  const {\n    options,\n    parentData = {\n      mortonIndex: 0,\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    childIndex = 0,\n    globalData = {\n      level: 0,\n      mortonIndex: 0,\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    s2VolumeBox\n  } = params;\n  let {subtree, level = 0} = params;\n  const {\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    basePath\n  } = options;\n\n  const tile = {children: [], lodMetricValue: 0, contentUrl: ''};\n\n  const childrenPerTile = SUBDIVISION_COUNT_MAP[subdivisionScheme];\n\n  const childX = childIndex & 0b01;\n  const childY = (childIndex >> 1) & 0b01;\n  const childZ = (childIndex >> 2) & 0b01;\n\n  const levelOffset = (childrenPerTile ** level - 1) / (childrenPerTile - 1);\n  let childTileMortonIndex = concatBits(parentData.mortonIndex, childIndex);\n  let tileAvailabilityIndex = levelOffset + childTileMortonIndex;\n\n  // Local tile coordinates\n  let childTileX = concatBits(parentData.x, childX);\n  let childTileY = concatBits(parentData.y, childY);\n  let childTileZ = concatBits(parentData.z, childZ);\n\n  let isChildSubtreeAvailable = false;\n\n  if (level + 1 > subtreeLevels) {\n    isChildSubtreeAvailable = getAvailabilityResult(\n      subtree.childSubtreeAvailability,\n      childTileMortonIndex\n    );\n  }\n\n  const x = concatBits(globalData.x, childTileX);\n  const y = concatBits(globalData.y, childTileY);\n  const z = concatBits(globalData.z, childTileZ);\n  const lev = level + globalData.level;\n\n  if (isChildSubtreeAvailable) {\n    const subtreePath = `${basePath}/${subtreesUriTemplate}`;\n    const childSubtreeUrl = replaceContentUrlTemplate(subtreePath, lev, x, y, z);\n    const childSubtree = await load(childSubtreeUrl, Tile3DSubtreeLoader);\n\n    subtree = childSubtree;\n\n    globalData.mortonIndex = childTileMortonIndex;\n    globalData.x = childTileX;\n    globalData.y = childTileY;\n    globalData.z = childTileZ;\n    globalData.level = level;\n\n    childTileMortonIndex = 0;\n    tileAvailabilityIndex = 0;\n    childTileX = 0;\n    childTileY = 0;\n    childTileZ = 0;\n    level = 0;\n  }\n\n  const isTileAvailable = getAvailabilityResult(subtree.tileAvailability, tileAvailabilityIndex);\n\n  if (!isTileAvailable || level > maximumLevel) {\n    return tile;\n  }\n\n  const isContentAvailable = getAvailabilityResult(\n    subtree.contentAvailability,\n    tileAvailabilityIndex\n  );\n\n  if (isContentAvailable) {\n    tile.contentUrl = replaceContentUrlTemplate(contentUrlTemplate, lev, x, y, z);\n  }\n\n  const childTileLevel = level + 1;\n  const pData = {mortonIndex: childTileMortonIndex, x: childTileX, y: childTileY, z: childTileZ};\n\n  for (let index = 0; index < childrenPerTile; index++) {\n    const childS2VolumeBox: S2VolumeBox | undefined = getChildS2VolumeBox(\n      s2VolumeBox,\n      index,\n      subdivisionScheme\n    );\n\n    // Recursive calling...\n    const childTileParsed = await parseImplicitTiles({\n      subtree,\n      options,\n      parentData: pData,\n      childIndex: index,\n      level: childTileLevel,\n      globalData,\n      s2VolumeBox: childS2VolumeBox\n    });\n\n    if (childTileParsed.contentUrl || childTileParsed.children.length) {\n      const globalLevel = lev + 1;\n      const childCoordinates = {childTileX, childTileY, childTileZ};\n      const formattedTile = formatTileData(\n        childTileParsed,\n        globalLevel,\n        childCoordinates,\n        options,\n        s2VolumeBox\n      );\n      // @ts-ignore\n      tile.children.push(formattedTile);\n    }\n  }\n\n  return tile;\n}\n\nfunction getAvailabilityResult(availabilityData: Availability, index: number): boolean {\n  if ('constant' in availabilityData) {\n    return Boolean(availabilityData.constant);\n  }\n\n  if (availabilityData.explicitBitstream) {\n    return getBooleanValueFromBitstream(index, availabilityData.explicitBitstream);\n  }\n\n  return false;\n}\n\n/**\n * Do formatting of implicit tile data.\n * TODO Check out do we able to use Tile3D class as type here.\n * @param tile\n * @param lodMetricValue\n * @param options\n * @returns\n */\nfunction formatTileData(\n  tile,\n  level: number,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number},\n  options: any,\n  s2VolumeBox?: S2VolumeBox\n) {\n  const {\n    basePath,\n    refine,\n    getRefine,\n    lodMetricType,\n    getTileType,\n    rootLodMetricValue,\n    rootBoundingVolume\n  } = options;\n  const uri = tile.contentUrl && tile.contentUrl.replace(`${basePath}/`, '');\n  const lodMetricValue = rootLodMetricValue / 2 ** level;\n\n  const boundingVolume: BoundingVolume = s2VolumeBox?.box\n    ? {box: s2VolumeBox.box}\n    : rootBoundingVolume;\n\n  const boundingVolumeForChildTile = calculateBoundingVolumeForChildTile(\n    level,\n    boundingVolume,\n    childCoordinates\n  );\n\n  return {\n    children: tile.children,\n    contentUrl: tile.contentUrl,\n    content: {uri},\n    id: tile.contentUrl,\n    refine: getRefine(refine),\n    type: getTileType(tile),\n    lodMetricType,\n    lodMetricValue,\n    geometricError: lodMetricValue,\n    transform: tile.transform,\n    boundingVolume: boundingVolumeForChildTile\n  };\n}\n\n/**\n * Calculate child bounding volume.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subdivision-rules\n * @param level\n * @param rootBoundingVolume\n * @param childCoordinates\n */\nfunction calculateBoundingVolumeForChildTile(\n  level: number,\n  rootBoundingVolume: BoundingVolume,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number}\n): BoundingVolume {\n  if (rootBoundingVolume.region) {\n    const {childTileX, childTileY, childTileZ} = childCoordinates;\n    const [west, south, east, north, minimumHeight, maximumHeight] = rootBoundingVolume.region;\n    const boundingVolumesCount = 2 ** level;\n\n    const sizeX = (east - west) / boundingVolumesCount;\n    const sizeY = (north - south) / boundingVolumesCount;\n\n    // TODO : Why is the subdivisionScheme not being checked here?\n\n    // In case of QUADTREE the sizeZ should NOT be changed!\n    // https://portal.ogc.org/files/102132\n    // A quadtree divides space only on the x and y dimensions. It divides each tile into 4 smaller tiles where the x and y dimensions are halved. The quadtree z minimum and maximum remain unchanged.\n\n    const sizeZ = (maximumHeight - minimumHeight) / boundingVolumesCount;\n\n    const [childWest, childEast] = [west + sizeX * childTileX, west + sizeX * (childTileX + 1)];\n    const [childSouth, childNorth] = [south + sizeY * childTileY, south + sizeY * (childTileY + 1)];\n    const [childMinimumHeight, childMaximumHeight] = [\n      minimumHeight + sizeZ * childTileZ,\n      minimumHeight + sizeZ * (childTileZ + 1)\n    ];\n\n    return {\n      region: [childWest, childSouth, childEast, childNorth, childMinimumHeight, childMaximumHeight]\n    };\n  }\n\n  if (rootBoundingVolume.box) {\n    return rootBoundingVolume;\n  }\n\n  throw new Error(`Unsupported bounding volume type ${rootBoundingVolume}`);\n}\n\n/**\n * Do binary concatenation\n * @param first\n * @param second\n */\nfunction concatBits(first: number, second: number): number {\n  return parseInt(first.toString(2) + second.toString(2), 2);\n}\n\n/**\n * Replace implicit tile content url with real coordinates.\n * @param templateUrl\n * @param level\n * @param x\n * @param y\n * @param z\n */\nexport function replaceContentUrlTemplate(\n  templateUrl: string,\n  level: number,\n  x: number,\n  y: number,\n  z: number\n): string {\n  const mapUrl = generateMapUrl({level, x, y, z});\n  return templateUrl.replace(/{level}|{x}|{y}|{z}/gi, (matched) => mapUrl[matched]);\n}\n\n/**\n * Get Map object for content url generation\n * @param items\n */\nfunction generateMapUrl(items: {[key: string]: number}): {[key: string]: string} {\n  const mapUrl = {};\n\n  for (const key in items) {\n    mapUrl[`{${key}}`] = items[key];\n  }\n  return mapUrl;\n}\n\n/**\n * Get boolean value from bistream by index\n * A boolean value is encoded as a single bit, either 0 (false) or 1 (true).\n * Multiple boolean values are packed tightly in the same buffer.\n * These buffers of tightly-packed bits are sometimes referred to as bitstreams.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/implicit-revisions/specification/Metadata#booleans\n * @param availabilitiIndex\n */\nfunction getBooleanValueFromBitstream(\n  availabilityIndex: number,\n  availabilityBuffer: Uint8Array\n): boolean {\n  const byteIndex = Math.floor(availabilityIndex / 8);\n  const bitIndex = availabilityIndex % 8;\n  const bitValue = (availabilityBuffer[byteIndex] >> bitIndex) & 1;\n\n  return bitValue === 1;\n}\n"],"mappings":"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"}