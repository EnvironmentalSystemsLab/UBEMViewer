{"version":3,"file":"s2-to-region.js","names":["getS2BoundaryFlatFromS2Cell","getS2Cell","getS2Region","s2cell","region","face","corners","len","i","key","concat","cell","corns","Float64Array","length","set","get2DRegionFromS2Corners","Error","longitudes","latitudes","push","sort","a","b","west","east","north","south"],"sources":["../../../../../../src/lib/utils/s2/converters/s2-to-region.ts"],"sourcesContent":["import type {S2Cell} from '../s2geometry/s2-geometry';\nimport {getS2BoundaryFlatFromS2Cell} from './s2-to-boundary';\nimport {getS2Cell} from '../s2geometry/s2-cell-utils';\n\n/**\n * Converts S2 cell to the 2D region\n * @param s2cell {S2Cell} S2 cell to convert to 2D region\n * @returns 2D region as an object containing: west, north, east, south in degrees\n */\nexport function getS2Region(s2cell: S2Cell): {\n  west: number;\n  east: number;\n  north: number;\n  south: number;\n} {\n  let region;\n  if (s2cell.face === 2 || s2cell.face === 5) {\n    //    let corners: Float64Array;\n    let corners: any = null;\n    let len = 0;\n    for (let i = 0; i < 4; i++) {\n      const key = `${s2cell.face}/${i}`;\n      const cell = getS2Cell(key);\n      const corns: Float64Array = getS2BoundaryFlatFromS2Cell(cell);\n      if (typeof corners === 'undefined' || corners === null)\n        corners = new Float64Array(4 * corns.length);\n      corners.set(corns, len);\n      len += corns.length;\n    }\n    region = get2DRegionFromS2Corners(corners);\n  } else {\n    const corners: Float64Array = getS2BoundaryFlatFromS2Cell(s2cell);\n    region = get2DRegionFromS2Corners(corners);\n  }\n  return region;\n}\n\n/**\n * Converts the S2 cell defined by its corners to the 2D region\n * @param corners {Float64Array} - a simple polygon in flat array format: [lng0, lat0, lng1, lat1, ...]\n * @returns 2D region as an object containing: west, north, east, south in degrees\n */\nfunction get2DRegionFromS2Corners(corners: Float64Array): {\n  west: number;\n  east: number;\n  north: number;\n  south: number;\n} {\n  if (corners.length % 2 !== 0) {\n    throw new Error('Invalid corners');\n  }\n  const longitudes: number[] = [];\n  const latitudes: number[] = [];\n  for (let i = 0; i < corners.length; i += 2) {\n    longitudes.push(corners[i]);\n    latitudes.push(corners[i + 1]);\n  }\n\n  longitudes.sort((a, b) => a - b);\n  latitudes.sort((a, b) => a - b);\n\n  // Return the region in degrees\n  return {\n    west: longitudes[0],\n    east: longitudes[longitudes.length - 1],\n    north: latitudes[latitudes.length - 1],\n    south: latitudes[0]\n  };\n}\n"],"mappings":"AACA,SAAQA,2BAA2B,QAAO,kBAAkB;AAC5D,SAAQC,SAAS,QAAO,6BAA6B;AAOrD,OAAO,SAASC,WAAWA,CAACC,MAAc,EAKxC;EACA,IAAIC,MAAM;EACV,IAAID,MAAM,CAACE,IAAI,KAAK,CAAC,IAAIF,MAAM,CAACE,IAAI,KAAK,CAAC,EAAE;IAE1C,IAAIC,OAAY,GAAG,IAAI;IACvB,IAAIC,GAAG,GAAG,CAAC;IACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMC,GAAG,MAAAC,MAAA,CAAMP,MAAM,CAACE,IAAI,OAAAK,MAAA,CAAIF,CAAC,CAAE;MACjC,MAAMG,IAAI,GAAGV,SAAS,CAACQ,GAAG,CAAC;MAC3B,MAAMG,KAAmB,GAAGZ,2BAA2B,CAACW,IAAI,CAAC;MAC7D,IAAI,OAAOL,OAAO,KAAK,WAAW,IAAIA,OAAO,KAAK,IAAI,EACpDA,OAAO,GAAG,IAAIO,YAAY,CAAC,CAAC,GAAGD,KAAK,CAACE,MAAM,CAAC;MAC9CR,OAAO,CAACS,GAAG,CAACH,KAAK,EAAEL,GAAG,CAAC;MACvBA,GAAG,IAAIK,KAAK,CAACE,MAAM;IACrB;IACAV,MAAM,GAAGY,wBAAwB,CAACV,OAAO,CAAC;EAC5C,CAAC,MAAM;IACL,MAAMA,OAAqB,GAAGN,2BAA2B,CAACG,MAAM,CAAC;IACjEC,MAAM,GAAGY,wBAAwB,CAACV,OAAO,CAAC;EAC5C;EACA,OAAOF,MAAM;AACf;AAOA,SAASY,wBAAwBA,CAACV,OAAqB,EAKrD;EACA,IAAIA,OAAO,CAACQ,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC5B,MAAM,IAAIG,KAAK,CAAC,iBAAiB,CAAC;EACpC;EACA,MAAMC,UAAoB,GAAG,EAAE;EAC/B,MAAMC,SAAmB,GAAG,EAAE;EAC9B,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACQ,MAAM,EAAEN,CAAC,IAAI,CAAC,EAAE;IAC1CU,UAAU,CAACE,IAAI,CAACd,OAAO,CAACE,CAAC,CAAC,CAAC;IAC3BW,SAAS,CAACC,IAAI,CAACd,OAAO,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC;EAChC;EAEAU,UAAU,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAChCJ,SAAS,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAG/B,OAAO;IACLC,IAAI,EAAEN,UAAU,CAAC,CAAC,CAAC;IACnBO,IAAI,EAAEP,UAAU,CAACA,UAAU,CAACJ,MAAM,GAAG,CAAC,CAAC;IACvCY,KAAK,EAAEP,SAAS,CAACA,SAAS,CAACL,MAAM,GAAG,CAAC,CAAC;IACtCa,KAAK,EAAER,SAAS,CAAC,CAAC;EACpB,CAAC;AACH"}