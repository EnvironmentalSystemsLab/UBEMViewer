{"version":3,"file":"s2-geometry-functions.js","names":["getS2BoundaryFlatFromS2Cell","getS2LngLatFromS2Cell","getS2Cell","getS2LngLat","s2Token","s2cell","getS2BoundaryFlat","tokenOrKey"],"sources":["../../../../../src/lib/utils/s2/s2-geometry-functions.ts"],"sourcesContent":["// math.gl, MIT license\n\nimport {getS2BoundaryFlatFromS2Cell} from './converters/s2-to-boundary';\nimport {getS2LngLatFromS2Cell} from './s2geometry/s2-geometry';\nimport {getS2Cell} from './s2geometry/s2-cell-utils';\n\n// GEOMETRY\n\n/**\n * Retrieve S2 geometry center\n * @param s2Token {string} A string that is the cell's hex token\n * @returns {[number, number]} Longitude and Latitude coordinates of the S2 cell's center\n */\nexport function getS2LngLat(s2Token: string): [number, number] {\n  const s2cell = getS2Cell(s2Token);\n  return getS2LngLatFromS2Cell(s2cell);\n}\n\n/**\n * Get a polygon with corner coordinates for an s2 cell\n * @param tokenOrKey {string} A string that is the cell's hex token or the Hilbert quad key (containing /)\n * @return {Float64Array} - a simple polygon in flat array format: [lng0, lat0, lng1, lat1, ...]\n *   - the polygon is closed, i.e. last coordinate is a copy of the first coordinate\n */\nexport function getS2BoundaryFlat(tokenOrKey: string): Float64Array {\n  const s2cell = getS2Cell(tokenOrKey);\n  return getS2BoundaryFlatFromS2Cell(s2cell);\n}\n"],"mappings":"AAEA,SAAQA,2BAA2B,QAAO,6BAA6B;AACvE,SAAQC,qBAAqB,QAAO,0BAA0B;AAC9D,SAAQC,SAAS,QAAO,4BAA4B;AASpD,OAAO,SAASC,WAAWA,CAACC,OAAe,EAAoB;EAC7D,MAAMC,MAAM,GAAGH,SAAS,CAACE,OAAO,CAAC;EACjC,OAAOH,qBAAqB,CAACI,MAAM,CAAC;AACtC;AAQA,OAAO,SAASC,iBAAiBA,CAACC,UAAkB,EAAgB;EAClE,MAAMF,MAAM,GAAGH,SAAS,CAACK,UAAU,CAAC;EACpC,OAAOP,2BAA2B,CAACK,MAAM,CAAC;AAC5C"}