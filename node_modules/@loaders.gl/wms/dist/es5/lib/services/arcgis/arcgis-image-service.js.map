{"version":3,"file":"arcgis-image-service.js","names":["_imageSource","require","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","ArcGISImageServer","_ImageSource","_inherits2","_super","props","_classCallCheck2","_createClass2","value","_getMetadata","_asyncToGenerator2","_regenerator","mark","_callee","wrap","_callee$","_context","prev","next","metadata","abrupt","sent","stop","getMetadata","_getImage","_callee2","parameters","_callee2$","_context2","Error","getImage","_x","_metadata","_callee3","_callee3$","_context3","exportImage","options","metadataURL","concat","url","exportImageURL","bbox","size","width","height","arcgisOptions","getUrl","path","extra","first","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray2","Array","isArray","toUpperCase","join","String","_checkResponse","_callee4","response","_callee4$","_context4","ok","checkResponse","_x2","ImageSource","exports","toLowerCase","includes"],"sources":["../../../../../src/lib/services/arcgis/arcgis-image-service.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {ImageType} from '@loaders.gl/images';\nimport type {ImageSourceMetadata, GetImageParameters} from '../../sources/image-source';\nimport type {ImageSourceProps} from '../../sources/image-source';\nimport {ImageSource} from '../../sources/image-source';\n\nexport type ArcGISImageServerProps = ImageSourceProps & {\n  url: string;\n};\n\n/**\n * ArcGIS ImageServer\n * Note - exports a big API, that could be exposed here if there is a use case\n * @see https://developers.arcgis.com/rest/services-reference/enterprise/image-service.htm\n */\nexport class ArcGISImageServer extends ImageSource<ArcGISImageServerProps> {\n  static type: 'arcgis-image-server' = 'arcgis-image-server';\n  static testURL = (url: string): boolean => url.toLowerCase().includes('ImageServer');\n\n  constructor(props: ArcGISImageServerProps) {\n    super(props);\n  }\n\n  // ImageSource (normalized endpoints)\n\n  async getMetadata(): Promise<ImageSourceMetadata> {\n    return (await this.metadata()) as ImageSourceMetadata;\n    // TODO - normalize metadata\n  }\n\n  async getImage(parameters: GetImageParameters): Promise<ImageType> {\n    throw new Error('not implemented');\n    // TODO - Map generic parameters to ArcGIS specific parameters\n    // return await this.exportImage(parameters);\n  }\n\n  // ImageServer endpoints\n\n  async metadata(): Promise<unknown> {\n    // We just need a JSON parsing...\n    // return this.getUrl({path: '', ...options});\n    throw new Error('not implemented');\n  }\n\n  /** \n   * Form a URL to an ESRI ImageServer\n   // https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer/exportImage?bbox=${bounds[0]},${bounds[1]},${bounds[2]},${bounds[3]}&bboxSR=4326&size=${width},${height}&imageSR=102100&time=&format=jpgpng&pixelType=U8&noData=&noDataInterpretation=esriNoDataMatchAny&interpolation=+RSP_NearestNeighbor&compression=&compressionQuality=&bandIds=&mosaicRule=&renderingRule=&f=image`,\n   */\n  exportImage(options: {\n    boundingBox: [number, number, number, number];\n    boundingBoxSR?: string;\n    width: number;\n    height: number;\n    imageSR?: string;\n    time?: never;\n    format?: 'jpgpng';\n    pixelType?: 'U8';\n    noData?: never;\n    noDataInterpretation?: 'esriNoDataMatchAny';\n    interpolation?: '+RSP_NearestNeighbor';\n    compression?: never;\n    compressionQuality?: never;\n    bandIds?: never;\n    mosaicRule?: never;\n    renderingRule?: never;\n    f?: 'image';\n  }): Promise<ImageType> {\n    // See WMSService.getMap()\n    throw new Error('not implemented');\n  }\n\n  // URL creators\n\n  metadataURL(options: {parameters?: Record<string, unknown>}): string {\n    return `${this.props.url}?f=pjson`;\n  }\n\n  /** \n   * Form a URL to an ESRI ImageServer\n   // https://sampleserver6.arcgisonline.com/arcgis/rest/services/NLCDLandCover2001/ImageServer/exportImage?\n   //   bbox=${bounds[0]},${bounds[1]},${bounds[2]},${bounds[3]}&bboxSR=4326&\n   //   size=${width},${height}&imageSR=102100&time=&format=jpgpng&pixelType=U8&\n   //   noData=&noDataInterpretation=esriNoDataMatchAny&interpolation=+RSP_NearestNeighbor&compression=&\n   //   compressionQuality=&bandIds=&mosaicRule=&renderingRule=&\n   //   f=image\n   */\n  exportImageURL(options: {\n    bbox: [number, number, number, number];\n    boxSR?: string;\n    width: number;\n    height: number;\n    imageSR?: string;\n    time?: never;\n    format?: 'jpgpng';\n    pixelType?: 'U8';\n    noData?: never;\n    noDataInterpretation?: 'esriNoDataMatchAny';\n    interpolation?: '+RSP_NearestNeighbor';\n    compression?: never;\n    compressionQuality?: never;\n    bandIds?: never;\n    mosaicRule?: never;\n    renderingRule?: never;\n    f?: 'image';\n  }): string {\n    const bbox = `bbox=${options.bbox[0]},${options.bbox[1]},${options.bbox[2]},${options.bbox[3]}`;\n    const size = `size=${options.width},${options.height}`;\n    const arcgisOptions = {...options, bbox, size};\n    // @ts-expect-error\n    delete arcgisOptions.width;\n    // @ts-expect-error\n    delete arcgisOptions.height;\n    return this.getUrl('exportImage', arcgisOptions);\n  }\n\n  // INTERNAL METHODS\n\n  /**\n   * @note protected, since perhaps getWMSUrl may need to be overridden to handle certain backends?\n   * @note if override is common, maybe add a callback prop?\n   * */\n  protected getUrl(\n    path: string,\n    options: Record<string, unknown>,\n    extra?: Record<string, unknown>\n  ): string {\n    let url = `${this.props.url}/${path}`;\n    let first = true;\n    for (const [key, value] of Object.entries(options)) {\n      url += first ? '?' : '&';\n      first = false;\n      if (Array.isArray(value)) {\n        url += `${key.toUpperCase()}=${value.join(',')}`;\n      } else {\n        url += `${key.toUpperCase()}=${value ? String(value) : ''}`;\n      }\n    }\n    return url;\n  }\n\n  /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */\n  protected async checkResponse(response: Response) {\n    if (!response.ok) {\n      // } || response.headers['content-type'] === WMSErrorLoader.mimeTypes[0]) {\n      // const arrayBuffer = await response.arrayBuffer();\n      // const error = await WMSErrorLoader.parse(arrayBuffer, this.loadOptions);\n      throw new Error('error');\n    }\n  }\n}\n"],"mappings":"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"}