{"version":3,"file":"arcgis-server.js","names":["getArcGISServices","_x","_getArcGISServices","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","url","fetchFile","serverUrl","_args","wrap","_callee$","_context","prev","next","length","undefined","fetch","includes","replace","abrupt","loadServiceDirectory","stop","_x2","_x3","_x4","_loadServiceDirectory","_callee2","path","serviceUrl","response","directory","services","folders","promises","_iterator2","_step2","folderServices","_callee2$","_context2","concat","join","sent","json","extractServices","map","folder","_toConsumableArray2","t0","_createForOfIteratorHelper","Promise","all","t1","s","n","done","value","push","err","e","f","arcgisServices","_iterator","_step","service","name","type","toLocaleLowerCase"],"sources":["../../../../../src/lib/services/arcgis/arcgis-server.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nexport type Service = {name: string; type: string; url: string};\n\ntype FetchLike = typeof fetch;\n\n/**\n * (Recursively) load the service directory from an ArcGIS Server URL\n * @param url\n * @param fetchFile= Optional fetch function override\n * @returns\n */\nexport async function getArcGISServices(\n  url: string,\n  fetchFile: FetchLike = fetch\n): Promise<Service[] | null> {\n  if (url.includes('rest/services')) {\n    const serverUrl = url.replace(/rest\\/services.*$/i, 'rest/services');\n    return loadServiceDirectory(serverUrl, fetchFile, []);\n  }\n  return null;\n}\n\nasync function loadServiceDirectory(\n  serverUrl: string,\n  fetch: FetchLike,\n  path: string[]\n): Promise<Service[]> {\n  const serviceUrl = `${serverUrl}/${path.join('/')}`;\n\n  const response = await fetch(`${serviceUrl}?f=pjson`);\n  const directory = await response.json();\n\n  const services = extractServices(directory, serviceUrl);\n\n  const folders = (directory.folders || []) as string[];\n  const promises = folders.map((folder) =>\n    loadServiceDirectory(`${serverUrl}`, fetch, [...path, folder])\n  );\n\n  for (const folderServices of await Promise.all(promises)) {\n    services.push(...folderServices);\n  }\n\n  return services;\n}\n\nfunction extractServices(directory: unknown, url: string): Service[] {\n  const arcgisServices = ((directory as any).services || []) as {name: string; type: string}[];\n  const services: Service[] = [];\n  for (const service of arcgisServices) {\n    services.push({\n      name: service.name,\n      type: `arcgis-${service.type.toLocaleLowerCase().replace('server', '-server')}`,\n      url: `${url}${service.name}/${service.type}`\n    });\n  }\n  return services;\n}\n"],"mappings":"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"}