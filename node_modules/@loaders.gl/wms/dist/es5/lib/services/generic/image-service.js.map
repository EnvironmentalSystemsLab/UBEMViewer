{"version":3,"file":"image-service.js","names":["_images","require","_imageSource","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","ImageService","_ImageSource","_inherits2","_super","props","_classCallCheck2","_createClass2","value","_getMetadata","_asyncToGenerator2","_regenerator","mark","_callee","wrap","_callee$","_context","prev","next","Error","stop","getMetadata","_getImage","_callee2","parameters","granularParameters","url","response","arrayBuffer","_callee2$","_context2","getGranularParameters","getURLFromTemplate","fetch","sent","ImageLoader","parse","abrupt","getImage","_x","_parameters$bbox","_slicedToArray2","bbox","east","north","west","south","_i","_Object$entries","entries","_Object$entries$_i","replace","concat","String","ImageSource","exports","toLowerCase","includes"],"sources":["../../../../../src/lib/services/generic/image-service.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {ImageType} from '@loaders.gl/images';\nimport {ImageLoader} from '@loaders.gl/images';\n\nimport type {ImageSourceMetadata, GetImageParameters} from '../../sources/image-source';\nimport {ImageSource} from '../../sources/image-source';\n\n/** Template URL string should contain `${width}` etc which will be substituted. */\nexport type ImageServiceProps = {\n  /** Base URL to the service */\n  url: string;\n  /** Any load options to the loaders.gl Loaders used by the WMSService methods */\n  loadOptions?: LoaderOptions;\n};\n\n/**\n * Quickly connect to \"ad hoc\" image sources without subclassing ImageSource.\n * ImageSource allows template url strings to be used to ad hoc connect to arbitrary image data sources\n * Accepts a template url string and builds requests URLs\n */\nexport class ImageService<PropsT extends ImageServiceProps> extends ImageSource<PropsT> {\n  static type: 'template' = 'template';\n  static testURL = (url: string): boolean => url.toLowerCase().includes('{');\n\n  constructor(props: PropsT) {\n    super(props);\n  }\n\n  // IMAGE SOURCE API\n\n  async getMetadata(): Promise<ImageSourceMetadata> {\n    throw new Error('ImageSource.getMetadata not implemented');\n  }\n\n  async getImage(parameters: GetImageParameters): Promise<ImageType> {\n    const granularParameters = this.getGranularParameters(parameters);\n    const url = this.getURLFromTemplate(granularParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    return await ImageLoader.parse(arrayBuffer);\n  }\n\n  // HELPERS\n\n  /** Break up bounding box in east, north, south, west */\n  protected getGranularParameters(parameters: GetImageParameters): Record<string, unknown> {\n    const [east, north, west, south] = parameters.bbox;\n    return {...parameters, east, north, south, west};\n  }\n\n  /** Supports both ${} and {} notations */\n  protected getURLFromTemplate(parameters: Record<string, unknown>): string {\n    let url = this.props.url;\n    for (const [key, value] of Object.entries(parameters)) {\n      // TODO - parameter could be repeated\n      // const regex = new RegExp(`\\${${key}}`, 'g');\n      url = url.replace(`\\${${key}}`, String(value));\n      url = url.replace(`{${key}}`, String(value));\n    }\n    return url;\n  }\n}\n"],"mappings":"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"}