{"version":3,"file":"csw-service.js","names":["_dataSource","require","_cswCapabilitiesLoader","_cswRecordsLoader","_cswDomainLoader","_wmsErrorLoader","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","Reflect","construct","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","CSWService","_DataSource","_inherits2","_super","props","_this","_classCallCheck2","_assertThisInitialized2","CSWErrorLoader","CSWCapabilitiesLoader","_createClass2","_getMetadata","_asyncToGenerator2","_regenerator","mark","_callee","capabilities","wrap","_callee$","_context","prev","getCapabilities","sent","abrupt","normalizeMetadata","stop","getMetadata","_getServiceDirectory","_callee2","options","services","unknownServices","records","_iterator","_step","record","_iterator2","_step2","reference","url","_callee2$","_context2","getRecords","references","t0","scheme","title","type","_parseOGCUrl","t1","finish","t2","includeUnknown","concat","getServiceDirectory","_x","parts","split","params","_getCapabilities","_callee3","wmsParameters","vendorParameters","response","arrayBuffer","_callee3$","_context3","getCapabilitiesURL","fetch","_checkResponse","parse","loadOptions","_x2","_x3","_getRecords","_callee4","_callee4$","_context4","getRecordsURL","CSWRecordsLoader","_x4","_x5","_getDomain","_callee5","_callee5$","_context5","getDomainURL","CSWDomainLoader","getDomain","_x6","_x7","version","service","request","_getCSWUrl","typenames","first","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray2","toUpperCase","join","String","encodeURI","contentType","headers","ok","mimeTypes","includes","error","parseSync","Error","_parseError","DataSource","exports","toLowerCase"],"sources":["../../../../../src/lib/services/ogc/csw-service.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n/* eslint-disable camelcase */\n\nimport type {DataSourceProps} from '../../sources/data-source';\nimport {DataSource} from '../../sources/data-source';\n\nimport type {CSWCapabilities} from '../../../csw-capabilities-loader';\nimport {CSWCapabilitiesLoader} from '../../../csw-capabilities-loader';\n\nimport type {CSWRecords} from '../../../csw-records-loader';\nimport {CSWRecordsLoader} from '../../../csw-records-loader';\n\nimport type {CSWDomain} from '../../../csw-domain-loader';\nimport {CSWDomainLoader} from '../../../csw-domain-loader';\n\nimport {WMSErrorLoader as CSWErrorLoader} from '../../../wms-error-loader';\n\ntype CSWCommonParameters = {\n  /** In case the endpoint supports multiple services */\n  service?: 'CSW';\n  /** In case the endpoint supports multiple CSW versions */\n  version?: '1.1.1' | '2.0.0' | '2.0.1' | '3.0.0';\n};\n\nexport type CSWGetCapabilitiesParameters = CSWCommonParameters & {\n  /** Request type */\n  request?: 'GetCapabilities';\n};\n\nexport type CSWGetRecordsParameters = CSWCommonParameters & {\n  /** Request type */\n  request?: 'GetRecords';\n  /** type of records */\n  typenames: 'csw:Record';\n};\n\nexport type CSWGetDomainParameters = CSWCommonParameters & {\n  /** Request type */\n  request?: 'GetDomain';\n  // TBA\n};\n\n/** Describes a service or resource exposed by the catalog */\nexport type Service = {\n  /** name of service or resource */\n  name: string;\n  /** type of service or resource */\n  type: string;\n  url: string;\n  params?: string;\n  scheme?: string;\n};\n\nexport type CSWServiceProps = DataSourceProps & {\n  url: string;\n};\n\n/**\n * The CSWService class\n * - provides type safe methods to form URLs to a CSW service\n * - provides type safe methods to query and parse results (and errors) from a CSW service\n * @note Only the URL parameter conversion is supported. XML posts are not supported.\n */\nexport class CSWService extends DataSource<CSWServiceProps> {\n  static type: 'csw' = 'csw';\n  static testURL = (url: string): boolean => url.toLowerCase().includes('csw');\n\n  capabilities: CSWCapabilities | null = null;\n\n  /** A list of loaders used by the CSWService methods */\n  readonly loaders = [CSWErrorLoader, CSWCapabilitiesLoader];\n\n  /** Create a CSWService */\n  constructor(props: CSWServiceProps) {\n    super(props);\n  }\n\n  async getMetadata(): Promise<CSWCapabilities> {\n    const capabilities = await this.getCapabilities();\n    return this.normalizeMetadata(capabilities);\n  }\n\n  normalizeMetadata(capabilities: CSWCapabilities): CSWCapabilities {\n    return capabilities;\n  }\n\n  async getServiceDirectory(options?: {includeUnknown?: boolean}): Promise<Service[]> {\n    const services: Service[] = [];\n    const unknownServices: Service[] = [];\n\n    const records = await this.getRecords();\n    for (const record of records.records) {\n      for (const reference of record.references) {\n        const url = reference.value;\n        switch (reference.scheme) {\n          case 'OGC:WMS':\n            services.push({name: record.title, type: 'ogc-wms-service', ...this._parseOGCUrl(url)});\n            break;\n          case 'OGC:WMTS':\n            services.push({\n              name: record.title,\n              type: 'ogc-wmts-service',\n              ...this._parseOGCUrl(url)\n            });\n            break;\n          case 'OGC:WFS':\n            services.push({name: record.title, type: 'ogc-wfs-service', ...this._parseOGCUrl(url)});\n            break;\n          default:\n            unknownServices.push({\n              name: record.title,\n              type: 'unknown',\n              url: reference.value,\n              scheme: reference.scheme\n            });\n        }\n      }\n    }\n\n    return options?.includeUnknown ? services.concat(unknownServices) : services;\n  }\n\n  _parseOGCUrl(url: string): {url: string; params: string} {\n    const parts = url.split('?');\n    return {\n      url: parts[0],\n      params: parts[1] || ''\n    };\n  }\n\n  // CSW Service API Stubs\n\n  /** Get Capabilities */\n  async getCapabilities(\n    wmsParameters?: CSWGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<CSWCapabilities> {\n    const url = this.getCapabilitiesURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    const capabilities = await CSWCapabilitiesLoader.parse(arrayBuffer, this.props.loadOptions);\n    return capabilities;\n  }\n\n  /** Get Records */\n  async getRecords(\n    wmsParameters?: CSWGetRecordsParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<CSWRecords> {\n    const url = this.getRecordsURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await CSWRecordsLoader.parse(arrayBuffer, this.props.loadOptions);\n  }\n\n  /** Get Domain */\n  async getDomain(\n    wmsParameters?: CSWGetDomainParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<CSWDomain> {\n    const url = this.getDomainURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await CSWDomainLoader.parse(arrayBuffer, this.props.loadOptions);\n  }\n\n  // Typed URL creators\n  // For applications that want full control of fetching and parsing\n\n  /** Generate a URL for the GetCapabilities request */\n  getCapabilitiesURL(\n    wmsParameters?: CSWGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<CSWGetCapabilitiesParameters> = {\n      version: '3.0.0',\n      ...wmsParameters,\n      ...vendorParameters,\n      service: 'CSW',\n      request: 'GetCapabilities'\n    };\n    return this._getCSWUrl(options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetCapabilities request */\n  getRecordsURL(\n    wmsParameters?: CSWGetRecordsParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<CSWGetRecordsParameters> = {\n      version: '3.0.0',\n      typenames: 'csw:Record',\n      ...wmsParameters,\n      ...vendorParameters,\n      service: 'CSW',\n      request: 'GetRecords'\n    };\n    return this._getCSWUrl(options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetCapabilities request */\n  getDomainURL(\n    wmsParameters?: CSWGetDomainParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<CSWGetDomainParameters> = {\n      version: '3.0.0',\n      ...wmsParameters,\n      ...vendorParameters,\n      service: 'CSW',\n      request: 'GetDomain'\n    };\n    return this._getCSWUrl(options, vendorParameters);\n  }\n\n  // INTERNAL METHODS\n\n  /**\n   * @note case _getCSWUrl may need to be overridden to handle certain backends?\n   * */\n  protected _getCSWUrl(\n    options: Record<string, unknown>,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    let url = this.props.url;\n    let first = true;\n    for (const [key, value] of Object.entries(options)) {\n      url += first ? '?' : '&';\n      first = false;\n      if (Array.isArray(value)) {\n        url += `${key.toUpperCase()}=${value.join(',')}`;\n      } else {\n        url += `${key.toUpperCase()}=${value ? String(value) : ''}`;\n      }\n    }\n    return encodeURI(url);\n  }\n\n  /** Checks for and parses a CSW XML formatted ServiceError and throws an exception */\n  protected _checkResponse(response: Response, arrayBuffer: ArrayBuffer): void {\n    const contentType = response.headers['content-type'];\n    if (!response.ok || CSWErrorLoader.mimeTypes.includes(contentType)) {\n      const error = CSWErrorLoader.parseSync(arrayBuffer, this.props.loadOptions);\n      throw new Error(error);\n    }\n  }\n\n  /** Error situation detected */\n  protected _parseError(arrayBuffer: ArrayBuffer): Error {\n    const error = CSWErrorLoader.parseSync(arrayBuffer, this.props.loadOptions);\n    return new Error(error);\n  }\n}\n"],"mappings":"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"}