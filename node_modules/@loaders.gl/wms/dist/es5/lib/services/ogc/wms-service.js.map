{"version":3,"file":"wms-service.js","names":["_images","require","_loaderUtils","_imageSource","_wmsCapabilitiesLoader","_wmsFeatureInfoLoader","_wmsLayerDescriptionLoader","_wmsErrorLoader","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","Reflect","construct","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","WMSService","_ImageSource","_inherits2","_super","props","_props$substituteCRS","_this","_classCallCheck2","_assertThisInitialized2","ImageLoader","WMSErrorLoader","WMSCapabilitiesLoader","WMSFeatureInfoLoader","WMSLayerDescriptionLoader","url","substituteCRS84","flipCRS","wmsParameters","layers","undefined","query_layers","styles","version","crs","format","info_format","transparent","time","elevation","vendorParameters","_createClass2","_getMetadata","_asyncToGenerator2","_regenerator","mark","_callee","capabilities","wrap","_callee$","_context","prev","getCapabilities","sent","abrupt","normalizeMetadata","stop","getMetadata","_getImage","_callee2","parameters","_callee2$","_context2","getMap","getImage","_x","_getCapabilities","_callee3","response","arrayBuffer","_callee3$","_context3","getCapabilitiesURL","fetch","_checkResponse","parse","loadOptions","_x2","_x3","_getMap","_callee4","_callee4$","_context4","getMapURL","t0","_parseError","_x4","_x5","_getFeatureInfo","_callee5","_callee5$","_context5","getFeatureInfoURL","getFeatureInfo","_x6","_x7","_getFeatureInfoText","_callee6","_callee6$","_context6","TextDecoder","decode","getFeatureInfoText","_x8","_x9","_describeLayer","_callee7","_callee7$","_context7","describeLayerURL","describeLayer","_x10","_x11","_getLegendGraphic","_callee8","_callee8$","_context8","getLegendGraphicURL","getLegendGraphic","_x12","_x13","options","_getWMSUrl","_getWMS130Parameters","_parseWMSUrl","_url$split","split","_url$split2","_slicedToArray2","baseUrl","search","searchParams","_iterator","_step","parameter","_parameter$split","_parameter$split2","request","first","allParameters","service","IGNORE_EMPTY_KEYS","_i","_Object$entries","entries","_Object$entries$_i","includes","_getURLParameter","encodeURI","newParameters","srs","bbox","_flipBoundingBox","toUpperCase","concat","join","String","bboxValue","flipCoordinates","_fetchArrayBuffer2","_callee9","_callee9$","_context9","_fetchArrayBuffer","_x14","contentType","headers","ok","mimeTypes","mergeLoaderOptions","wms","throwOnError","error","parseSync","Error","ImageSource","exports","toLowerCase"],"sources":["../../../../../src/lib/services/ogc/wms-service.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n/* eslint-disable camelcase */\nimport type {ImageType} from '@loaders.gl/images';\nimport {ImageLoader} from '@loaders.gl/images';\nimport {mergeLoaderOptions} from '@loaders.gl/loader-utils';\n\nimport type {ImageSourceMetadata, GetImageParameters} from '../../sources/image-source';\nimport type {ImageSourceProps} from '../../sources/image-source';\nimport {ImageSource} from '../../sources/image-source';\n\nimport type {WMSCapabilities} from '../../../wms-capabilities-loader';\nimport type {WMSFeatureInfo} from '../../../wip/wms-feature-info-loader';\nimport type {WMSLayerDescription} from '../../../wip/wms-layer-description-loader';\n\nimport {WMSCapabilitiesLoader} from '../../../wms-capabilities-loader';\nimport {WMSFeatureInfoLoader} from '../../../wip/wms-feature-info-loader';\nimport {WMSLayerDescriptionLoader} from '../../../wip/wms-layer-description-loader';\n\nimport type {WMSLoaderOptions} from '../../../wms-error-loader';\nimport {WMSErrorLoader} from '../../../wms-error-loader';\n\n/**\n * \"Static\" WMS parameters (not viewport or selected pixel dependent)\n * These can be provided as defaults in the WMSService constructor\n */\nexport type WMSParameters = {\n  /** WMS version (all requests) */\n  version?: '1.3.0' | '1.1.1';\n  /** Layers to render (GetMap, GetFeatureInfo) */\n  layers?: string[];\n  /** list of layers to query.. (GetFeatureInfo) */\n  query_layers?: string[];\n\n  /** Coordinate Reference System (CRS) for the image (not the bounding box) */\n  crs?: string;\n  /** Requested format for the return image (GetMap, GetLegendGraphic) */\n  format?: 'image/png';\n  /** Requested MIME type of returned feature info (GetFeatureInfo) */\n  info_format?: 'text/plain' | 'application/geojson' | 'application/vnd.ogc.gml';\n  /** Styling - Not yet supported */\n  styles?: unknown;\n  /** Any additional parameters specific to this WMSService (GetMap) */\n  transparent?: boolean;\n  /** If layer supports time dimension */\n  time?: string;\n  /** If layer supports elevation dimension */\n  elevation?: string;\n};\n\n/** Parameters for GetCapabilities */\nexport type WMSGetCapabilitiesParameters = {\n  /** In case the endpoint supports multiple WMS versions */\n  version?: '1.3.0' | '1.1.1';\n};\n\n/** Parameters for GetMap */\nexport type WMSGetMapParameters = {\n  /** In case the endpoint supports multiple WMS versions */\n  version?: '1.3.0' | '1.1.1';\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** requested format for the return image. can be provided in service constructor */\n  format?: 'image/png';\n  /** Layers to render - can be provided in service constructor */\n  layers?: string | string[];\n  /** Coordinate Reference System for the image (not bounding box). can be provided in service constructor. */\n  crs?: string;\n  /** Styling. can be provided in service constructor */\n  styles?: unknown;\n  /** Don't render background when no data. can be provided in service constructor */\n  transparent?: boolean;\n  /** If layer supports time dimension */\n  time?: string;\n  /** If layer supports elevation dimension */\n  elevation?: string;\n};\n\n/** GetMap parameters that are specific to the current view */\nexport type WMSGetMapViewParameters = {\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** Coordinate Reference System for the image (not bounding box). can be provided in service constructor. */\n  crs?: string;\n};\n\n/**\n * Parameters for GetFeatureInfo\n * @see https://imagery.pasda.psu.edu/arcgis/services/pasda/UrbanTreeCanopy_Landcover/MapServer/WmsServer?SERVICE=WMS&\n */\nexport type WMSGetFeatureInfoParameters = {\n  /** In case the endpoint supports multiple WMS versions */\n  version?: '1.3.0' | '1.1.1';\n  /** x coordinate for the feature info request */\n  x: number;\n  /** y coordinate for the feature info request */\n  y: number;\n  /** MIME type of returned feature info. Can be specified in service constructor */\n  info_format?: 'text/plain' | 'application/geojson' | 'application/vnd.ogc.gml';\n  /** list of layers to query. Required but can be specified in service constructor. */\n  query_layers?: string[];\n  /** Layers to render. Required, but can be specified in service constructor */\n  layers?: string[];\n  /** Styling */\n  styles?: unknown;\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** srs for the image (not the bounding box) */\n  crs?: string;\n};\n\n/** GetMap parameters that are specific to the current view */\nexport type WMSGetFeatureInfoViewParameters = {\n  /** x coordinate for the feature info request */\n  x: number;\n  /** y coordinate for the feature info request */\n  y: number;\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** srs for the image (not the bounding box) */\n  crs?: string;\n};\n\n/** Parameters for DescribeLayer */\nexport type WMSDescribeLayerParameters = {\n  /** In case the endpoint supports multiple WMS versions */\n  version?: '1.3.0' | '1.1.1';\n};\n\n/** Parameters for GetLegendGraphic */\nexport type WMSGetLegendGraphicParameters = {\n  /** In case the endpoint supports multiple WMS versions */\n  version?: '1.3.0' | '1.1.1';\n};\n\n//\n\n/** Properties for creating a enw WMS service */\nexport type WMSServiceProps = ImageSourceProps & {\n  /** Base URL to the service */\n  url: string;\n  /** In 1.3.0, replaces references to EPSG:4326 with CRS:84 */\n  substituteCRS84?: boolean;\n\n  /** Default WMS parameters. If not provided here, must be provided in the various request */\n  wmsParameters?: WMSParameters;\n  /** Any additional service specific parameters */\n  vendorParameters?: Record<string, unknown>;\n};\n\n/**\n * The WMSService class provides\n * - provides type safe methods to form URLs to a WMS service\n * - provides type safe methods to query and parse results (and errors) from a WMS service\n * - implements the ImageService interface\n * @note Only the URL parameter conversion is supported. XML posts are not supported.\n */\nexport class WMSService extends ImageSource<WMSServiceProps> {\n  static type: 'wms' = 'wms';\n  static testURL = (url: string): boolean => url.toLowerCase().includes('wms');\n\n  /** Base URL to the service */\n  readonly url: string;\n\n  /** In WMS 1.3.0, replaces references to EPSG:4326 with CRS:84. But not always supported. Default: false */\n  substituteCRS84: boolean;\n  /** In WMS 1.3.0, flips x,y (lng, lat) coordinates for the supplied coordinate systems. Default: ['ESPG:4326'] */\n  flipCRS: string[];\n\n  /** Default static WMS parameters */\n  wmsParameters: Required<WMSParameters>;\n  /** Default static vendor parameters */\n  vendorParameters?: Record<string, unknown>;\n\n  capabilities: WMSCapabilities | null = null;\n\n  /** A list of loaders used by the WMSService methods */\n  readonly loaders = [\n    ImageLoader,\n    WMSErrorLoader,\n    WMSCapabilitiesLoader,\n    WMSFeatureInfoLoader,\n    WMSLayerDescriptionLoader\n  ];\n\n  /** Create a WMSService */\n  constructor(props: WMSServiceProps) {\n    super(props);\n\n    // TODO - defaults such as version, layers etc could be extracted from a base URL with parameters\n    // This would make pasting in any WMS URL more likely to make this class just work.\n    // const {baseUrl, parameters} = this._parseWMSUrl(props.url);\n\n    this.url = props.url;\n\n    this.substituteCRS84 = props.substituteCRS84 ?? false;\n    this.flipCRS = ['EPSG:4326'];\n\n    this.wmsParameters = {\n      layers: undefined!,\n      query_layers: undefined!,\n      styles: undefined,\n      version: '1.3.0',\n      crs: 'EPSG:4326',\n      format: 'image/png',\n      info_format: 'text/plain',\n      transparent: undefined!,\n      time: undefined!,\n      elevation: undefined!,\n      ...props.wmsParameters\n    };\n\n    this.vendorParameters = props.vendorParameters || {};\n  }\n\n  // ImageSource implementation\n  async getMetadata(): Promise<ImageSourceMetadata> {\n    const capabilities = await this.getCapabilities();\n    return this.normalizeMetadata(capabilities);\n  }\n\n  async getImage(parameters: GetImageParameters): Promise<ImageType> {\n    return await this.getMap(parameters);\n  }\n\n  normalizeMetadata(capabilities: WMSCapabilities): ImageSourceMetadata {\n    return capabilities;\n  }\n\n  // WMS Service API Stubs\n\n  /** Get Capabilities */\n  async getCapabilities(\n    wmsParameters?: WMSGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSCapabilities> {\n    const url = this.getCapabilitiesURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    const capabilities = await WMSCapabilitiesLoader.parse(arrayBuffer, this.loadOptions);\n    this.capabilities = capabilities;\n    return capabilities;\n  }\n\n  /** Get a map image */\n  async getMap(\n    wmsParameters: WMSGetMapParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<ImageType> {\n    const url = this.getMapURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    try {\n      return await ImageLoader.parse(arrayBuffer, this.loadOptions);\n    } catch {\n      throw this._parseError(arrayBuffer);\n    }\n  }\n\n  /** Get Feature Info for a coordinate */\n  async getFeatureInfo(\n    wmsParameters: WMSGetFeatureInfoParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSFeatureInfo> {\n    const url = this.getFeatureInfoURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await WMSFeatureInfoLoader.parse(arrayBuffer, this.loadOptions);\n  }\n\n  /** Get Feature Info for a coordinate */\n  async getFeatureInfoText(\n    wmsParameters: WMSGetFeatureInfoParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<string> {\n    const url = this.getFeatureInfoURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n\n  /** Get more information about a layer */\n  async describeLayer(\n    wmsParameters: WMSDescribeLayerParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<WMSLayerDescription> {\n    const url = this.describeLayerURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return await WMSLayerDescriptionLoader.parse(arrayBuffer, this.loadOptions);\n  }\n\n  /** Get an image with a semantic legend */\n  async getLegendGraphic(\n    wmsParameters: WMSGetLegendGraphicParameters,\n    vendorParameters?: Record<string, unknown>\n  ): Promise<ImageType> {\n    const url = this.getLegendGraphicURL(wmsParameters, vendorParameters);\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    try {\n      return await ImageLoader.parse(arrayBuffer, this.loadOptions);\n    } catch {\n      throw this._parseError(arrayBuffer);\n    }\n  }\n\n  // Typed URL creators\n  // For applications that want full control of fetching and parsing\n\n  /** Generate a URL for the GetCapabilities request */\n  getCapabilitiesURL(\n    wmsParameters?: WMSGetCapabilitiesParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSGetCapabilitiesParameters> = {\n      version: this.wmsParameters.version,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetCapabilities', options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetMap request */\n  getMapURL(\n    wmsParameters: WMSGetMapParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    wmsParameters = this._getWMS130Parameters(wmsParameters);\n    const options: Required<WMSGetMapParameters> = {\n      version: this.wmsParameters.version,\n      format: this.wmsParameters.format,\n      transparent: this.wmsParameters.transparent,\n      time: this.wmsParameters.time,\n      elevation: this.wmsParameters.elevation,\n      layers: this.wmsParameters.layers,\n      styles: this.wmsParameters.styles,\n      crs: this.wmsParameters.crs,\n      // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],\n      // width: 1200,\n      // height: 900,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetMap', options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetFeatureInfo request */\n  getFeatureInfoURL(\n    wmsParameters: WMSGetFeatureInfoParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSGetFeatureInfoParameters> = {\n      version: this.wmsParameters.version,\n      // query_layers: [],\n      // format: this.wmsParameters.format,\n      info_format: this.wmsParameters.info_format,\n      layers: this.wmsParameters.layers,\n      query_layers: this.wmsParameters.query_layers,\n      styles: this.wmsParameters.styles,\n      crs: this.wmsParameters.crs,\n      // bbox: [-77.87304, 40.78975, -77.85828, 40.80228],\n      // width: 1200,\n      // height: 900,\n      // x: undefined!,\n      // y: undefined!,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetFeatureInfo', options, vendorParameters);\n  }\n\n  /** Generate a URL for the GetFeatureInfo request */\n  describeLayerURL(\n    wmsParameters: WMSDescribeLayerParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSDescribeLayerParameters> = {\n      version: this.wmsParameters.version,\n      ...wmsParameters\n    };\n    return this._getWMSUrl('DescribeLayer', options, vendorParameters);\n  }\n\n  getLegendGraphicURL(\n    wmsParameters: WMSGetLegendGraphicParameters,\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    const options: Required<WMSGetLegendGraphicParameters> = {\n      version: this.wmsParameters.version,\n      // format?\n      ...wmsParameters\n    };\n    return this._getWMSUrl('GetLegendGraphic', options, vendorParameters);\n  }\n\n  // INTERNAL METHODS\n\n  _parseWMSUrl(url: string): {url: string; parameters: Record<string, unknown>} {\n    const [baseUrl, search] = url.split('?');\n    const searchParams = search.split('&');\n\n    const parameters: Record<string, unknown> = {};\n    for (const parameter of searchParams) {\n      const [key, value] = parameter.split('=');\n      parameters[key] = value;\n    }\n\n    return {url: baseUrl, parameters};\n  }\n\n  /**\n   * Generate a URL with parameters\n   * @note case _getWMSUrl may need to be overridden to handle certain backends?\n   * @note at the moment, only URLs with parameters are supported (no XML payloads)\n   * */\n  protected _getWMSUrl(\n    request: string,\n    wmsParameters: {version?: '1.3.0' | '1.1.1'; [key: string]: unknown},\n    vendorParameters?: Record<string, unknown>\n  ): string {\n    let url = this.url;\n    let first = true;\n\n    // Add any vendor searchParams\n    const allParameters = {\n      service: 'WMS',\n      version: wmsParameters.version,\n      request,\n      ...wmsParameters,\n      ...this.vendorParameters,\n      ...vendorParameters\n    };\n\n    // Encode the keys\n    const IGNORE_EMPTY_KEYS = ['transparent', 'time', 'elevation'];\n    for (const [key, value] of Object.entries(allParameters)) {\n      // hack to preserve test cases. Not super clear if keys should be included when values are undefined\n      if (!IGNORE_EMPTY_KEYS.includes(key) || value) {\n        url += first ? '?' : '&';\n        first = false;\n        url += this._getURLParameter(key, value, wmsParameters);\n      }\n    }\n\n    return encodeURI(url);\n  }\n\n  _getWMS130Parameters<ParametersT extends {crs?: string; srs?: string}>(\n    wmsParameters: ParametersT\n  ): ParametersT {\n    const newParameters = {...wmsParameters};\n    if (newParameters.srs) {\n      newParameters.crs = newParameters.crs || newParameters.srs;\n      delete newParameters.srs;\n    }\n    return newParameters;\n  }\n\n  // eslint-disable-complexity\n  _getURLParameter(key: string, value: unknown, wmsParameters: WMSParameters): string {\n    // Substitute by key\n    switch (key) {\n      case 'crs':\n        // CRS was called SRS before WMS 1.3.0\n        if (wmsParameters.version !== '1.3.0') {\n          key = 'srs';\n        } else if (this.substituteCRS84 && value === 'EPSG:4326') {\n          /** In 1.3.0, replaces references to 'EPSG:4326' with the new backwards compatible CRS:84 */\n          // Substitute by value\n          value = 'CRS:84';\n        }\n        break;\n\n      case 'srs':\n        // CRS was called SRS before WMS 1.3.0\n        if (wmsParameters.version === '1.3.0') {\n          key = 'crs';\n        }\n        break;\n\n      case 'bbox':\n        // Coordinate order is flipped for certain CRS in WMS 1.3.0\n        const bbox = this._flipBoundingBox(value, wmsParameters);\n        if (bbox) {\n          value = bbox;\n        }\n        break;\n\n      default:\n      // do nothing\n    }\n\n    key = key.toUpperCase();\n\n    return Array.isArray(value)\n      ? `${key}=${value.join(',')}`\n      : `${key}=${value ? String(value) : ''}`;\n  }\n\n  /** Coordinate order is flipped for certain CRS in WMS 1.3.0 */\n  _flipBoundingBox(\n    bboxValue: unknown,\n    wmsParameters: WMSParameters\n  ): [number, number, number, number] | null {\n    // Sanity checks\n    if (!Array.isArray(bboxValue) || bboxValue.length !== 4) {\n      return null;\n    }\n\n    const flipCoordinates =\n      // Only affects WMS 1.3.0\n      wmsParameters.version === '1.3.0' &&\n      // Flip if we are dealing with a CRS that was flipped in 1.3.0\n      this.flipCRS.includes(wmsParameters.crs || '') &&\n      // Don't flip if we are subsituting EPSG:4326 with CRS:84\n      !(this.substituteCRS84 && wmsParameters.crs === 'EPSG:4326');\n\n    const bbox = bboxValue as [number, number, number, number];\n    return flipCoordinates ? [bbox[1], bbox[0], bbox[3], bbox[2]] : bbox;\n  }\n\n  /** Fetches an array buffer and checks the response (boilerplate reduction) */\n  protected async _fetchArrayBuffer(url: string): Promise<ArrayBuffer> {\n    const response = await this.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    this._checkResponse(response, arrayBuffer);\n    return arrayBuffer;\n  }\n\n  /** Checks for and parses a WMS XML formatted ServiceError and throws an exception */\n  protected _checkResponse(response: Response, arrayBuffer: ArrayBuffer): void {\n    const contentType = response.headers['content-type'];\n    if (!response.ok || WMSErrorLoader.mimeTypes.includes(contentType)) {\n      // We want error responses to throw exceptions, the WMSErrorLoader can do this\n      const loadOptions = mergeLoaderOptions<WMSLoaderOptions>(this.loadOptions, {\n        wms: {throwOnError: true}\n      });\n      const error = WMSErrorLoader.parseSync(arrayBuffer, loadOptions);\n      throw new Error(error);\n    }\n  }\n\n  /** Error situation detected */\n  protected _parseError(arrayBuffer: ArrayBuffer): Error {\n    const error = WMSErrorLoader.parseSync(arrayBuffer, this.loadOptions);\n    return new Error(error);\n  }\n}\n"],"mappings":"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"}