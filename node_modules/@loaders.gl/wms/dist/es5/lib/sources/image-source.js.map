{"version":3,"file":"image-source.js","names":["_dataSource","require","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","ImageSource","_DataSource","_inherits2","_super","_classCallCheck2","_createClass2","DataSource","exports"],"sources":["../../../../src/lib/sources/image-source.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {ImageType} from '@loaders.gl/images';\nimport type {DataSourceProps} from './data-source';\nimport {DataSource} from './data-source';\n\n/**\n * Normalized capabilities of an Image service\n * @example\n *  The WMSService will normalize the response to the WMS `GetCapabilities`\n *  data structure extracted from WMS XML response into an ImageSourceMetadata.\n */\nexport type ImageSourceMetadata = {\n  name: string;\n  title?: string;\n  abstract?: string;\n  keywords: string[];\n  layers: ImageSourceLayer[];\n};\n\n/** Description of one data layer in the image source */\nexport type ImageSourceLayer = {\n  /** Name of this layer */\n  name?: string;\n  /** Human readable title of this layer */\n  title?: string;\n  /** Coordinate systems supported by this layer */\n  crs?: string[];\n  /** layer limits in unspecified CRS:84-like lng/lat, for quick access w/o CRS calculations. */\n  geographicBoundingBox?: [min: [x: number, y: number], max: [x: number, y: number]];\n  /** Sub layers of this layer */\n  layers?: ImageSourceLayer[];\n\n  /** @deprecated from v3.4: non-vis.gl style bounding box. Use `.geographicBoundingBox` instead */\n  boundingBox?: [number, number, number, number];\n};\n\n/** Generic parameters for requesting an image from an image source */\nexport type GetImageParameters = {\n  /** Layers to render */\n  layers: string | string[];\n  /** Styling */\n  styles?: unknown;\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** crs for the image (not the bounding box) */\n  crs?: string;\n  /** requested format for the return image */\n  format?: 'image/png';\n};\n\n// Attempt to break down GetImageParameters\nexport type ImageFilters = {\n  /** Layers to render */\n  layers: string | string[];\n  /** Styling */\n  styles?: unknown;\n};\n\nexport type ImageRegion = {\n  /** bounding box of the requested map image */\n  bbox: [number, number, number, number];\n};\n\nexport type ImageFormat = {\n  /** pixel width of returned image */\n  width: number;\n  /** pixels */\n  height: number;\n  /** crs for the image (not the bounding box) */\n  crs?: string;\n  /** requested format for the return image */\n  format?: 'image/png';\n};\n\nexport type ImageSourceProps = DataSourceProps;\n\n/**\n * MapImageSource - data sources that allow data to be queried by (geospatial) extents\n * @note\n * - If geospatial, bounding box is expected to be in web mercator coordinates\n */\nexport abstract class ImageSource<\n  PropsT extends ImageSourceProps = ImageSourceProps\n> extends DataSource<PropsT> {\n  abstract getMetadata(): Promise<ImageSourceMetadata>;\n  abstract getImage(parameters: GetImageParameters): Promise<ImageType>;\n}\n"],"mappings":";;;;;;;;;;;;AAIA,IAAAA,WAAA,GAAAC,OAAA;AAAyC,SAAAC,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,OAAAC,gBAAA,CAAAC,OAAA,EAAAN,OAAA,GAAAO,MAAA,MAAAN,yBAAA,QAAAO,SAAA,OAAAH,gBAAA,CAAAC,OAAA,QAAAG,WAAA,EAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAP,KAAA,EAAAQ,SAAA,EAAAJ,SAAA,YAAAD,MAAA,GAAAH,KAAA,CAAAS,KAAA,OAAAD,SAAA,gBAAAE,2BAAA,CAAAR,OAAA,QAAAC,MAAA;AAAA,SAAAL,0BAAA,eAAAQ,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAI,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAC,SAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAV,OAAA,CAAAC,SAAA,CAAAM,OAAA,8CAAAI,CAAA;AAAA,IAkFnBC,WAAW,aAAAC,WAAA;EAAA,IAAAC,UAAA,CAAAlB,OAAA,EAAAgB,WAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAA1B,YAAA,CAAAuB,WAAA;EAAA,SAAAA,YAAA;IAAA,IAAAI,gBAAA,CAAApB,OAAA,QAAAgB,WAAA;IAAA,OAAAG,MAAA,CAAAZ,KAAA,OAAAD,SAAA;EAAA;EAAA,WAAAe,aAAA,CAAArB,OAAA,EAAAgB,WAAA;AAAA,EAEvBM,sBAAU;AAAAC,OAAA,CAAAP,WAAA,GAAAA,WAAA"}