{"version":3,"file":"tile-source.js","names":["_dataSource","require","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","TileSource","_DataSource","_inherits2","_super","_classCallCheck2","_createClass2","DataSource","exports"],"sources":["../../../../src/lib/sources/tile-source.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {ImageType} from '@loaders.gl/images';\nimport {DataSource, DataSourceProps} from './data-source';\n\n/**\n * Normalized capabilities of an Image service\n * @example\n *  The WMSService will normalize the response to the WMS `GetCapabilities` data structure extracted from WMS XML response\n *  into an TileSourceMetadata.\n */\nexport type TileSourceMetadata = {\n  name: string;\n  title?: string;\n  abstract?: string;\n  keywords: string[];\n  layer: {\n    name: string;\n    title?: string;\n    srs?: string[];\n    boundingBox?: [number, number, number, number];\n    layers: TileSourceLayer[];\n  };\n};\n\nexport type TileSourceLayer = {\n  name: string;\n  title?: string;\n  srs?: string[];\n  boundingBox?: [number, number, number, number];\n  layers: TileSourceLayer[];\n};\n\nexport type GetTileParameters = {\n  /** Layers to render */\n  layers: string | string[];\n  /** Styling */\n  styles?: unknown;\n  /** bounding box of the requested map image */\n  zoom: number;\n  /** tile x coordinate */\n  x: number;\n  /** tile y coordinate */\n  y: number;\n  /** srs for the image (not the bounding box) */\n  srs?: string;\n  /** requested format for the return image */\n  format?: 'image/png';\n};\n\ntype TileSourceProps = DataSourceProps;\n\n/**\n * MapTileSource - data sources that allow data to be queried by (geospatial) extents\n * @note\n * - If geospatial, bounding box is expected to be in web mercator coordinates\n */\nexport abstract class TileSource<PropsT extends TileSourceProps> extends DataSource<PropsT> {\n  abstract getMetadata(): Promise<TileSourceMetadata>;\n  abstract getTile(parameters: GetTileParameters): Promise<ImageType>;\n}\n"],"mappings":";;;;;;;;;;;;AAGA,IAAAA,WAAA,GAAAC,OAAA;AAA0D,SAAAC,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,OAAAC,gBAAA,CAAAC,OAAA,EAAAN,OAAA,GAAAO,MAAA,MAAAN,yBAAA,QAAAO,SAAA,OAAAH,gBAAA,CAAAC,OAAA,QAAAG,WAAA,EAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAP,KAAA,EAAAQ,SAAA,EAAAJ,SAAA,YAAAD,MAAA,GAAAH,KAAA,CAAAS,KAAA,OAAAD,SAAA,gBAAAE,2BAAA,CAAAR,OAAA,QAAAC,MAAA;AAAA,SAAAL,0BAAA,eAAAQ,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAI,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAC,SAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAV,OAAA,CAAAC,SAAA,CAAAM,OAAA,8CAAAI,CAAA;AAAA,IAsDpCC,UAAU,aAAAC,WAAA;EAAA,IAAAC,UAAA,CAAAlB,OAAA,EAAAgB,UAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAA1B,YAAA,CAAAuB,UAAA;EAAA,SAAAA,WAAA;IAAA,IAAAI,gBAAA,CAAApB,OAAA,QAAAgB,UAAA;IAAA,OAAAG,MAAA,CAAAZ,KAAA,OAAAD,SAAA;EAAA;EAAA,WAAAe,aAAA,CAAArB,OAAA,EAAAgB,UAAA;AAAA,EAAyCM,sBAAU;AAAAC,OAAA,CAAAP,UAAA,GAAAA,UAAA"}