{"version":3,"file":"parse-wms-capabilities.js","names":["_xml","require","_parseXmlHelpers","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","parseWMSCapabilities","xmlText","options","parsedXML","XMLLoader","parseTextSync","xmlCapabilities","WMT_MS_Capabilities","WMS_Capabilities","capabilities","extractCapabilities","inheritedLayerProps","_iterator","layers","_step","layer","addInheritedLayerProps","includeRawData","raw","includeXMLText","xml","_xml$Service","_xml$Service2","_xml$Service3","_xml$Service4","_xml$Service5","_xml$Service6","_xml$Service6$Keyword","_xml$Service7","_xml$Service8","_xml$Service9","_xml$Service10","_xml$Service11","_xml$Service12","_xml$Service13","_xml$Capability","_xml$Capability2","version","String","Service","Name","title","Title","undefined","abstract","Abstract","keywords","getXMLStringArray","KeywordList","Keyword","fees","Fees","JSON","stringify","accessConstraints","AccessConstraints","layerLimit","getXMLInteger","LayerLimit","maxWidth","maxHeight","requests","extractRequests","Capability","Request","exceptions","extractExceptions","Exception","xmlLayers","getXMLArray","Layer","_iterator2","_step2","xmlSubLayer","push","extractLayer","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray2","default","key","xmlRequests","_iterator3","_step3","_step3$value","xmlRequest","mimeTypes","Format","xmlException","xmlExceptionFormats","xmlLayer","_xmlLayer$KeywordList","crs","CRS","SRS","every","_","geographicBoundingBox","EX_GeographicBoundingBox","extractEXBoundingBox","LatLonBoundingBox","extractLatLonBoundingBox","boundingBoxes","BoundingBox","extractWMSBoundingBoxes","xmlDimensions","Dimension","dimensions","map","extractDimension","opaque","getXMLBoolean","cascaded","queryable","_iterator4","_step4","_i2","_Object$entries2","_Object$entries2$_i","xmlBoundingBox","w","westBoundLongitude","northBoundLatitude","eastBoundLongitude","southBoundLatitude","minx","miny","maxx","maxy","xmlBoundingBoxes","xmlBoxes","xmlBox","extractWMSBoundingBox","resx","resy","boundingBox","getXMLFloat","xResolution","yResolution","xmlDimension","units","extent","dimension","unitSymbol","defaultValue","multipleValues","nearestValue","current","parent","_toConsumableArray2","_iterator5","_step5","subLayer"],"sources":["../../../../../src/lib/parsers/wms/parse-wms-capabilities.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {XMLLoader} from '@loaders.gl/xml';\nimport {\n  getXMLArray,\n  getXMLStringArray,\n  getXMLInteger,\n  getXMLFloat,\n  getXMLBoolean\n} from '../xml/parse-xml-helpers';\n\n/** All capabilities of a WMS service - response to a WMS `GetCapabilities` data structure extracted from XML */\nexport type WMSCapabilities = {\n  /** Version of the WMS service */\n  version?: string; // '1.3.0' | '1.1.1' | '1.1.0' | '1.0.0'\n  /** A short name for the service */\n  name: string;\n  /** A human readable name for the service */\n  title?: string;\n  /** A more extensive description of the service */\n  abstract?: string;\n  /** A set of keywords e.g. for searching services */\n  keywords: string[];\n  /** A field of unspecified format, if present describes any access constraints required to use the service. */\n  accessConstraints?: string;\n  /** A field of unspecified format, if present describes any fees associated with the use of the service */\n  fees?: string;\n  /** If present, the max number of layers that can be rendered by the service */\n  layerLimit?: number;\n  /** If present, the widest image that can be rendered by the service */\n  maxWidth?: number;\n  /** If present, the tallest image that can be rendered by the service */\n  maxHeight?: number;\n  /** Hierarchical list of layers. */\n  layers: WMSLayer[];\n  /** A map with information about supported WMS requests. If a record is present, the request is supported by the service */\n  requests: Record<string, WMSRequest>;\n  /** Information about any exceptions that the service will report (HTTP status != 2xx) */\n  exceptions?: WMSExceptions;\n  /** Only if `options.raw`: raw untyped JSON parsed from XML. Can include information not extracted in the typed response. */\n  raw?: Record<string, unknown>;\n  /** Only if `options.xml`, the unparsed XML string can be requested */\n  xml?: string;\n};\n\n/**\n * Metadata about a layer\n * Layers inherit many properties from their parent layers, see description of individual props for details.\n * @see https://www.ogc.org/standard/wms/ 7.2.4.6\n */\nexport type WMSLayer = {\n  /** The title is a human readable name. It is mandatory on each layer. Not inherited.  */\n  title: string;\n  /** A layer is renderable if it has a name. A named parent layer will render all its sublayers. Not inherited. */\n  name?: string;\n  /** A narrative description of the map layer. */\n  abstract?: string;\n  /** A set of keywords e.g. for searching layers */\n  keywords: string[];\n  /** layer limits in unspecified CRS:84-like lng/lat, for quick access w/o CRS calculations.  Defined or inherited. */\n  geographicBoundingBox?: [min: [x: number, y: number], max: [x: number, y: number]];\n  /** Supported CRS. Either defined or inherited. */\n  crs?: string[];\n  /** Bounding boxes in specific CRS:es */\n  boundingBoxes?: WMSBoundingBox[];\n\n  // minScale: number;\n  // maxScale: number;\n  // dimensions: ?? 7.2.4.6.10\n  // MetadataURL\n  // Attribution\n  // Identifier and AuthorityURL\n  // FeatureListURL\n  // DataURL\n\n  /** any extra dimension such as time */\n  dimensions?: WMSDimension[];\n\n  /** Whether queries can be performed on the layer */\n  queryable?: boolean;\n  /** `false` if layer has significant no-data areas that the client can display as transparent. */\n  opaque?: boolean;\n  /** WMS cascading allows server to expose layers coming from other WMS servers as if they were local layers */\n  cascaded?: boolean;\n  // noSubsets: boolean\n  // fixedWith: number\n  // fixedHeight: number\n\n  /** A list of styles. @note not yet supported by WMSCapabilitiesLoader */\n  styles?: unknown[];\n\n  /** Sublayers - these inherit crs and boundingBox) if not overridden) */\n  layers?: WMSLayer[];\n};\n\n/**\n * A bounding box specifies the coordinate range for data in the layer.\n * No data is available outside the bounding box.\n */\nexport type WMSBoundingBox = {\n  /** CRS indicates the Layer CRS that applies to this bounding box. */\n  crs: string;\n  /** `[[w, s], [e, n]]`, indicates the limits of the bounding box using the axis units and order of the specified CRS. */\n  boundingBox: [min: [x: number, y: number], max: [x: number, y: number]];\n  /** Spatial horizontal resolution of data in same units as bounding box */\n  xResolution?: number;\n  /** Spatial vertical resolution of data in same units as bounding box */\n  yResolution?: number;\n};\n\n/**\n * An optional dimension that can be queried using the `name=...` parameter\n * Note that layers that have at least one dimension without `default` value\n * become unrenderable unless the dimension value is supplied to GetMap requests.\n */\nexport type WMSDimension = {\n  /** name of dimension, becomes a valid parameter key for this layer */\n  name: string;\n  /** Textual units for this dimensional axis */\n  units: string;\n  /** Unit symbol for this dimensional axis */\n  unitSymbol?: string;\n  /** Default value if no value is supplied. If dimension lacks defaultValue, requests fail if no value is supplied */\n  defaultValue?: string;\n  /** Can multiple values of the dimension be requested? */\n  multipleValues?: boolean;\n  /* Will nearest values will be substituted when out of range, if false exact values are required */\n  nearestValue?: boolean;\n  /** A special value \"current\" is supported, typically for time dimension */\n  current?: boolean;\n  /** Text content indicating available values for dimension */\n  extent: string;\n};\n\n/** Metadata about a supported WMS request  */\nexport type WMSRequest = {\n  /** MIMEtypes that can be returned by this request. */\n  mimeTypes: string[];\n};\n\nexport type WMSExceptions = {\n  /** MIME types for exception response payloads. */\n  mimeTypes: string[];\n};\n\nexport type ParseWMSCapabilitiesOptions = {\n  /** Add inherited layer information to sub layers */\n  inheritedLayerProps?: boolean;\n  /** Include the \"raw\" JSON (parsed but untyped, unprocessed XML). May contain additional fields */\n  includeRawData?: boolean;\n  /** Include the original XML document text. May contain additional information. */\n  includeXMLText?: boolean;\n  /** @deprecated Use includeRawData` */\n  raw?: boolean;\n  // xml options are passed through to xml loader\n};\n\n/**\n * Parses a typed data structure from raw XML for `GetCapabilities` response\n * @note Error handlings is fairly weak\n */\nexport function parseWMSCapabilities(\n  xmlText: string,\n  options?: ParseWMSCapabilitiesOptions\n): WMSCapabilities {\n  const parsedXML = XMLLoader.parseTextSync(xmlText, options);\n  const xmlCapabilities: any =\n    parsedXML.WMT_MS_Capabilities || parsedXML.WMS_Capabilities || parsedXML;\n  const capabilities = extractCapabilities(xmlCapabilities);\n  // In case the processed, normalized capabilities do not contain everything,\n  // the user can get the parsed XML structure.\n  if (options?.inheritedLayerProps) {\n    // Traverse layers and inject missing props from parents\n    for (const layer of capabilities.layers) {\n      addInheritedLayerProps(layer, null);\n    }\n    // Not yet implemented\n  }\n\n  if (options?.includeRawData || options?.raw) {\n    capabilities.raw = xmlCapabilities;\n  }\n\n  if (options?.includeXMLText) {\n    capabilities.xml = xmlText;\n  }\n\n  return capabilities;\n}\n\n/** Extract typed capability data from XML */\nfunction extractCapabilities(xml: any): WMSCapabilities {\n  const capabilities: WMSCapabilities = {\n    version: String(xml.version || ''),\n    name: String(xml.Service?.Name || 'unnamed'),\n    title: xml.Service?.Title ? String(xml.Service?.Title) : undefined,\n    abstract: xml.Service?.Abstract ? String(xml.Service?.Abstract) : undefined,\n    keywords: getXMLStringArray(xml.Service?.KeywordList?.Keyword),\n    fees: xml.Service?.Fees ? JSON.stringify(xml.Service?.Fees) : undefined,\n    accessConstraints: xml.Service?.AccessConstraints\n      ? JSON.stringify(xml.Service?.AccessConstraints)\n      : undefined,\n    layerLimit: getXMLInteger(xml.Service?.LayerLimit),\n    maxWidth: getXMLInteger(xml.Service?.maxWidth),\n    maxHeight: getXMLInteger(xml.Service?.maxHeight),\n    layers: [],\n    requests: extractRequests(xml.Capability?.Request),\n    exceptions: extractExceptions(xml.Exception)\n    // contact field is a mess of largely irrelevant information, put it last\n    // contact: xml.Service?.Contact ? JSON.stringify(xml.Service?.Contact) : undefined,\n  };\n\n  // LAYERS\n  const xmlLayers = getXMLArray(xml.Capability?.Layer);\n  for (const xmlSubLayer of xmlLayers) {\n    capabilities.layers.push(extractLayer(xmlSubLayer));\n  }\n\n  // Clean up object\n  for (const [key, value] of Object.entries(capabilities)) {\n    if (value === undefined) {\n      delete capabilities[key];\n    }\n  }\n\n  return capabilities;\n}\n\n/** Extract typed request metadata from XML requests field */\nfunction extractRequests(xmlRequests: any): Record<string, WMSRequest> {\n  const requests: Record<string, WMSRequest> = {};\n  for (const [name, xmlRequest] of Object.entries(xmlRequests || {}) as any) {\n    const mimeTypes = getXMLStringArray(xmlRequest?.Format);\n    requests[name] = {mimeTypes};\n  }\n  return requests;\n}\n\nfunction extractExceptions(xmlException: any): WMSExceptions | undefined {\n  const xmlExceptionFormats = getXMLArray(xmlException?.Format);\n  if (xmlExceptionFormats.length > 0) {\n    return {\n      mimeTypes: getXMLStringArray(xmlException)\n    };\n  }\n  return undefined;\n}\n\n/** Extract request data */\n// eslint-disable-next-line complexity, max-statements\nfunction extractLayer(xmlLayer: any): WMSLayer {\n  const layer: WMSLayer = {\n    // All layers must have a title\n    title: String(xmlLayer?.Title || ''),\n    // Name is required only if renderable\n    name: xmlLayer?.Name && String(xmlLayer?.Name),\n    abstract: xmlLayer?.Name && String(xmlLayer?.Abstract),\n    keywords: getXMLStringArray(xmlLayer.KeywordList?.Keyword)\n  };\n\n  // WMS 1.3.0 changes SRS to CRS\n  const crs = xmlLayer?.CRS || xmlLayer?.SRS;\n  if (crs && Array.isArray(crs) && crs.every((_) => typeof _ === 'string')) {\n    layer.crs = crs;\n  }\n\n  // v1.3.0 extract simple geographic bounding box\n  let geographicBoundingBox =\n    xmlLayer?.EX_GeographicBoundingBox && extractEXBoundingBox(xmlLayer?.EX_GeographicBoundingBox);\n  if (geographicBoundingBox) {\n    layer.geographicBoundingBox = geographicBoundingBox;\n  }\n\n  // v1.1.1 extract simple geographic bounding box\n  geographicBoundingBox =\n    xmlLayer?.LatLonBoundingBox && extractLatLonBoundingBox(xmlLayer?.LatLonBoundingBox);\n  if (geographicBoundingBox) {\n    layer.geographicBoundingBox = geographicBoundingBox;\n  }\n\n  // Extract per-CRS bounding boxes\n  const boundingBoxes = xmlLayer?.BoundingBox && extractWMSBoundingBoxes(xmlLayer?.BoundingBox);\n  if (boundingBoxes && boundingBoxes.length > 0) {\n    layer.boundingBoxes = boundingBoxes;\n  }\n\n  // Extract dimensions\n  const xmlDimensions = getXMLArray(xmlLayer?.Dimension);\n  const dimensions = xmlDimensions.map((xml) => extractDimension(xml));\n  if (dimensions.length) {\n    layer.dimensions = dimensions;\n  }\n\n  if (xmlLayer?.opaque) {\n    layer.opaque = getXMLBoolean(xmlLayer?.opaque);\n  }\n  if (xmlLayer?.cascaded) {\n    layer.cascaded = getXMLBoolean(xmlLayer?.cascaded);\n  }\n  if (xmlLayer?.queryable) {\n    layer.queryable = getXMLBoolean(xmlLayer?.queryable);\n  }\n\n  // Single layer is not represented as array in XML\n  const xmlLayers = getXMLArray(xmlLayer?.Layer);\n  const layers: WMSLayer[] = [];\n\n  for (const xmlSubLayer of xmlLayers) {\n    layers.push(extractLayer(xmlSubLayer));\n  }\n\n  if (layers.length > 0) {\n    layer.layers = layers;\n  }\n\n  // Clean up object\n  for (const [key, value] of Object.entries(layer)) {\n    if (value === undefined) {\n      delete layer[key];\n    }\n  }\n\n  return layer;\n}\n\n/** WMS 1.3.0 Loosely defined geospatial bounding box in unspecified CRS for quick content searches */\nfunction extractEXBoundingBox(xmlBoundingBox: any): [[number, number], [number, number]] {\n  const {\n    westBoundLongitude: w,\n    northBoundLatitude: n,\n    eastBoundLongitude: e,\n    southBoundLatitude: s\n  } = xmlBoundingBox;\n  return [\n    [w, s],\n    [e, n]\n  ];\n}\n\n/** WMS 1.1.1 Loosely defined geospatial bounding box in unspecified CRS for quick content searches */\nfunction extractLatLonBoundingBox(xmlBoundingBox: any): [[number, number], [number, number]] {\n  const {minx, miny, maxx, maxy} = xmlBoundingBox;\n  return [\n    [minx, miny],\n    [maxx, maxy]\n  ];\n}\n\n/** Loosely defined geospatial bounding box in unspecified CRS for quick content searches */\nfunction extractWMSBoundingBoxes(xmlBoundingBoxes: any): WMSBoundingBox[] {\n  const xmlBoxes = getXMLArray(xmlBoundingBoxes);\n  return xmlBoxes.map((xmlBox) => extractWMSBoundingBox(xmlBox));\n}\n\n/** Loosely defined geospatial bounding box in unspecified CRS for quick content searches */\nfunction extractWMSBoundingBox(xmlBoundingBox: any): WMSBoundingBox {\n  const {CRS, SRS, minx, miny, maxx, maxy, resx, resy} = xmlBoundingBox;\n  const boundingBox: WMSBoundingBox = {\n    // CRS in 1.3.0, SRS in 1.1.1\n    crs: CRS || SRS,\n    boundingBox: [\n      [getXMLFloat(minx) as number, getXMLFloat(miny) as number],\n      [getXMLFloat(maxx) as number, getXMLFloat(maxy) as number]\n    ]\n  };\n  if (resx) {\n    boundingBox.xResolution = resx;\n  }\n  if (resy) {\n    boundingBox.yResolution = resy;\n  }\n  return boundingBox;\n}\n\n/**\n * Extracts optional WMS Dimension layer field\n * @param xmlDimension\n * @example <Dimension name=\"time\" units=\"ISO8601\" default=\"2018-01-01\" nearestValue=\"0\">2001-01-01/2018-01-01/P1Y</Dimension>\n * @see https://mapserver.org/ogc/wms_dimension.html\n */\nfunction extractDimension(xmlDimension: any): WMSDimension {\n  const {name, units, value: extent} = xmlDimension;\n\n  const dimension: WMSDimension = {name, units, extent};\n\n  if (xmlDimension.unitSymbol) {\n    dimension.unitSymbol = xmlDimension.unitSymbol;\n  }\n  if (xmlDimension.default) {\n    dimension.defaultValue = xmlDimension.default;\n  }\n  if (xmlDimension.multipleValues) {\n    dimension.multipleValues = getXMLBoolean(xmlDimension.multipleValues);\n  }\n  if (xmlDimension.nearestValue) {\n    dimension.nearestValue = getXMLBoolean(xmlDimension.nearestValue);\n  }\n  if (xmlDimension.current) {\n    dimension.current = getXMLBoolean(xmlDimension.current);\n  }\n\n  return dimension;\n}\n\n/** Traverse layers and inject missing props from parents */\n// eslint-disable-next-line complexity\nfunction addInheritedLayerProps(layer: WMSLayer, parent: WMSLayer | null): void {\n  if (parent?.geographicBoundingBox && !layer.geographicBoundingBox) {\n    layer.geographicBoundingBox = [...parent.geographicBoundingBox];\n  }\n\n  if (parent?.crs && !layer.crs) {\n    layer.crs = [...parent.crs];\n  }\n\n  if (parent?.boundingBoxes && !layer.boundingBoxes) {\n    layer.boundingBoxes = [...parent.boundingBoxes];\n  }\n\n  if (parent?.dimensions && !layer.dimensions) {\n    layer.dimensions = [...parent.dimensions];\n  }\n\n  for (const subLayer of layer.layers || []) {\n    addInheritedLayerProps(subLayer, layer);\n  }\n}\n"],"mappings":"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"}