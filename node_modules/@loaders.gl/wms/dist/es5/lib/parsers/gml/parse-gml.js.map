{"version":3,"file":"parse-gml.js","names":["_xml","require","_deepStrictEqual","_rewind","_interopRequireDefault","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","noTransform","_len","coords","_key","parseGML","text","options","parsedXML","XMLLoader","parseTextSync","transformCoords","stride","context","createChildContext","parseGMLToGeometry","inputXML","childContext","geometry","_getFirstKeyValue","getFirstKeyValue","_getFirstKeyValue2","_slicedToArray2","xml","type","coordinates","parseLinearRingOrLineString","parsePolygonOrRectangle","parseSurface","parseMultiSurface","rewind","mutate","parseCoords","srsDimension","replace","trim","split","Error","concat","points","_options$transformCoo","_options$transformCoo2","point","map","parseFloat","_toConsumableArray2","parsePosList","textOf","parsePos","parsePoint","pos","findIn","posList","_i","_Object$entries","entries","_Object$entries$_i","childName","childXML","parseCurveSegments","_i2","_Object$entries2","_Object$entries2$_i","points2","end","start","deepStrictEqual","shift","parseRing","_i3","_Object$entries3","_Object$entries3$_i","lineString","segments","parseExteriorOrInterior","linearRing","ring","exterior","pointLists","_i4","_Object$entries4","_Object$entries4$_i","patches","polygons","_i5","_Object$entries5","_Object$entries5$_i","parseCompositeSurface","_i6","_Object$entries6","_Object$entries6$_i","_getFirstKeyValue3","_getFirstKeyValue4","c2Name","c2Xml","el","surfaceMembers","_i7","_Object$entries7","_Object$entries7$_i","polygons2","polygons3","parseSurfaceMember","polygonXML","_iterator","_step","surfaceMemberXML","_getFirstKeyValue5","_getFirstKeyValue6","childXml","root","_len2","tags","_key2","_i8","_tags","tag","child","_typeof2","_i9","_Object$entries8","_Object$entries8$_i","srsDimensionAttribute","attributes","parseInt","Number","isNaN","create"],"sources":["../../../../../src/lib/parsers/gml/parse-gml.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n// Forked from https://github.com/derhuerst/parse-gml-polygon/blob/master/index.js\n// under ISC license\n\n/* eslint-disable no-continue, default-case */\n\nimport type {\n  // GeoJSON,\n  // Feature,\n  // FeatureCollection,\n  Geometry,\n  Position\n  // GeoJsonProperties,\n  // Point,\n  // MultiPoint,\n  // LineString,\n  // MultiLineString,\n  // Polygon,\n  // MultiPolygon,\n  // GeometryCollection\n} from '@loaders.gl/schema';\n\nimport {XMLLoader} from '@loaders.gl/xml';\nimport {deepStrictEqual} from './deep-strict-equal';\nimport rewind from '@turf/rewind';\n\nfunction noTransform(...coords) {\n  return coords;\n}\n\nexport type ParseGMLOptions = {\n  transformCoords?: Function;\n  stride?: 2 | 3 | 4;\n};\n\nexport type ParseGMLContext = {\n  srsDimension?: number;\n  [key: string]: any;\n};\n\n/**\n * Parses a typed data structure from raw XML for GML features\n * @note Error handlings is fairly weak\n */\nexport function parseGML(text: string, options) {\n  // GeoJSON | null {\n  const parsedXML = XMLLoader.parseTextSync(text, options);\n\n  options = {transformCoords: noTransform, stride: 2, ...options};\n  const context = createChildContext(parsedXML, options, {});\n\n  return parseGMLToGeometry(parsedXML, options, context);\n}\n\n/** Parse a GeoJSON geometry from GML XML */\nexport function parseGMLToGeometry(\n  inputXML: any,\n  options: ParseGMLOptions,\n  context: ParseGMLContext\n): Geometry | null {\n  const childContext = createChildContext(inputXML, options, context);\n\n  let geometry: Geometry | null = null;\n\n  const [name, xml] = getFirstKeyValue(inputXML);\n\n  switch (name) {\n    // case 'gml:MultiPoint':\n    //   geometry = {\n    //     type: 'MultiPoint',\n    //     coordinates: parseMultiPoint(xml, options, childContext)\n    //   };\n    //   break;\n\n    case 'gml:LineString':\n      geometry = {\n        type: 'LineString',\n        coordinates: parseLinearRingOrLineString(xml, options, childContext)\n      };\n      break;\n\n      // case 'gml:MultiLineString':\n      //   geometry = {\n      //     type: 'MultiLineString',\n      //     coordinates: parseMultiLineString(xml, options, childContext)\n      //   };\n      //   break;\n\n    case 'gml:Polygon':\n    case 'gml:Rectangle':\n      geometry = {\n        type: 'Polygon',\n        coordinates: parsePolygonOrRectangle(xml, options, childContext)\n      };\n      break;\n    case 'gml:Surface':\n      geometry = {\n        type: 'MultiPolygon',\n        coordinates: parseSurface(xml, options, childContext)\n      };\n      break;\n    case 'gml:MultiSurface':\n      geometry = {\n        type: 'MultiPolygon',\n        coordinates: parseMultiSurface(xml, options, childContext)\n      };\n      break;\n\n    default:\n      return null;\n  }\n\n  // todo\n  return rewind(geometry, {mutate: true});\n}\n\n/** Parse a list of coordinates from a string */\nfunction parseCoords(s: string, options: ParseGMLOptions, context: ParseGMLContext): Position[] {\n  const stride = context.srsDimension || options.stride || 2;\n\n  // Handle white space\n  const coords = s.replace(/\\s+/g, ' ').trim().split(' ');\n\n  if (coords.length === 0 || coords.length % stride !== 0) {\n    throw new Error(`invalid coordinates list (stride ${stride})`);\n  }\n\n  const points: Position[] = [];\n  for (let i = 0; i < coords.length - 1; i += stride) {\n    const point = coords.slice(i, i + stride).map(parseFloat);\n    points.push(options.transformCoords?.(...point) || point);\n  }\n\n  return points;\n}\n\nexport function parsePosList(xml: any, options: ParseGMLOptions, context: ParseGMLContext) {\n  const childContext = createChildContext(xml, options, context);\n\n  const coords = textOf(xml);\n  if (!coords) {\n    throw new Error('invalid gml:posList element');\n  }\n\n  return parseCoords(coords, options, childContext);\n}\n\nexport function parsePos(xml: any, options: ParseGMLOptions, context: ParseGMLContext): Position {\n  const childContext = createChildContext(xml, options, context);\n\n  const coords = textOf(xml);\n  if (!coords) {\n    throw new Error('invalid gml:pos element');\n  }\n\n  const points = parseCoords(coords, options, childContext);\n  if (points.length !== 1) {\n    throw new Error('gml:pos must have 1 point');\n  }\n  return points[0];\n}\n\nexport function parsePoint(xml: any, options: ParseGMLOptions, context: ParseGMLContext): number[] {\n  const childContext = createChildContext(xml, options, context);\n\n  // TODO AV: Parse other gml:Point options\n  const pos = findIn(xml, 'gml:pos');\n  if (!pos) {\n    throw new Error('invalid gml:Point element, expected a gml:pos subelement');\n  }\n  return parsePos(pos, options, childContext);\n}\n\nexport function parseLinearRingOrLineString(\n  xml: any,\n  options: ParseGMLOptions,\n  context: ParseGMLContext\n): Position[] {\n  // or a LineStringSegment\n  const childContext = createChildContext(xml, options, context);\n\n  let points: Position[] = [];\n\n  const posList = findIn(xml, 'gml:posList');\n  if (posList) {\n    points = parsePosList(posList, options, childContext);\n  } else {\n    for (const [childName, childXML] of Object.entries(xml)) {\n      switch (childName) {\n        case 'gml:Point':\n          points.push(parsePoint(childXML, options, childContext));\n          break;\n        case 'gml:pos':\n          points.push(parsePos(childXML, options, childContext));\n          break;\n        default:\n          continue;\n      }\n    }\n  }\n\n  if (points.length === 0) {\n    throw new Error(`${xml.name} must have > 0 points`);\n  }\n  return points;\n}\n\nexport function parseCurveSegments(\n  xml: any,\n  options: ParseGMLOptions,\n  context: ParseGMLContext\n): Position[] {\n  const points: Position[] = [];\n\n  for (const [childName, childXML] of Object.entries(xml)) {\n    switch (childName) {\n      case 'gml:LineStringSegment':\n        const points2 = parseLinearRingOrLineString(childXML, options, context);\n\n        // remove overlapping\n        const end = points[points.length - 1];\n        const start = points2[0];\n        if (end && start && deepStrictEqual(end, start)) {\n          points2.shift();\n        }\n\n        points.push(...points2);\n        break;\n      default:\n        continue;\n    }\n  }\n\n  if (points.length === 0) {\n    throw new Error('gml:Curve > gml:segments must have > 0 points');\n  }\n  return points;\n}\n\nexport function parseRing(\n  xml: any,\n  options: ParseGMLOptions,\n  context: ParseGMLContext\n): Position[] {\n  const childContext = createChildContext(xml, options, context);\n\n  const points: Position[] = [];\n\n  for (const [childName, childXML] of Object.entries(xml)) {\n    switch (childName) {\n      case 'gml:curveMember':\n        let points2;\n\n        const lineString = findIn(childXML, 'gml:LineString');\n        if (lineString) {\n          points2 = parseLinearRingOrLineString(lineString, options, childContext);\n        } else {\n          const segments = findIn(childXML, 'gml:Curve', 'gml:segments');\n          if (!segments) {\n            throw new Error(`invalid ${childName} element`);\n          }\n\n          points2 = parseCurveSegments(segments, options, childContext);\n        }\n\n        // remove overlapping\n        const end = points[points.length - 1];\n        const start = points2[0];\n        if (end && start && deepStrictEqual(end, start)) {\n          points2.shift();\n        }\n\n        points.push(...points2);\n\n        break;\n    }\n  }\n\n  if (points.length < 4) {\n    throw new Error(`${xml.name} must have >= 4 points`);\n  }\n  return points;\n}\n\nexport function parseExteriorOrInterior(\n  xml: any,\n  options: ParseGMLOptions,\n  context: ParseGMLContext\n): Position[] {\n  const linearRing = findIn(xml, 'gml:LinearRing');\n  if (linearRing) {\n    return parseLinearRingOrLineString(linearRing, options, context);\n  }\n\n  const ring = findIn(xml, 'gml:Ring');\n  if (!ring) {\n    throw new Error(`invalid ${xml.name} element`);\n  }\n\n  return parseRing(ring, options, context);\n}\n\nexport function parsePolygonOrRectangle(\n  xml: any,\n  options: ParseGMLOptions,\n  context: ParseGMLContext\n): Position[][] {\n  // or PolygonPatch\n  const childContext = createChildContext(xml, options, context);\n\n  const exterior = findIn(xml, 'gml:exterior');\n  if (!exterior) {\n    throw new Error(`invalid ${xml.name} element`);\n  }\n\n  const pointLists: Position[][] = [parseExteriorOrInterior(exterior, options, childContext)];\n\n  for (const [childName, childXML] of Object.entries(xml)) {\n    switch (childName) {\n      case 'gml:interior':\n        pointLists.push(parseExteriorOrInterior(childXML, options, childContext));\n        break;\n    }\n  }\n\n  return pointLists;\n}\n\nexport function parseSurface(\n  xml: any,\n  options: ParseGMLOptions,\n  context: ParseGMLContext\n): Position[][][] {\n  const childContext = createChildContext(xml, options, context);\n\n  const patches = findIn(xml, 'gml:patches');\n  if (!patches) {\n    throw new Error(`invalid ${xml.name} element`);\n  }\n\n  const polygons: Position[][][] = [];\n  for (const [childName, childXML] of Object.entries(xml)) {\n    switch (childName) {\n      case 'gml:PolygonPatch':\n      case 'gml:Rectangle':\n        polygons.push(parsePolygonOrRectangle(childXML, options, childContext));\n        break;\n\n      default:\n        continue;\n    }\n  }\n\n  if (polygons.length === 0) {\n    throw new Error(`${xml.name} must have > 0 polygons`);\n  }\n\n  return polygons;\n}\n\nexport function parseCompositeSurface(\n  xml: any,\n  options: ParseGMLOptions,\n  context: ParseGMLContext\n): Position[][][] {\n  const childContext = createChildContext(xml, options, context);\n\n  const polygons: Position[][][] = [];\n  for (const [childName, childXML] of Object.entries(xml)) {\n    switch (childName) {\n      case 'gml:surfaceMember':\n      case 'gml:surfaceMembers':\n        const [c2Name, c2Xml] = getFirstKeyValue(childXML);\n        switch (c2Name) {\n          case 'gml:Surface':\n            polygons.push(...parseSurface(c2Xml, options, childContext));\n            break;\n          case 'gml:Polygon':\n            polygons.push(parsePolygonOrRectangle(c2Xml, options, childContext));\n            break;\n        }\n        break;\n    }\n  }\n\n  if (polygons.length === 0) {\n    throw new Error(`${xml.name} must have > 0 polygons`);\n  }\n  return polygons;\n}\n\nexport function parseMultiSurface(\n  xml: any,\n  options: ParseGMLOptions,\n  context: ParseGMLContext\n): Position[][][] {\n  let el = xml;\n\n  const surfaceMembers = findIn(xml, 'gml:LinearRing');\n  if (surfaceMembers) {\n    el = surfaceMembers;\n  }\n\n  const polygons: Position[][][] = [];\n  for (const [childName, childXML] of Object.entries(el)) {\n    switch (childName) {\n      case 'gml:Surface':\n        const polygons2 = parseSurface(childXML, options, context);\n        polygons.push(...polygons2);\n        break;\n      case 'gml:surfaceMember':\n        const polygons3 = parseSurfaceMember(childXML, options, context);\n        polygons.push(...polygons3);\n        break;\n\n      case 'gml:surfaceMembers':\n        const polygonXML = findIn(childXML, 'gml:Polygon');\n        for (const surfaceMemberXML of polygonXML as []) {\n          const polygons3 = parseSurfaceMember(surfaceMemberXML, options, context);\n          polygons.push(...polygons3);\n        }\n        break;\n    }\n  }\n\n  if (polygons.length === 0) {\n    throw new Error(`${xml.name} must have > 0 polygons`);\n  }\n\n  return polygons;\n}\n\nfunction parseSurfaceMember(\n  xml: any,\n  options: ParseGMLOptions,\n  context: ParseGMLContext\n): Position[][][] {\n  const [childName, childXml] = getFirstKeyValue(xml);\n  switch (childName) {\n    case 'gml:CompositeSurface':\n      return parseCompositeSurface(childXml, options, context);\n    case 'gml:Surface':\n      return parseSurface(childXml, options, context);\n    case 'gml:Polygon':\n      return [parsePolygonOrRectangle(childXml, options, context)];\n  }\n  throw new Error(`${childName} must have polygons`);\n}\n\n// Helpers\n\nfunction textOf(el: any): string {\n  if (typeof el !== 'string') {\n    throw new Error('expected string');\n  }\n  return el;\n}\n\nfunction findIn(root: any, ...tags: string[]): any {\n  let el = root;\n  for (const tag of tags) {\n    const child = el[tag];\n    if (!child) {\n      return null;\n    }\n    el = child;\n  }\n  return el;\n}\n\n/** @returns the first [key, value] pair in an object, or ['', null] if empty object */\nfunction getFirstKeyValue(object: any): [string, any] {\n  if (object && typeof object === 'object') {\n    for (const [key, value] of Object.entries(object)) {\n      return [key, value];\n    }\n  }\n  return ['', null];\n}\n\n/** A bit heavyweight for just tracking dimension? */\nfunction createChildContext(xml, options, context): ParseGMLContext {\n  const srsDimensionAttribute = xml.attributes && xml.attributes.srsDimension;\n\n  if (srsDimensionAttribute) {\n    const srsDimension = parseInt(srsDimensionAttribute);\n    if (Number.isNaN(srsDimension) || srsDimension <= 0) {\n      throw new Error(\n        `invalid srsDimension attribute value \"${srsDimensionAttribute}\", expected a positive integer`\n      );\n    }\n\n    const childContext = Object.create(context);\n    childContext.srsDimension = srsDimension;\n    return childContext;\n  }\n\n  return context;\n}\n"],"mappings":"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"}