"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseCSWRecords = parseCSWRecords;
exports.renameXMLTags = renameXMLTags;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _xml = require("@loaders.gl/xml");
var _parseExceptionReport = require("./parse-exception-report");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function parseCSWRecords(text, options) {
  var parsedXML = _xml.XMLLoader.parseTextSync(text, _objectSpread(_objectSpread({}, options), {}, {
    xml: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.xml), {}, {
      removeNSPrefix: true,
      uncapitalizeKeys: true,
      arrayPaths: []
    }),
    _fastXML: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options._fastXML), {}, {
      parseAttributeValue: true
    })
  }));
  (0, _parseExceptionReport.parseExceptionReport)(parsedXML);
  var xmlRecords = parsedXML.getRecordsResponse;
  var elementSet = xmlRecords.searchResults.elementSet;
  var recordsFieldName = "".concat(elementSet, "Record");
  xmlRecords.records = xmlRecords.searchResults[recordsFieldName];
  delete xmlRecords.searchResults[recordsFieldName];
  (0, _xml.convertXMLFieldToArrayInPlace)(xmlRecords, 'records');
  var _iterator = _createForOfIteratorHelper(xmlRecords.records),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var record = _step.value;
      record.boundingBoxes = record.boundingBox;
      delete record.boundingBox;
      (0, _xml.convertXMLFieldToArrayInPlace)(record, 'boundingBoxes');
      var _iterator2 = _createForOfIteratorHelper(record.boundingBoxes),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var boundingBox = _step2.value;
          boundingBox.value = [boundingBox.upperCorner[0], boundingBox.upperCorner[1], boundingBox.lowerCorner[0], boundingBox.lowerCorner[1]];
          delete boundingBox.upperCorner;
          delete boundingBox.lowerCorner;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return xmlRecords;
}
function renameXMLTags(xml, renameKeys) {
  for (var _i = 0, _Object$entries = Object.entries(renameKeys); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
      oldKey = _Object$entries$_i[0],
      newKey = _Object$entries$_i[1];
    xml[newKey] = xml[oldKey];
    delete xml[oldKey];
  }
}
//# sourceMappingURL=parse-csw-records.js.map