{"version":3,"file":"create-image-source.js","names":["_imageService","require","_wmsService","_arcgisImageService","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","SERVICES","WMSService","ArcGISImageServer","ImageService","createImageSource","props","_props$type","type","serviceType","guessServiceType","url","Error","_iterator","_step","Service","testURL"],"sources":["../../../src/lib/create-image-source.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {ImageSource} from './sources/image-source';\nimport {ImageService, ImageServiceProps} from './services/generic/image-service';\nimport type {WMSServiceProps} from './services/ogc/wms-service';\nimport {WMSService} from './services/ogc/wms-service';\nimport {ArcGISImageServer} from './services/arcgis/arcgis-image-service';\n\nexport type ImageServiceType = 'wms' | 'arcgis-image-server' | 'template';\n\nconst SERVICES = [WMSService, ArcGISImageServer, ImageService];\n\ntype ImageSourceProps = ImageServiceProps &\n  WMSServiceProps & {\n    type?: ImageServiceType | 'auto';\n  };\n\n/**\n * Creates an image source\n * If type is not supplied, will try to automatically detect the the\n * @param url URL to the image source\n * @param type type of source. if not known, set to 'auto'\n * @returns an ImageSource instance\n */\nexport function createImageSource(props: ImageSourceProps): ImageSource<ImageSourceProps> {\n  const {type = 'auto'} = props;\n  const serviceType = type === 'auto' ? guessServiceType(props.url) : type;\n  switch (serviceType) {\n    case 'template':\n      return new ImageService(props);\n    case 'wms':\n      return new WMSService(props);\n    default:\n      // currently only wms service supported\n      throw new Error('Not a valid image source type');\n  }\n}\n\n/** Guess service type from URL */\nfunction guessServiceType(url: string): ImageServiceType {\n  for (const Service of SERVICES) {\n    if (Service.testURL && Service.testURL(url)) {\n      return Service.type;\n    }\n  }\n  // If all else fails, guess that this is MS service\n  return 'wms';\n}\n"],"mappings":"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"}