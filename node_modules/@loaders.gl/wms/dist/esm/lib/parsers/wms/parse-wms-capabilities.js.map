{"version":3,"file":"parse-wms-capabilities.js","names":["XMLLoader","getXMLArray","getXMLStringArray","getXMLInteger","getXMLFloat","getXMLBoolean","parseWMSCapabilities","xmlText","options","parsedXML","parseTextSync","xmlCapabilities","WMT_MS_Capabilities","WMS_Capabilities","capabilities","extractCapabilities","inheritedLayerProps","layer","layers","addInheritedLayerProps","includeRawData","raw","includeXMLText","xml","_xml$Service","_xml$Service2","_xml$Service3","_xml$Service4","_xml$Service5","_xml$Service6","_xml$Service6$Keyword","_xml$Service7","_xml$Service8","_xml$Service9","_xml$Service10","_xml$Service11","_xml$Service12","_xml$Service13","_xml$Capability","_xml$Capability2","version","String","name","Service","Name","title","Title","undefined","abstract","Abstract","keywords","KeywordList","Keyword","fees","Fees","JSON","stringify","accessConstraints","AccessConstraints","layerLimit","LayerLimit","maxWidth","maxHeight","requests","extractRequests","Capability","Request","exceptions","extractExceptions","Exception","xmlLayers","Layer","xmlSubLayer","push","extractLayer","key","value","Object","entries","xmlRequests","xmlRequest","mimeTypes","Format","xmlException","xmlExceptionFormats","length","xmlLayer","_xmlLayer$KeywordList","crs","CRS","SRS","Array","isArray","every","_","geographicBoundingBox","EX_GeographicBoundingBox","extractEXBoundingBox","LatLonBoundingBox","extractLatLonBoundingBox","boundingBoxes","BoundingBox","extractWMSBoundingBoxes","xmlDimensions","Dimension","dimensions","map","extractDimension","opaque","cascaded","queryable","xmlBoundingBox","westBoundLongitude","w","northBoundLatitude","n","eastBoundLongitude","e","southBoundLatitude","s","minx","miny","maxx","maxy","xmlBoundingBoxes","xmlBoxes","xmlBox","extractWMSBoundingBox","resx","resy","boundingBox","xResolution","yResolution","xmlDimension","units","extent","dimension","unitSymbol","default","defaultValue","multipleValues","nearestValue","current","parent","subLayer"],"sources":["../../../../../src/lib/parsers/wms/parse-wms-capabilities.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {XMLLoader} from '@loaders.gl/xml';\nimport {\n  getXMLArray,\n  getXMLStringArray,\n  getXMLInteger,\n  getXMLFloat,\n  getXMLBoolean\n} from '../xml/parse-xml-helpers';\n\n/** All capabilities of a WMS service - response to a WMS `GetCapabilities` data structure extracted from XML */\nexport type WMSCapabilities = {\n  /** Version of the WMS service */\n  version?: string; // '1.3.0' | '1.1.1' | '1.1.0' | '1.0.0'\n  /** A short name for the service */\n  name: string;\n  /** A human readable name for the service */\n  title?: string;\n  /** A more extensive description of the service */\n  abstract?: string;\n  /** A set of keywords e.g. for searching services */\n  keywords: string[];\n  /** A field of unspecified format, if present describes any access constraints required to use the service. */\n  accessConstraints?: string;\n  /** A field of unspecified format, if present describes any fees associated with the use of the service */\n  fees?: string;\n  /** If present, the max number of layers that can be rendered by the service */\n  layerLimit?: number;\n  /** If present, the widest image that can be rendered by the service */\n  maxWidth?: number;\n  /** If present, the tallest image that can be rendered by the service */\n  maxHeight?: number;\n  /** Hierarchical list of layers. */\n  layers: WMSLayer[];\n  /** A map with information about supported WMS requests. If a record is present, the request is supported by the service */\n  requests: Record<string, WMSRequest>;\n  /** Information about any exceptions that the service will report (HTTP status != 2xx) */\n  exceptions?: WMSExceptions;\n  /** Only if `options.raw`: raw untyped JSON parsed from XML. Can include information not extracted in the typed response. */\n  raw?: Record<string, unknown>;\n  /** Only if `options.xml`, the unparsed XML string can be requested */\n  xml?: string;\n};\n\n/**\n * Metadata about a layer\n * Layers inherit many properties from their parent layers, see description of individual props for details.\n * @see https://www.ogc.org/standard/wms/ 7.2.4.6\n */\nexport type WMSLayer = {\n  /** The title is a human readable name. It is mandatory on each layer. Not inherited.  */\n  title: string;\n  /** A layer is renderable if it has a name. A named parent layer will render all its sublayers. Not inherited. */\n  name?: string;\n  /** A narrative description of the map layer. */\n  abstract?: string;\n  /** A set of keywords e.g. for searching layers */\n  keywords: string[];\n  /** layer limits in unspecified CRS:84-like lng/lat, for quick access w/o CRS calculations.  Defined or inherited. */\n  geographicBoundingBox?: [min: [x: number, y: number], max: [x: number, y: number]];\n  /** Supported CRS. Either defined or inherited. */\n  crs?: string[];\n  /** Bounding boxes in specific CRS:es */\n  boundingBoxes?: WMSBoundingBox[];\n\n  // minScale: number;\n  // maxScale: number;\n  // dimensions: ?? 7.2.4.6.10\n  // MetadataURL\n  // Attribution\n  // Identifier and AuthorityURL\n  // FeatureListURL\n  // DataURL\n\n  /** any extra dimension such as time */\n  dimensions?: WMSDimension[];\n\n  /** Whether queries can be performed on the layer */\n  queryable?: boolean;\n  /** `false` if layer has significant no-data areas that the client can display as transparent. */\n  opaque?: boolean;\n  /** WMS cascading allows server to expose layers coming from other WMS servers as if they were local layers */\n  cascaded?: boolean;\n  // noSubsets: boolean\n  // fixedWith: number\n  // fixedHeight: number\n\n  /** A list of styles. @note not yet supported by WMSCapabilitiesLoader */\n  styles?: unknown[];\n\n  /** Sublayers - these inherit crs and boundingBox) if not overridden) */\n  layers?: WMSLayer[];\n};\n\n/**\n * A bounding box specifies the coordinate range for data in the layer.\n * No data is available outside the bounding box.\n */\nexport type WMSBoundingBox = {\n  /** CRS indicates the Layer CRS that applies to this bounding box. */\n  crs: string;\n  /** `[[w, s], [e, n]]`, indicates the limits of the bounding box using the axis units and order of the specified CRS. */\n  boundingBox: [min: [x: number, y: number], max: [x: number, y: number]];\n  /** Spatial horizontal resolution of data in same units as bounding box */\n  xResolution?: number;\n  /** Spatial vertical resolution of data in same units as bounding box */\n  yResolution?: number;\n};\n\n/**\n * An optional dimension that can be queried using the `name=...` parameter\n * Note that layers that have at least one dimension without `default` value\n * become unrenderable unless the dimension value is supplied to GetMap requests.\n */\nexport type WMSDimension = {\n  /** name of dimension, becomes a valid parameter key for this layer */\n  name: string;\n  /** Textual units for this dimensional axis */\n  units: string;\n  /** Unit symbol for this dimensional axis */\n  unitSymbol?: string;\n  /** Default value if no value is supplied. If dimension lacks defaultValue, requests fail if no value is supplied */\n  defaultValue?: string;\n  /** Can multiple values of the dimension be requested? */\n  multipleValues?: boolean;\n  /* Will nearest values will be substituted when out of range, if false exact values are required */\n  nearestValue?: boolean;\n  /** A special value \"current\" is supported, typically for time dimension */\n  current?: boolean;\n  /** Text content indicating available values for dimension */\n  extent: string;\n};\n\n/** Metadata about a supported WMS request  */\nexport type WMSRequest = {\n  /** MIMEtypes that can be returned by this request. */\n  mimeTypes: string[];\n};\n\nexport type WMSExceptions = {\n  /** MIME types for exception response payloads. */\n  mimeTypes: string[];\n};\n\nexport type ParseWMSCapabilitiesOptions = {\n  /** Add inherited layer information to sub layers */\n  inheritedLayerProps?: boolean;\n  /** Include the \"raw\" JSON (parsed but untyped, unprocessed XML). May contain additional fields */\n  includeRawData?: boolean;\n  /** Include the original XML document text. May contain additional information. */\n  includeXMLText?: boolean;\n  /** @deprecated Use includeRawData` */\n  raw?: boolean;\n  // xml options are passed through to xml loader\n};\n\n/**\n * Parses a typed data structure from raw XML for `GetCapabilities` response\n * @note Error handlings is fairly weak\n */\nexport function parseWMSCapabilities(\n  xmlText: string,\n  options?: ParseWMSCapabilitiesOptions\n): WMSCapabilities {\n  const parsedXML = XMLLoader.parseTextSync(xmlText, options);\n  const xmlCapabilities: any =\n    parsedXML.WMT_MS_Capabilities || parsedXML.WMS_Capabilities || parsedXML;\n  const capabilities = extractCapabilities(xmlCapabilities);\n  // In case the processed, normalized capabilities do not contain everything,\n  // the user can get the parsed XML structure.\n  if (options?.inheritedLayerProps) {\n    // Traverse layers and inject missing props from parents\n    for (const layer of capabilities.layers) {\n      addInheritedLayerProps(layer, null);\n    }\n    // Not yet implemented\n  }\n\n  if (options?.includeRawData || options?.raw) {\n    capabilities.raw = xmlCapabilities;\n  }\n\n  if (options?.includeXMLText) {\n    capabilities.xml = xmlText;\n  }\n\n  return capabilities;\n}\n\n/** Extract typed capability data from XML */\nfunction extractCapabilities(xml: any): WMSCapabilities {\n  const capabilities: WMSCapabilities = {\n    version: String(xml.version || ''),\n    name: String(xml.Service?.Name || 'unnamed'),\n    title: xml.Service?.Title ? String(xml.Service?.Title) : undefined,\n    abstract: xml.Service?.Abstract ? String(xml.Service?.Abstract) : undefined,\n    keywords: getXMLStringArray(xml.Service?.KeywordList?.Keyword),\n    fees: xml.Service?.Fees ? JSON.stringify(xml.Service?.Fees) : undefined,\n    accessConstraints: xml.Service?.AccessConstraints\n      ? JSON.stringify(xml.Service?.AccessConstraints)\n      : undefined,\n    layerLimit: getXMLInteger(xml.Service?.LayerLimit),\n    maxWidth: getXMLInteger(xml.Service?.maxWidth),\n    maxHeight: getXMLInteger(xml.Service?.maxHeight),\n    layers: [],\n    requests: extractRequests(xml.Capability?.Request),\n    exceptions: extractExceptions(xml.Exception)\n    // contact field is a mess of largely irrelevant information, put it last\n    // contact: xml.Service?.Contact ? JSON.stringify(xml.Service?.Contact) : undefined,\n  };\n\n  // LAYERS\n  const xmlLayers = getXMLArray(xml.Capability?.Layer);\n  for (const xmlSubLayer of xmlLayers) {\n    capabilities.layers.push(extractLayer(xmlSubLayer));\n  }\n\n  // Clean up object\n  for (const [key, value] of Object.entries(capabilities)) {\n    if (value === undefined) {\n      delete capabilities[key];\n    }\n  }\n\n  return capabilities;\n}\n\n/** Extract typed request metadata from XML requests field */\nfunction extractRequests(xmlRequests: any): Record<string, WMSRequest> {\n  const requests: Record<string, WMSRequest> = {};\n  for (const [name, xmlRequest] of Object.entries(xmlRequests || {}) as any) {\n    const mimeTypes = getXMLStringArray(xmlRequest?.Format);\n    requests[name] = {mimeTypes};\n  }\n  return requests;\n}\n\nfunction extractExceptions(xmlException: any): WMSExceptions | undefined {\n  const xmlExceptionFormats = getXMLArray(xmlException?.Format);\n  if (xmlExceptionFormats.length > 0) {\n    return {\n      mimeTypes: getXMLStringArray(xmlException)\n    };\n  }\n  return undefined;\n}\n\n/** Extract request data */\n// eslint-disable-next-line complexity, max-statements\nfunction extractLayer(xmlLayer: any): WMSLayer {\n  const layer: WMSLayer = {\n    // All layers must have a title\n    title: String(xmlLayer?.Title || ''),\n    // Name is required only if renderable\n    name: xmlLayer?.Name && String(xmlLayer?.Name),\n    abstract: xmlLayer?.Name && String(xmlLayer?.Abstract),\n    keywords: getXMLStringArray(xmlLayer.KeywordList?.Keyword)\n  };\n\n  // WMS 1.3.0 changes SRS to CRS\n  const crs = xmlLayer?.CRS || xmlLayer?.SRS;\n  if (crs && Array.isArray(crs) && crs.every((_) => typeof _ === 'string')) {\n    layer.crs = crs;\n  }\n\n  // v1.3.0 extract simple geographic bounding box\n  let geographicBoundingBox =\n    xmlLayer?.EX_GeographicBoundingBox && extractEXBoundingBox(xmlLayer?.EX_GeographicBoundingBox);\n  if (geographicBoundingBox) {\n    layer.geographicBoundingBox = geographicBoundingBox;\n  }\n\n  // v1.1.1 extract simple geographic bounding box\n  geographicBoundingBox =\n    xmlLayer?.LatLonBoundingBox && extractLatLonBoundingBox(xmlLayer?.LatLonBoundingBox);\n  if (geographicBoundingBox) {\n    layer.geographicBoundingBox = geographicBoundingBox;\n  }\n\n  // Extract per-CRS bounding boxes\n  const boundingBoxes = xmlLayer?.BoundingBox && extractWMSBoundingBoxes(xmlLayer?.BoundingBox);\n  if (boundingBoxes && boundingBoxes.length > 0) {\n    layer.boundingBoxes = boundingBoxes;\n  }\n\n  // Extract dimensions\n  const xmlDimensions = getXMLArray(xmlLayer?.Dimension);\n  const dimensions = xmlDimensions.map((xml) => extractDimension(xml));\n  if (dimensions.length) {\n    layer.dimensions = dimensions;\n  }\n\n  if (xmlLayer?.opaque) {\n    layer.opaque = getXMLBoolean(xmlLayer?.opaque);\n  }\n  if (xmlLayer?.cascaded) {\n    layer.cascaded = getXMLBoolean(xmlLayer?.cascaded);\n  }\n  if (xmlLayer?.queryable) {\n    layer.queryable = getXMLBoolean(xmlLayer?.queryable);\n  }\n\n  // Single layer is not represented as array in XML\n  const xmlLayers = getXMLArray(xmlLayer?.Layer);\n  const layers: WMSLayer[] = [];\n\n  for (const xmlSubLayer of xmlLayers) {\n    layers.push(extractLayer(xmlSubLayer));\n  }\n\n  if (layers.length > 0) {\n    layer.layers = layers;\n  }\n\n  // Clean up object\n  for (const [key, value] of Object.entries(layer)) {\n    if (value === undefined) {\n      delete layer[key];\n    }\n  }\n\n  return layer;\n}\n\n/** WMS 1.3.0 Loosely defined geospatial bounding box in unspecified CRS for quick content searches */\nfunction extractEXBoundingBox(xmlBoundingBox: any): [[number, number], [number, number]] {\n  const {\n    westBoundLongitude: w,\n    northBoundLatitude: n,\n    eastBoundLongitude: e,\n    southBoundLatitude: s\n  } = xmlBoundingBox;\n  return [\n    [w, s],\n    [e, n]\n  ];\n}\n\n/** WMS 1.1.1 Loosely defined geospatial bounding box in unspecified CRS for quick content searches */\nfunction extractLatLonBoundingBox(xmlBoundingBox: any): [[number, number], [number, number]] {\n  const {minx, miny, maxx, maxy} = xmlBoundingBox;\n  return [\n    [minx, miny],\n    [maxx, maxy]\n  ];\n}\n\n/** Loosely defined geospatial bounding box in unspecified CRS for quick content searches */\nfunction extractWMSBoundingBoxes(xmlBoundingBoxes: any): WMSBoundingBox[] {\n  const xmlBoxes = getXMLArray(xmlBoundingBoxes);\n  return xmlBoxes.map((xmlBox) => extractWMSBoundingBox(xmlBox));\n}\n\n/** Loosely defined geospatial bounding box in unspecified CRS for quick content searches */\nfunction extractWMSBoundingBox(xmlBoundingBox: any): WMSBoundingBox {\n  const {CRS, SRS, minx, miny, maxx, maxy, resx, resy} = xmlBoundingBox;\n  const boundingBox: WMSBoundingBox = {\n    // CRS in 1.3.0, SRS in 1.1.1\n    crs: CRS || SRS,\n    boundingBox: [\n      [getXMLFloat(minx) as number, getXMLFloat(miny) as number],\n      [getXMLFloat(maxx) as number, getXMLFloat(maxy) as number]\n    ]\n  };\n  if (resx) {\n    boundingBox.xResolution = resx;\n  }\n  if (resy) {\n    boundingBox.yResolution = resy;\n  }\n  return boundingBox;\n}\n\n/**\n * Extracts optional WMS Dimension layer field\n * @param xmlDimension\n * @example <Dimension name=\"time\" units=\"ISO8601\" default=\"2018-01-01\" nearestValue=\"0\">2001-01-01/2018-01-01/P1Y</Dimension>\n * @see https://mapserver.org/ogc/wms_dimension.html\n */\nfunction extractDimension(xmlDimension: any): WMSDimension {\n  const {name, units, value: extent} = xmlDimension;\n\n  const dimension: WMSDimension = {name, units, extent};\n\n  if (xmlDimension.unitSymbol) {\n    dimension.unitSymbol = xmlDimension.unitSymbol;\n  }\n  if (xmlDimension.default) {\n    dimension.defaultValue = xmlDimension.default;\n  }\n  if (xmlDimension.multipleValues) {\n    dimension.multipleValues = getXMLBoolean(xmlDimension.multipleValues);\n  }\n  if (xmlDimension.nearestValue) {\n    dimension.nearestValue = getXMLBoolean(xmlDimension.nearestValue);\n  }\n  if (xmlDimension.current) {\n    dimension.current = getXMLBoolean(xmlDimension.current);\n  }\n\n  return dimension;\n}\n\n/** Traverse layers and inject missing props from parents */\n// eslint-disable-next-line complexity\nfunction addInheritedLayerProps(layer: WMSLayer, parent: WMSLayer | null): void {\n  if (parent?.geographicBoundingBox && !layer.geographicBoundingBox) {\n    layer.geographicBoundingBox = [...parent.geographicBoundingBox];\n  }\n\n  if (parent?.crs && !layer.crs) {\n    layer.crs = [...parent.crs];\n  }\n\n  if (parent?.boundingBoxes && !layer.boundingBoxes) {\n    layer.boundingBoxes = [...parent.boundingBoxes];\n  }\n\n  if (parent?.dimensions && !layer.dimensions) {\n    layer.dimensions = [...parent.dimensions];\n  }\n\n  for (const subLayer of layer.layers || []) {\n    addInheritedLayerProps(subLayer, layer);\n  }\n}\n"],"mappings":"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"}