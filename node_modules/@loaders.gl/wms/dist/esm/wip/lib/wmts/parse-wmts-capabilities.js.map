{"version":3,"file":"parse-wmts-capabilities.js","names":["XMLLoader","parseWMTSCapabilities","text","options","parsedXML","parseTextSync","xml","removeNSPrefix","uncapitalizeKeys","xmlCapabilities","Capabilities"],"sources":["../../../../../src/wip/lib/wmts/parse-wmts-capabilities.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {XMLLoader} from '@loaders.gl/xml';\n\n\n/** All capabilities of a WMTS service - response to a WMTS `GetCapabilities` data structure extracted from XML */\nexport type WMTSCapabilities = {\n  serviceIdentification: {\n    title: string;\n    serviceTypeVersion: string;\n    serviceType: string;\n  };\n\n  serviceProvider: {\n    providerName: string;\n    providerSite: string;\n    serviceContact: {\n      individualName: string;\n      positionName: string;\n      contactInfo: {\n        address: {\n          administrativeArea: string;\n          city: string;\n          country: string;\n          deliveryPoint: string;\n          electronicMailAddress: string;\n          postalCode: string;\n        };\n        phone: {\n          voice: string;\n        };\n      };\n    };\n  };\n\n  operationsMetadata: {\n    GetCapabilities: any;\n    GetFeatureInfo: any;\n    GetTile: any;\n  };\n\n  contents: {\n    layers: WMTSLayer[];\n  };\n};\n\n/** A layer in WMTS */\nexport type WMTSLayer = {\n  abstract: string;\n  identifier: string;\n  title: string;\n  formats: string[];\n  styles: {\n    identifier: string;\n    isDefault: string;\n    title: string;\n    abstract?: string;\n  }[];\n  bounds: {\n    left: number;\n    right: number;\n    bottom: number;\n    top: number;\n  };\n  tileMatrixSetLinks: {\n    tileMatrixSet: string;\n  }[];\n  tileMatrixSets: WMTSTileMatrixSet[];\n};\n\n/** A zoom level in WMTS */\nexport type WMTSTileMatrixSet = {\n  identifier: string;\n  matrixIds: {\n    identifier: string;\n    matrixHeight: number;\n    matrixWidth: number;\n    scaleDenominator: number;\n    tileWidth: number;\n    tileHeight: number;\n    topLeftCorner: {\n      lon: number;\n      lat: number;\n    };\n  };\n}\n\n/**\n * Parses a typed data structure from raw XML for `GetCapabilities` response\n * @note Error handlings is fairly weak\n */\nexport function parseWMTSCapabilities(text: string, options): WMTSCapabilities {\n  const parsedXML = XMLLoader.parseTextSync(text, {...options, xml: {\n    ...options?.xml, \n    removeNSPrefix: true,\n    uncapitalizeKeys: true\n  }});\n\n  const xmlCapabilities: any = parsedXML.Capabilities || parsedXML;\n  return xmlCapabilities;\n}\n\n/**\n * Parses a typed data structure from raw XML for `GetCapabilities` response\n * @note Error handlings is fairly weak\n */\n// export function parseWMTSCapabilities(text: string, options): WMTSCapabilities {\n//   const parsedXML = XMLLoader.parseTextSync(text, options);\n//   const xmlCapabilities: any =\n//     parsedXML.WMT_MS_Capabilities || parsedXML.WMS_Capabilities || parsedXML;\n//   return extractCapabilities(xmlCapabilities);\n// }\n\n/** Extract typed capability data from XML */\n// function extractCapabilities(xml: any): WMTSCapabilities {\n//   const capabilities: WMTSCapabilities = {\n//     name: xml.Service?.Name || 'unnamed',\n//     title: xml.Service?.Title,\n//     keywords: [],\n//     requests: {},\n//     layer: extractLayer(xml.Capability?.Layer),\n//     raw: xml\n//   };\n\n//   for (const keyword of xml.Service?.KeywordList?.Keyword || []) {\n//     capabilities.keywords.push(keyword);\n//   }\n\n//   for (const [name, xmlRequest] of Object.entries(xml.Capability?.Request || {})) {\n//     capabilities.requests[name] = extractRequest(name, xmlRequest);\n//   }\n\n//   return capabilities;\n// }\n\n// /** Extract typed request data from XML */\n// function extractRequest(name: string, xmlRequest: any): WMSRequest {\n//   const format: string | string[] = xmlRequest?.Format;\n//   const mimeTypes: string[] = Array.isArray(format) ? format : [format];\n//   return {name, mimeTypes};\n// }\n\n// /** Extract request data */\n// function extractLayer(xmlLayer: any): WMSLayer {\n//   const layer: WMSLayer = {\n//     name: xmlLayer?.Name,\n//     title: xmlLayer?.Title,\n//     srs: xmlLayer?.SRS || [],\n//     layers: []\n//   };\n\n//   // Single layer is not represented as array in XML\n//   const xmlLayers = getXMLArray(xmlLayer?.Layer);\n\n//   for (const xmlSubLayer of xmlLayers) {\n//     layer.layers?.push(extractLayer(xmlSubLayer));\n//   }\n\n//   return layer;\n// }\n\n// function getXMLArray(xmlValue: any) {\n//   if (Array.isArray(xmlValue)) {\n//     return xmlValue;\n//   }\n//   if (xmlValue) {\n//     return [xmlValue];\n//   }\n//   return [];\n// }\n"],"mappings":"AAEA,SAAQA,SAAS,QAAO,iBAAiB;AAyFzC,OAAO,SAASC,qBAAqBA,CAACC,IAAY,EAAEC,OAAO,EAAoB;EAC7E,MAAMC,SAAS,GAAGJ,SAAS,CAACK,aAAa,CAACH,IAAI,EAAE;IAAC,GAAGC,OAAO;IAAEG,GAAG,EAAE;MAChE,IAAGH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,GAAG;MACfC,cAAc,EAAE,IAAI;MACpBC,gBAAgB,EAAE;IACpB;EAAC,CAAC,CAAC;EAEH,MAAMC,eAAoB,GAAGL,SAAS,CAACM,YAAY,IAAIN,SAAS;EAChE,OAAOK,eAAe;AACxB"}