{"version":3,"file":"uncapitalize.js","names":["uncapitalize","str","charAt","toLowerCase","slice","uncapitalizeKeys","object","Array","isArray","map","element","_typeof2","default","newObject","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray2","key","value"],"sources":["../../../../src/lib/xml-utils/uncapitalize.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n/**\n * Uncapitalize first letter of a string\n * @param str\n * @returns\n */\nexport function uncapitalize(str: string): string {\n  return typeof str === 'string' ? str.charAt(0).toLowerCase() + str.slice(1) : str;\n}\n\n/**\n * Recursively uncapitalize all keys in a nested object\n * @param object\n * @returns\n */\nexport function uncapitalizeKeys(object: any): any {\n  if (Array.isArray(object)) {\n    return object.map((element) => uncapitalizeKeys(element));\n  }\n\n  if (object && typeof object === 'object') {\n    const newObject = {};\n    for (const [key, value] of Object.entries(object)) {\n      newObject[uncapitalize(key)] = uncapitalizeKeys(value);\n    }\n    return newObject;\n  }\n\n  return object;\n}\n"],"mappings":";;;;;;;;;;AAOO,SAASA,YAAYA,CAACC,GAAW,EAAU;EAChD,OAAO,OAAOA,GAAG,KAAK,QAAQ,GAAGA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,GAAG,CAACG,KAAK,CAAC,CAAC,CAAC,GAAGH,GAAG;AACnF;AAOO,SAASI,gBAAgBA,CAACC,MAAW,EAAO;EACjD,IAAIC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;IACzB,OAAOA,MAAM,CAACG,GAAG,CAAC,UAACC,OAAO;MAAA,OAAKL,gBAAgB,CAACK,OAAO,CAAC;IAAA,EAAC;EAC3D;EAEA,IAAIJ,MAAM,IAAI,IAAAK,QAAA,CAAAC,OAAA,EAAON,MAAM,MAAK,QAAQ,EAAE;IACxC,IAAMO,SAAS,GAAG,CAAC,CAAC;IACpB,SAAAC,EAAA,MAAAC,eAAA,GAA2BC,MAAM,CAACC,OAAO,CAACX,MAAM,CAAC,EAAAQ,EAAA,GAAAC,eAAA,CAAAG,MAAA,EAAAJ,EAAA,IAAE;MAA9C,IAAAK,kBAAA,OAAAC,eAAA,CAAAR,OAAA,EAAAG,eAAA,CAAAD,EAAA;QAAOO,GAAG,GAAAF,kBAAA;QAAEG,KAAK,GAAAH,kBAAA;MACpBN,SAAS,CAACb,YAAY,CAACqB,GAAG,CAAC,CAAC,GAAGhB,gBAAgB,CAACiB,KAAK,CAAC;IACxD;IACA,OAAOT,SAAS;EAClB;EAEA,OAAOP,MAAM;AACf"}