"use strict";
// loaders.gl, MIT license
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTMLLoader = void 0;
const loader_utils_1 = require("@loaders.gl/loader-utils");
const xml_loader_1 = require("./xml-loader");
/**
 * Loader for HTML files
 * Essentially a copy of the XMLLoader with different mime types, file extensions and content tests.
 * This split enables applications can control whether they want HTML responses to be parsed by the XML loader or not.
 * This loader does not have any additional understanding of the structure of HTML or the document.
 */
exports.HTMLLoader = {
    ...xml_loader_1.XMLLoader,
    name: 'HTML',
    id: 'html',
    extensions: ['html', 'htm'],
    mimeTypes: ['text/html'],
    testText: testHTMLFile,
    parse: async (arrayBuffer, options) => parseTextSync(new TextDecoder().decode(arrayBuffer), options),
    parseTextSync: (text, options) => parseTextSync(text, options)
};
function testHTMLFile(text) {
    // TODO - There could be space first.
    return text.startsWith('<html');
}
function parseTextSync(text, options) {
    // fast-xml-parser can recognize HTML entities
    // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#htmlentities
    // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/5.Entities.md
    options = (0, loader_utils_1.mergeLoaderOptions)(options, {
        xml: {
            parser: 'fast-xml-parser'
        },
        _fastXML: {
            htmlEntities: true
        }
    });
    return xml_loader_1.XMLLoader.parseTextSync(text, options);
}
