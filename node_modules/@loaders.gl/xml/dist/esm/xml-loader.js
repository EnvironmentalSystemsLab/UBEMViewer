import { fastParseXML } from './lib/parsers/parse-xml';
import { uncapitalizeKeys } from './lib/xml-utils/uncapitalize';
const VERSION = typeof "3.4.4" !== 'undefined' ? "3.4.4" : 'latest';
export const XMLLoader = {
  name: 'XML',
  id: 'xml',
  module: 'xml',
  version: VERSION,
  worker: false,
  extensions: ['xml'],
  mimeTypes: ['application/xml', 'text/xml'],
  testText: testXMLFile,
  options: {
    xml: {
      parser: 'fast-xml-parser',
      uncapitalizeKeys: false,
      removeNSPrefix: false,
      textNodeName: 'value',
      arrayPaths: []
    }
  },
  parse: async (arrayBuffer, options) => parseTextSync(new TextDecoder().decode(arrayBuffer), options),
  parseTextSync: (text, options) => parseTextSync(text, options)
};
function testXMLFile(text) {
  return text.startsWith('<?xml');
}
function parseTextSync(text, options) {
  var _options$xml;
  const xmlOptions = {
    ...XMLLoader.options.xml,
    ...(options === null || options === void 0 ? void 0 : options.xml)
  };
  switch (xmlOptions.parser) {
    case 'fast-xml-parser':
      const fastXMLOptions = {
        allowBooleanAttributes: true,
        ignoreDeclaration: true,
        removeNSPrefix: xmlOptions.removeNSPrefix,
        textNodeName: xmlOptions.textNodeName,
        isArray: (name, jpath, isLeafNode, isAttribute) => {
          var _xmlOptions$arrayPath;
          const array = Boolean(xmlOptions === null || xmlOptions === void 0 ? void 0 : (_xmlOptions$arrayPath = xmlOptions.arrayPaths) === null || _xmlOptions$arrayPath === void 0 ? void 0 : _xmlOptions$arrayPath.some(path => jpath === path));
          return array;
        },
        ...(options === null || options === void 0 ? void 0 : options._fastXML)
      };
      const xml = fastParseXML(text, fastXMLOptions);
      return xmlOptions.uncapitalizeKeys ? uncapitalizeKeys(xml) : xml;
    default:
      throw new Error(options === null || options === void 0 ? void 0 : (_options$xml = options.xml) === null || _options$xml === void 0 ? void 0 : _options$xml.parser);
  }
}
export const _typecheckXMLLoader = XMLLoader;
//# sourceMappingURL=xml-loader.js.map