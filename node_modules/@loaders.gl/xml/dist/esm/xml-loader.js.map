{"version":3,"file":"xml-loader.js","names":["fastParseXML","uncapitalizeKeys","VERSION","XMLLoader","name","id","module","version","worker","extensions","mimeTypes","testText","testXMLFile","options","xml","parser","removeNSPrefix","textNodeName","arrayPaths","parse","arrayBuffer","parseTextSync","TextDecoder","decode","text","startsWith","_options$xml","xmlOptions","fastXMLOptions","allowBooleanAttributes","ignoreDeclaration","isArray","jpath","isLeafNode","isAttribute","_xmlOptions$arrayPath","array","Boolean","some","path","_fastXML","Error","_typecheckXMLLoader"],"sources":["../../src/xml-loader.ts"],"sourcesContent":["import type {LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {SAXParserOptions} from './sax-ts/sax';\nimport {fastParseXML, FastXMLParserOptions} from './lib/parsers/parse-xml';\nimport {uncapitalizeKeys} from './lib/xml-utils/uncapitalize';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nexport type XMLLoaderOptions = LoaderOptions & {\n  xml?: {\n    // TODO - type this harder\n    parser?: 'fast-xml-parser' | string;\n    /** XML is typically PascalCase, JavaScript prefects camelCase */\n    uncapitalizeKeys?: boolean;\n    removeNSPrefix?: boolean;\n    textNodeName?: string;\n    arrayPaths?: string[];\n  };\n  /** @deprecated Experimental, passes options to fast-xml-parser, IF it is being used */\n  _fastXML?: FastXMLParserOptions;\n  /** @deprecated Experimental, passes options to the SAX XML parser, IF it is being used. */\n  _sax?: SAXParserOptions;\n};\n\n/**\n * Loader for XML files\n */\nexport const XMLLoader = {\n  name: 'XML',\n  id: 'xml',\n  module: 'xml',\n  version: VERSION,\n  worker: false,\n  extensions: ['xml'],\n  mimeTypes: ['application/xml', 'text/xml'],\n  testText: testXMLFile,\n  options: {\n    xml: {\n      parser: 'fast-xml-parser',\n      uncapitalizeKeys: false,\n      removeNSPrefix: false,\n      textNodeName: 'value',\n      arrayPaths: []\n    }\n  },\n  parse: async (arrayBuffer: ArrayBuffer, options?: XMLLoaderOptions) =>\n    parseTextSync(new TextDecoder().decode(arrayBuffer), options),\n  parseTextSync: (text: string, options?: XMLLoaderOptions) => parseTextSync(text, options)\n};\n\nfunction testXMLFile(text: string): boolean {\n  // TODO - There could be space first.\n  return text.startsWith('<?xml');\n}\n\nfunction parseTextSync(text: string, options?: XMLLoaderOptions): any {\n  const xmlOptions: Required<XMLLoaderOptions['xml']> = {...XMLLoader.options.xml, ...options?.xml};\n  switch (xmlOptions.parser) {\n    case 'fast-xml-parser':\n      const fastXMLOptions: FastXMLParserOptions = {\n        // Default FastXML options\n        // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#allowbooleanattributes\n        allowBooleanAttributes: true,\n        // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#ignoredeclaration\n        ignoreDeclaration: true,\n\n        // XMLLoader Options: Map to FastXMLOptions\n\n        // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#removensprefix\n        removeNSPrefix: xmlOptions.removeNSPrefix,\n\n        // https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#textnodename\n        textNodeName: xmlOptions.textNodeName,\n\n        isArray: (name: string, jpath: string, isLeafNode: boolean, isAttribute: boolean) => {\n          const array = Boolean(xmlOptions?.arrayPaths?.some((path) => jpath === path));\n          return array;\n        },\n\n        // Application overrides\n        ...options?._fastXML\n      };\n\n      const xml = fastParseXML(text, fastXMLOptions);\n\n      // Note - could be done with FastXML tag processing\n      return xmlOptions.uncapitalizeKeys ? uncapitalizeKeys(xml) : xml;\n\n    default:\n      throw new Error(options?.xml?.parser);\n  }\n}\n\nexport const _typecheckXMLLoader: LoaderWithParser = XMLLoader;\n"],"mappings":"AAEA,SAAQA,YAAY,QAA6B,yBAAyB;AAC1E,SAAQC,gBAAgB,QAAO,8BAA8B;AAI7D,MAAMC,OAAO,GAAG,cAAkB,KAAK,WAAW,aAAiB,QAAQ;AAqB3E,OAAO,MAAMC,SAAS,GAAG;EACvBC,IAAI,EAAE,KAAK;EACXC,EAAE,EAAE,KAAK;EACTC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAEL,OAAO;EAChBM,MAAM,EAAE,KAAK;EACbC,UAAU,EAAE,CAAC,KAAK,CAAC;EACnBC,SAAS,EAAE,CAAC,iBAAiB,EAAE,UAAU,CAAC;EAC1CC,QAAQ,EAAEC,WAAW;EACrBC,OAAO,EAAE;IACPC,GAAG,EAAE;MACHC,MAAM,EAAE,iBAAiB;MACzBd,gBAAgB,EAAE,KAAK;MACvBe,cAAc,EAAE,KAAK;MACrBC,YAAY,EAAE,OAAO;MACrBC,UAAU,EAAE;IACd;EACF,CAAC;EACDC,KAAK,EAAE,MAAAA,CAAOC,WAAwB,EAAEP,OAA0B,KAChEQ,aAAa,CAAC,IAAIC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACH,WAAW,CAAC,EAAEP,OAAO,CAAC;EAC/DQ,aAAa,EAAEA,CAACG,IAAY,EAAEX,OAA0B,KAAKQ,aAAa,CAACG,IAAI,EAAEX,OAAO;AAC1F,CAAC;AAED,SAASD,WAAWA,CAACY,IAAY,EAAW;EAE1C,OAAOA,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC;AACjC;AAEA,SAASJ,aAAaA,CAACG,IAAY,EAAEX,OAA0B,EAAO;EAAA,IAAAa,YAAA;EACpE,MAAMC,UAA6C,GAAG;IAAC,GAAGxB,SAAS,CAACU,OAAO,CAACC,GAAG;IAAE,IAAGD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,GAAG;EAAA,CAAC;EACjG,QAAQa,UAAU,CAACZ,MAAM;IACvB,KAAK,iBAAiB;MACpB,MAAMa,cAAoC,GAAG;QAG3CC,sBAAsB,EAAE,IAAI;QAE5BC,iBAAiB,EAAE,IAAI;QAKvBd,cAAc,EAAEW,UAAU,CAACX,cAAc;QAGzCC,YAAY,EAAEU,UAAU,CAACV,YAAY;QAErCc,OAAO,EAAEA,CAAC3B,IAAY,EAAE4B,KAAa,EAAEC,UAAmB,EAAEC,WAAoB,KAAK;UAAA,IAAAC,qBAAA;UACnF,MAAMC,KAAK,GAAGC,OAAO,CAACV,UAAU,aAAVA,UAAU,wBAAAQ,qBAAA,GAAVR,UAAU,CAAET,UAAU,cAAAiB,qBAAA,uBAAtBA,qBAAA,CAAwBG,IAAI,CAAEC,IAAI,IAAKP,KAAK,KAAKO,IAAI,CAAC,CAAC;UAC7E,OAAOH,KAAK;QACd,CAAC;QAGD,IAAGvB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE2B,QAAQ;MACtB,CAAC;MAED,MAAM1B,GAAG,GAAGd,YAAY,CAACwB,IAAI,EAAEI,cAAc,CAAC;MAG9C,OAAOD,UAAU,CAAC1B,gBAAgB,GAAGA,gBAAgB,CAACa,GAAG,CAAC,GAAGA,GAAG;IAElE;MACE,MAAM,IAAI2B,KAAK,CAAC5B,OAAO,aAAPA,OAAO,wBAAAa,YAAA,GAAPb,OAAO,CAAEC,GAAG,cAAAY,YAAA,uBAAZA,YAAA,CAAcX,MAAM,CAAC;EACzC;AACF;AAEA,OAAO,MAAM2B,mBAAqC,GAAGvC,SAAS"}