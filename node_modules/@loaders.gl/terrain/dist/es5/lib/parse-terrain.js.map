{"version":3,"file":"parse-terrain.js","names":["_schema","require","_martini","_interopRequireDefault","_delatin","_skirt","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","getTerrain","imageData","width","height","elevationDecoder","tesselator","rScaler","bScaler","gScaler","offset","terrain","Float32Array","y","x","k","r","g","b","getMeshAttributes","vertices","bounds","gridSize","numOfVerticies","positions","texCoords","_ref","_ref2","_slicedToArray2","minX","minY","maxX","maxY","xScale","yScale","pixelIdx","POSITION","value","size","TEXCOORD_0","getMesh","terrainImage","terrainOptions","meshMaxError","data","mesh","getMartiniTileMesh","getDelatinTileMesh","_mesh","_mesh2","triangles","attributes","boundingBox","getMeshBoundingBox","skirtHeight","_addSkirt","addSkirt","newAttributes","newTriangles","loaderData","header","vertexCount","mode","indices","Uint32Array","from","martini","Martini","tile","createTile","_tile$getMesh","tin","Delatin","run","coords","loadTerrain","_x2","_x3","_x4","_loadTerrain","_asyncToGenerator2","_regenerator","mark","_callee","arrayBuffer","options","context","loadImageOptions","image","wrap","_callee$","_context","prev","next","mimeType","type","parse","sent","abrupt","stop"],"sources":["../../../src/lib/parse-terrain.ts"],"sourcesContent":["import {getMeshBoundingBox} from '@loaders.gl/schema';\nimport Martini from '@mapbox/martini';\nimport Delatin from './delatin';\nimport {addSkirt} from './helpers/skirt';\n\ntype TerrainOptions = {\n  meshMaxError: number;\n  bounds: number[];\n  elevationDecoder: ElevationDecoder;\n  tesselator: 'martini' | 'delatin';\n  skirtHeight?: number;\n};\n\ntype TerrainImage = {\n  data: Uint8Array;\n  width: number;\n  height: number;\n};\n\ntype ElevationDecoder = {\n  rScaler: any;\n  bScaler: any;\n  gScaler: any;\n  offset: number;\n};\n\nfunction getTerrain(\n  imageData: Uint8Array,\n  width: number,\n  height: number,\n  elevationDecoder: ElevationDecoder,\n  tesselator: 'martini' | 'delatin'\n) {\n  const {rScaler, bScaler, gScaler, offset} = elevationDecoder;\n\n  // From Martini demo\n  // https://observablehq.com/@mourner/martin-real-time-rtin-terrain-mesh\n  const terrain = new Float32Array((width + 1) * (height + 1));\n  // decode terrain values\n  for (let i = 0, y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++, i++) {\n      const k = i * 4;\n      const r = imageData[k + 0];\n      const g = imageData[k + 1];\n      const b = imageData[k + 2];\n      terrain[i + y] = r * rScaler + g * gScaler + b * bScaler + offset;\n    }\n  }\n\n  if (tesselator === 'martini') {\n    // backfill bottom border\n    for (let i = (width + 1) * width, x = 0; x < width; x++, i++) {\n      terrain[i] = terrain[i - width - 1];\n    }\n    // backfill right border\n    for (let i = height, y = 0; y < height + 1; y++, i += height + 1) {\n      terrain[i] = terrain[i - 1];\n    }\n  }\n\n  return terrain;\n}\n\nfunction getMeshAttributes(\n  vertices,\n  terrain: Uint8Array,\n  width: number,\n  height: number,\n  bounds: number[]\n) {\n  const gridSize = width + 1;\n  const numOfVerticies = vertices.length / 2;\n  // vec3. x, y in pixels, z in meters\n  const positions = new Float32Array(numOfVerticies * 3);\n  // vec2. 1 to 1 relationship with position. represents the uv on the texture image. 0,0 to 1,1.\n  const texCoords = new Float32Array(numOfVerticies * 2);\n\n  const [minX, minY, maxX, maxY] = bounds || [0, 0, width, height];\n  const xScale = (maxX - minX) / width;\n  const yScale = (maxY - minY) / height;\n\n  for (let i = 0; i < numOfVerticies; i++) {\n    const x = vertices[i * 2];\n    const y = vertices[i * 2 + 1];\n    const pixelIdx = y * gridSize + x;\n\n    positions[3 * i + 0] = x * xScale + minX;\n    positions[3 * i + 1] = -y * yScale + maxY;\n    positions[3 * i + 2] = terrain[pixelIdx];\n\n    texCoords[2 * i + 0] = x / width;\n    texCoords[2 * i + 1] = y / height;\n  }\n\n  return {\n    POSITION: {value: positions, size: 3},\n    TEXCOORD_0: {value: texCoords, size: 2}\n    // NORMAL: {}, - optional, but creates the high poly look with lighting\n  };\n}\n\n/**\n * Returns generated mesh object from image data\n *\n * @param {object} terrainImage terrain image data\n * @param {object} terrainOptions terrain options\n * @returns mesh object\n */\nfunction getMesh(terrainImage: TerrainImage, terrainOptions: TerrainOptions) {\n  if (terrainImage === null) {\n    return null;\n  }\n  const {meshMaxError, bounds, elevationDecoder} = terrainOptions;\n\n  const {data, width, height} = terrainImage;\n\n  let terrain;\n  let mesh;\n  switch (terrainOptions.tesselator) {\n    case 'martini':\n      terrain = getTerrain(data, width, height, elevationDecoder, terrainOptions.tesselator);\n      mesh = getMartiniTileMesh(meshMaxError, width, terrain);\n      break;\n    case 'delatin':\n      terrain = getTerrain(data, width, height, elevationDecoder, terrainOptions.tesselator);\n      mesh = getDelatinTileMesh(meshMaxError, width, height, terrain);\n      break;\n    // auto\n    default:\n      if (width === height && !(height & (width - 1))) {\n        terrain = getTerrain(data, width, height, elevationDecoder, 'martini');\n        mesh = getMartiniTileMesh(meshMaxError, width, terrain);\n      } else {\n        terrain = getTerrain(data, width, height, elevationDecoder, 'delatin');\n        mesh = getDelatinTileMesh(meshMaxError, width, height, terrain);\n      }\n      break;\n  }\n\n  const {vertices} = mesh;\n  let {triangles} = mesh;\n  let attributes = getMeshAttributes(vertices, terrain, width, height, bounds);\n\n  // Compute bounding box before adding skirt so that z values are not skewed\n  const boundingBox = getMeshBoundingBox(attributes);\n\n  if (terrainOptions.skirtHeight) {\n    const {attributes: newAttributes, triangles: newTriangles} = addSkirt(\n      attributes,\n      triangles,\n      terrainOptions.skirtHeight\n    );\n    attributes = newAttributes;\n    triangles = newTriangles;\n  }\n\n  return {\n    // Data return by this loader implementation\n    loaderData: {\n      header: {}\n    },\n    header: {\n      vertexCount: triangles.length,\n      boundingBox\n    },\n    mode: 4, // TRIANGLES\n    indices: {value: Uint32Array.from(triangles), size: 1},\n    attributes\n  };\n}\n\n/**\n * Get Martini generated vertices and triangles\n *\n * @param {number} meshMaxError threshold for simplifying mesh\n * @param {number} width width of the input data\n * @param {number[] | Float32Array} terrain elevation data\n * @returns {{vertices: Uint16Array, triangles: Uint32Array}} vertices and triangles data\n */\nfunction getMartiniTileMesh(meshMaxError, width, terrain) {\n  const gridSize = width + 1;\n  const martini = new Martini(gridSize);\n  const tile = martini.createTile(terrain);\n  const {vertices, triangles} = tile.getMesh(meshMaxError);\n\n  return {vertices, triangles};\n}\n\n/**\n * Get Delatin generated vertices and triangles\n *\n * @param {number} meshMaxError threshold for simplifying mesh\n * @param {number} width width of the input data array\n * @param {number} height height of the input data array\n * @param {number[] | Float32Array} terrain elevation data\n * @returns {{vertices: number[], triangles: number[]}} vertices and triangles data\n */\nfunction getDelatinTileMesh(meshMaxError, width, height, terrain) {\n  const tin = new Delatin(terrain, width + 1, height + 1);\n  tin.run(meshMaxError);\n  // @ts-expect-error\n  const {coords, triangles} = tin;\n  const vertices = coords;\n  return {vertices, triangles};\n}\n\nexport default async function loadTerrain(arrayBuffer, options, context) {\n  const loadImageOptions = {\n    ...options,\n    mimeType: 'application/x.image',\n    image: {...options.image, type: 'data'}\n  };\n  const image = await context.parse(arrayBuffer, loadImageOptions);\n  // Extend function to support additional mesh generation options (square grid or delatin)\n  return getMesh(image, options.terrain);\n}\n"],"mappings":"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"}