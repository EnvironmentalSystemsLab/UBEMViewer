{"version":3,"file":"flat-geojson-to-binary.js","names":["_polygon","require","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","flatGeojsonToBinary","features","geometryInfo","options","propArrayTypes","extractNumericPropTypes","numericPropKeys","k","fillArrays","PositionDataType","Float32Array","TEST_EXPORTS","exports","_iterator","_step","feature","properties","val","deduceArrayType","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLength","_options$numericPropK","_options$PositionData","hasGlobalId","GlobalFeatureIdsDataType","Uint32Array","Uint16Array","points","type","positions","globalFeatureIds","featureIds","numericProps","fields","lines","pathIndices","polygons","polygonIndices","primitivePolygonIndices","triangles","_i","_arr","_iterator2","_step2","propName","T","indexMap","pointPosition","pointFeature","linePosition","linePath","lineFeature","polygonPosition","polygonObject","polygonRing","polygonFeature","_iterator3","_step3","geometry","handlePoint","keepStringProperties","id","handleLineString","handlePolygon","Error","makeAccessorObjects","set","data","nPositions","fillNumericProperties","fill","il","indices","start","end","l","ll","startPosition","areas","nextIndices","undefined","endPosition","triangulatePolygon","_ref","polygonPositions","subarray","offset","holes","map","earcut","t","tl","wrapProps","obj","size","returnObj","index","numericPropName","numericKeys","props","includes","x","Number","isFinite","Float64Array","Math","fround"],"sources":["../../../src/lib/flat-geojson-to-binary.ts"],"sourcesContent":["/* eslint-disable indent */\nimport {earcut} from '@math.gl/polygon';\nimport type {\n  BinaryAttribute,\n  BinaryFeatures,\n  FlatFeature,\n  FlatPoint,\n  FlatLineString,\n  FlatPolygon,\n  GeojsonGeometryInfo,\n  TypedArray\n} from '@loaders.gl/schema';\nimport {PropArrayConstructor, Lines, Points, Polygons} from './flat-geojson-to-binary-types';\n\n/**\n * Convert binary features to flat binary arrays. Similar to\n * `geojsonToBinary` helper function, except that it expects\n * a binary representation of the feature data, which enables\n * 2X-3X speed increase in parse speed, compared to using\n * geoJSON. See `binary-vector-tile/VectorTileFeature` for\n * data format detais\n *\n * @param features\n * @param geometryInfo\n * @param options\n * @returns filled arrays\n */\nexport function flatGeojsonToBinary(\n  features: FlatFeature[],\n  geometryInfo: GeojsonGeometryInfo,\n  options?: FlatGeojsonToBinaryOptions\n) {\n  const propArrayTypes = extractNumericPropTypes(features);\n  const numericPropKeys = Object.keys(propArrayTypes).filter((k) => propArrayTypes[k] !== Array);\n  return fillArrays(\n    features,\n    {\n      propArrayTypes,\n      ...geometryInfo\n    },\n    {\n      numericPropKeys: (options && options.numericPropKeys) || numericPropKeys,\n      PositionDataType: options ? options.PositionDataType : Float32Array\n    }\n  );\n}\n\n/**\n * Options for `flatGeojsonToBinary`\n */\nexport type FlatGeojsonToBinaryOptions = {\n  numericPropKeys?: string[];\n  PositionDataType?: Float32ArrayConstructor | Float64ArrayConstructor;\n};\n\nexport const TEST_EXPORTS = {\n  extractNumericPropTypes\n};\n\n/**\n * Extracts properties that are always numeric\n *\n * @param features\n * @returns object with numeric types\n */\nfunction extractNumericPropTypes(features: FlatFeature[]): {\n  [key: string]: PropArrayConstructor;\n} {\n  const propArrayTypes = {};\n  for (const feature of features) {\n    if (feature.properties) {\n      for (const key in feature.properties) {\n        // If property has not been seen before, or if property has been numeric\n        // in all previous features, check if numeric in this feature\n        // If not numeric, Array is stored to prevent rechecking in the future\n        // Additionally, detects if 64 bit precision is required\n        const val = feature.properties[key];\n        propArrayTypes[key] = deduceArrayType(val, propArrayTypes[key]);\n      }\n    }\n  }\n\n  return propArrayTypes;\n}\n\n/**\n * Fills coordinates into pre-allocated typed arrays\n *\n * @param features\n * @param geometryInfo\n * @param options\n * @returns an accessor object with value and size keys\n */\n// eslint-disable-next-line complexity\nfunction fillArrays(\n  features: FlatFeature[],\n  geometryInfo: GeojsonGeometryInfo & {\n    propArrayTypes: {[key: string]: PropArrayConstructor};\n  },\n  options: FlatGeojsonToBinaryOptions\n) {\n  const {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount,\n    propArrayTypes,\n    coordLength\n  } = geometryInfo;\n  const {numericPropKeys = [], PositionDataType = Float32Array} = options;\n  const hasGlobalId = features[0] && 'id' in features[0];\n  const GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  const points: Points = {\n    type: 'Point',\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds:\n      pointFeaturesCount > 65535\n        ? new Uint32Array(pointPositionsCount)\n        : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n  const lines: Lines = {\n    type: 'LineString',\n    pathIndices:\n      linePositionsCount > 65535\n        ? new Uint32Array(linePathsCount + 1)\n        : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds:\n      lineFeaturesCount > 65535\n        ? new Uint32Array(linePositionsCount)\n        : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n  const polygons: Polygons = {\n    type: 'Polygon',\n    polygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonObjectsCount + 1)\n        : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonRingsCount + 1)\n        : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    triangles: [],\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds:\n      polygonFeaturesCount > 65535\n        ? new Uint32Array(polygonPositionsCount)\n        : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n\n  // Instantiate numeric properties arrays; one value per vertex\n  for (const object of [points, lines, polygons]) {\n    for (const propName of numericPropKeys) {\n      // If property has been numeric in all previous features in which the property existed, check\n      // if numeric in this feature\n      const T = propArrayTypes[propName];\n      object.numericProps[propName] = new T(object.positions.length / coordLength) as TypedArray;\n    }\n  }\n\n  // Set last element of path/polygon indices as positions length\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n\n  const indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    const properties = feature.properties || {};\n\n    switch (geometry.type) {\n      case 'Point':\n        handlePoint(geometry, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          points.fields.push({id: feature.id});\n        }\n        indexMap.pointFeature++;\n        break;\n      case 'LineString':\n        handleLineString(geometry, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          lines.fields.push({id: feature.id});\n        }\n        indexMap.lineFeature++;\n        break;\n      case 'Polygon':\n        handlePolygon(geometry, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          polygons.fields.push({id: feature.id});\n        }\n        indexMap.polygonFeature++;\n        break;\n      default:\n        throw new Error('Invalid geometry type');\n    }\n\n    indexMap.feature++;\n  }\n\n  // Wrap each array in an accessor object with value and size keys\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\n\n/**\n * Fills (Multi)Point coordinates into points object of arrays\n *\n * @param geometry\n * @param points\n * @param indexMap\n * @param coordLength\n * @param properties\n */\nfunction handlePoint(\n  geometry: FlatPoint,\n  points: Points,\n  indexMap: {\n    pointPosition: number;\n    pointFeature: number;\n    linePosition?: number;\n    linePath?: number;\n    lineFeature?: number;\n    polygonPosition?: number;\n    polygonObject?: number;\n    polygonRing?: number;\n    polygonFeature?: number;\n    feature: number;\n  },\n  coordLength: number,\n  properties: {[x: string]: string | number | boolean | null}\n): void {\n  points.positions.set(geometry.data, indexMap.pointPosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(points, properties, indexMap.pointPosition, nPositions);\n  points.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.pointPosition,\n    indexMap.pointPosition + nPositions\n  );\n  points.featureIds.fill(\n    indexMap.pointFeature,\n    indexMap.pointPosition,\n    indexMap.pointPosition + nPositions\n  );\n\n  indexMap.pointPosition += nPositions;\n}\n\n/**\n * Fills (Multi)LineString coordinates into lines object of arrays\n *\n * @param geometry\n * @param lines\n * @param indexMap\n * @param coordLength\n * @param properties\n */\nfunction handleLineString(\n  geometry: FlatLineString,\n  lines: Lines,\n  indexMap: {\n    pointPosition?: number;\n    pointFeature?: number;\n    linePosition: number;\n    linePath: number;\n    lineFeature: number;\n    polygonPosition?: number;\n    polygonObject?: number;\n    polygonRing?: number;\n    polygonFeature?: number;\n    feature: number;\n  },\n  coordLength: number,\n  properties: {[x: string]: string | number | boolean | null}\n): void {\n  lines.positions.set(geometry.data, indexMap.linePosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n\n  lines.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.linePosition,\n    indexMap.linePosition + nPositions\n  );\n  lines.featureIds.fill(\n    indexMap.lineFeature,\n    indexMap.linePosition,\n    indexMap.linePosition + nPositions\n  );\n\n  for (let i = 0, il = geometry.indices.length; i < il; ++i) {\n    // Extract range of data we are working with, defined by start\n    // and end indices (these index into the geometry.data array)\n    const start = geometry.indices[i];\n    const end =\n      i === il - 1\n        ? geometry.data.length // last line, so read to end of data\n        : geometry.indices[i + 1]; // start index for next line\n\n    lines.pathIndices[indexMap.linePath++] = indexMap.linePosition;\n    indexMap.linePosition += (end - start) / coordLength;\n  }\n}\n\n/**\n * Fills (Multi)Polygon coordinates into polygons object of arrays\n *\n * @param geometry\n * @param polygons\n * @param indexMap\n * @param coordLength\n * @param properties\n */\nfunction handlePolygon(\n  geometry: FlatPolygon,\n  polygons: Polygons,\n  indexMap: {\n    pointPosition?: number;\n    pointFeature?: number;\n    linePosition?: number;\n    linePath?: number;\n    lineFeature?: number;\n    polygonPosition: number;\n    polygonObject: number;\n    polygonRing: number;\n    polygonFeature: number;\n    feature: number;\n  },\n  coordLength: number,\n  properties: {[x: string]: string | number | boolean | null}\n): void {\n  polygons.positions.set(geometry.data, indexMap.polygonPosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n  polygons.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.polygonPosition,\n    indexMap.polygonPosition + nPositions\n  );\n  polygons.featureIds.fill(\n    indexMap.polygonFeature,\n    indexMap.polygonPosition,\n    indexMap.polygonPosition + nPositions\n  );\n\n  // Unlike Point & LineString geometry.indices is a 2D array\n  for (let l = 0, ll = geometry.indices.length; l < ll; ++l) {\n    const startPosition = indexMap.polygonPosition;\n    polygons.polygonIndices[indexMap.polygonObject++] = startPosition;\n\n    const areas = geometry.areas[l];\n    const indices = geometry.indices[l];\n    const nextIndices = geometry.indices[l + 1];\n\n    for (let i = 0, il = indices.length; i < il; ++i) {\n      const start = indices[i];\n      const end =\n        i === il - 1\n          ? // last line, so either read to:\n            nextIndices === undefined\n            ? geometry.data.length // end of data (no next indices)\n            : nextIndices[0] // start of first line in nextIndices\n          : indices[i + 1]; // start index for next line\n\n      polygons.primitivePolygonIndices[indexMap.polygonRing++] = indexMap.polygonPosition;\n      indexMap.polygonPosition += (end - start) / coordLength;\n    }\n\n    const endPosition = indexMap.polygonPosition;\n    triangulatePolygon(polygons, areas, indices, {startPosition, endPosition, coordLength});\n  }\n}\n\n/**\n * Triangulate polygon using earcut\n *\n * @param polygons\n * @param areas\n * @param indices\n * @param param3\n */\nfunction triangulatePolygon(\n  polygons: Polygons,\n  areas: number[],\n  indices: number[],\n  {\n    startPosition,\n    endPosition,\n    coordLength\n  }: {startPosition: number; endPosition: number; coordLength: number}\n): void {\n  const start = startPosition * coordLength;\n  const end = endPosition * coordLength;\n\n  // Extract positions and holes for just this polygon\n  const polygonPositions = polygons.positions.subarray(start, end);\n\n  // Holes are referenced relative to outer polygon\n  const offset = indices[0];\n  const holes = indices.slice(1).map((n: number) => (n - offset) / coordLength);\n\n  // Compute triangulation\n  // @ts-expect-error TODO can earcut handle binary arrays? Add tests?\n  const triangles = earcut(polygonPositions, holes, coordLength, areas);\n\n  // Indices returned by triangulation are relative to start\n  // of polygon, so we need to offset\n  for (let t = 0, tl = triangles.length; t < tl; ++t) {\n    polygons.triangles.push(startPosition + triangles[t]);\n  }\n}\n\n/**\n * Wraps an object containing array into accessors\n *\n * @param obj\n * @param size\n */\nfunction wrapProps(\n  obj: {[key: string]: TypedArray},\n  size: number\n): {[key: string]: BinaryAttribute} {\n  const returnObj = {};\n  for (const key in obj) {\n    returnObj[key] = {value: obj[key], size};\n  }\n  return returnObj;\n}\n\n/**\n * Wrap each array in an accessor object with value and size keys\n *\n * @param points\n * @param lines\n * @param polygons\n * @param coordLength\n * @returns object\n */\nfunction makeAccessorObjects(\n  points: Points,\n  lines: Lines,\n  polygons: Polygons,\n  coordLength: number\n): BinaryFeatures {\n  return {\n    points: {\n      ...points,\n      positions: {value: points.positions, size: coordLength},\n      globalFeatureIds: {value: points.globalFeatureIds, size: 1},\n      featureIds: {value: points.featureIds, size: 1},\n      numericProps: wrapProps(points.numericProps, 1)\n    },\n    lines: {\n      ...lines,\n      positions: {value: lines.positions, size: coordLength},\n      pathIndices: {value: lines.pathIndices, size: 1},\n      globalFeatureIds: {value: lines.globalFeatureIds, size: 1},\n      featureIds: {value: lines.featureIds, size: 1},\n      numericProps: wrapProps(lines.numericProps, 1)\n    },\n    polygons: {\n      ...polygons,\n      positions: {value: polygons.positions, size: coordLength},\n      polygonIndices: {value: polygons.polygonIndices, size: 1},\n      primitivePolygonIndices: {value: polygons.primitivePolygonIndices, size: 1},\n      triangles: {value: new Uint32Array(polygons.triangles), size: 1},\n      globalFeatureIds: {value: polygons.globalFeatureIds, size: 1},\n      featureIds: {value: polygons.featureIds, size: 1},\n      numericProps: wrapProps(polygons.numericProps, 1)\n    }\n  };\n}\n\n/**\n * Add numeric properties to object\n *\n * @param object\n * @param properties\n * @param index\n * @param length\n */\nfunction fillNumericProperties(\n  object: Points | Lines | Polygons,\n  properties: {[x: string]: string | number | boolean | null},\n  index: number,\n  length: number\n): void {\n  for (const numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      const value = properties[numericPropName] as number;\n      object.numericProps[numericPropName].fill(value, index, index + length);\n    }\n  }\n}\n\n/**\n * Keep string properties in object\n *\n * @param properties\n * @param numericKeys\n * @returns object\n */\nfunction keepStringProperties(\n  properties: {[x: string]: string | number | boolean | null},\n  numericKeys: string[]\n) {\n  const props = {};\n  for (const key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n  return props;\n}\n\n/**\n *\n * Deduce correct array constructor to use for a given value\n *\n * @param x value to test\n * @param constructor previous constructor deduced\n * @returns PropArrayConstructor\n */\nfunction deduceArrayType(x: any, constructor: PropArrayConstructor): PropArrayConstructor {\n  if (constructor === Array || !Number.isFinite(x)) {\n    return Array;\n  }\n\n  // If this or previous value required 64bits use Float64Array\n  return constructor === Float64Array || Math.fround(x) !== x ? Float64Array : Float32Array;\n}\n"],"mappings":"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"}