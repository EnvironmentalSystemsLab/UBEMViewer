{"version":3,"file":"geojson-to-flat-geojson.js","names":["_polygon","require","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","geojsonToFlatGeojson","features","options","undefined","coordLength","fixRingWinding","map","feature","flattenFeature","flattenPoint","coordinates","data","indices","_toConsumableArray2","flattenLineString","_iterator","_step","c","flattenPolygon","areas","count","ringAreas","polygons","_iterator2","_step2","lineString","lineString2d","p","area","getPolygonSignedArea","flat","ccw","reverse","geometry","type","Error","concat"],"sources":["../../../src/lib/geojson-to-flat-geojson.ts"],"sourcesContent":["import {getPolygonSignedArea} from '@math.gl/polygon';\n\nimport {Feature, Position, FlatFeature} from '@loaders.gl/schema';\n\n/**\n * Options for `geojsonToFlatGeojson`\n */\nexport type GeojsonToFlatGeojsonOptions = {\n  coordLength: number;\n  fixRingWinding: boolean;\n};\n\n// Coordinates defining a Point\ntype PointCoordinates = Position;\n// Coordinates defining a LineString\ntype LineStringCoordinates = Position[];\n// Coordinates defining a Polygon\ntype PolygonCoordinates = Position[][];\n\n/**\n * Convert GeoJSON features to Flat GeoJSON features\n *\n * @param features\n * @param options\n * @returns an Array of Flat GeoJSON features\n */\nexport function geojsonToFlatGeojson(\n  features: Feature[],\n  options: GeojsonToFlatGeojsonOptions = {coordLength: 2, fixRingWinding: true}\n): FlatFeature[] {\n  return features.map((feature) => flattenFeature(feature, options));\n}\n\n/**\n * Helper function to copy Point values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenPoint(\n  coordinates: PointCoordinates,\n  data: number[],\n  indices: number[],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  indices.push(data.length);\n  data.push(...coordinates);\n\n  // Pad up to coordLength\n  for (let i = coordinates.length; i < options.coordLength; i++) {\n    data.push(0);\n  }\n}\n\n/**\n * Helper function to copy LineString values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenLineString(\n  coordinates: LineStringCoordinates,\n  data: number[],\n  indices: number[],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  indices.push(data.length);\n  for (const c of coordinates) {\n    data.push(...c);\n\n    // Pad up to coordLength\n    for (let i = c.length; i < options.coordLength; i++) {\n      data.push(0);\n    }\n  }\n}\n\n/**\n * Helper function to copy Polygon values from `coordinates` into `data` & `indices` & `areas`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param areas\n * @param options\n */\nfunction flattenPolygon(\n  coordinates: PolygonCoordinates,\n  data: number[],\n  indices: number[][],\n  areas: number[][],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  let count = 0;\n  const ringAreas: number[] = [];\n  const polygons: number[] = [];\n  for (const lineString of coordinates) {\n    const lineString2d = lineString.map((p) => p.slice(0, 2));\n    let area = getPolygonSignedArea(lineString2d.flat());\n    const ccw = area < 0;\n\n    // Exterior ring must be CCW and interior rings CW\n    if (options.fixRingWinding && ((count === 0 && !ccw) || (count > 0 && ccw))) {\n      lineString.reverse();\n      area = -area;\n    }\n    ringAreas.push(area);\n    flattenLineString(lineString, data, polygons, options);\n    count++;\n  }\n\n  if (count > 0) {\n    areas.push(ringAreas);\n    indices.push(polygons);\n  }\n}\n\n/**\n * Flatten single GeoJSON feature into Flat GeoJSON\n *\n * @param feature\n * @param options\n * @returns A Flat GeoJSON feature\n */\nfunction flattenFeature(feature: Feature, options: GeojsonToFlatGeojsonOptions): FlatFeature {\n  const {geometry} = feature;\n  if (geometry.type === 'GeometryCollection') {\n    throw new Error('GeometryCollection type not supported');\n  }\n  const data = [];\n  const indices = [];\n  let areas;\n  let type;\n\n  switch (geometry.type) {\n    case 'Point':\n      type = 'Point';\n      flattenPoint(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiPoint':\n      type = 'Point';\n      geometry.coordinates.map((c) => flattenPoint(c, data, indices, options));\n      break;\n    case 'LineString':\n      type = 'LineString';\n      flattenLineString(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiLineString':\n      type = 'LineString';\n      geometry.coordinates.map((c) => flattenLineString(c, data, indices, options));\n      break;\n    case 'Polygon':\n      type = 'Polygon';\n      areas = [];\n      flattenPolygon(geometry.coordinates, data, indices, areas, options);\n      break;\n    case 'MultiPolygon':\n      type = 'Polygon';\n      areas = [];\n      geometry.coordinates.map((c) => flattenPolygon(c, data, indices, areas, options));\n      break;\n    default:\n      throw new Error(`Unknown type: ${type}`);\n  }\n\n  return {...feature, geometry: {type, indices, data, areas}};\n}\n"],"mappings":"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"}