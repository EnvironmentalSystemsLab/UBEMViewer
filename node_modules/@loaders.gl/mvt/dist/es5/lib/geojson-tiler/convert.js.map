{"version":3,"file":"convert.js","names":["_simplify","require","_feature","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","convert","data","options","features","type","convertFeature","geometry","geojson","index","coords","coordinates","tolerance","Math","pow","maxZoom","extent","id","promoteId","properties","generateId","convertPoint","_iterator","_step","p","convertLine","lineMetrics","_iterator2","_step2","line","push","createFeature","convertLines","_iterator3","_step3","polygon","newPolygon","_iterator4","geometries","_step4","singleGeometry","Error","out","projectX","projectY","ring","isPolygon","x0","y0","size","j","x","y","sqrt","last","simplify","abs","start","end","rings","geom","sin","PI","y2","log"],"sources":["../../../../src/lib/geojson-tiler/convert.ts"],"sourcesContent":["// loaders.gl, MIT license\n// Forked from https://github.com/mapbox/geojson-vt under compatible ISC license\n\n/* eslint-disable */\n// @ts-nocheck\n\nimport type {Feature} from '@loaders.gl/schema';\nimport type {GeoJSONTileFeature} from './tile';\n\nimport {simplify} from './simplify';\nimport {createFeature} from './feature';\n\n// converts GeoJSON feature into an intermediate projected JSON vector format with simplification data\n\nexport function convert(data: Feature, options): GeoJSONTileFeature[] {\n  const features = [];\n  if (data.type === 'FeatureCollection') {\n    for (let i = 0; i < data.features.length; i++) {\n      convertFeature(features, data.features[i], options, i);\n    }\n  } else if (data.type === 'Feature') {\n    convertFeature(features, data, options);\n  } else {\n    // single geometry or a geometry collection\n    convertFeature(features, {geometry: data}, options);\n  }\n\n  return features;\n}\n\nexport type ConvertFeatureOptions = {\n  maxZoom?: number;\n  tolerance: number;\n  extent: number;\n  lineMetrics: boolean;\n};\n\nfunction convertFeature(\n  features: GeoJSONTileFeature[],\n  geojson: Feature,\n  options: ConvertFeatureOptions,\n  index: number\n): void {\n  if (!geojson.geometry) {\n    return;\n  }\n\n  const coords = geojson.geometry.coordinates;\n  const type = geojson.geometry.type;\n  const tolerance = Math.pow(options.tolerance / ((1 << options.maxZoom) * options.extent), 2);\n  let geometry = [];\n  let id = geojson.id;\n  if (options.promoteId) {\n    id = geojson.properties[options.promoteId];\n  } else if (options.generateId) {\n    id = index || 0;\n  }\n  if (type === 'Point') {\n    convertPoint(coords, geometry);\n  } else if (type === 'MultiPoint') {\n    for (const p of coords) {\n      convertPoint(p, geometry);\n    }\n  } else if (type === 'LineString') {\n    convertLine(coords, geometry, tolerance, false);\n  } else if (type === 'MultiLineString') {\n    if (options.lineMetrics) {\n      // explode into linestrings to be able to track metrics\n      for (const line of coords) {\n        geometry = [];\n        convertLine(line, geometry, tolerance, false);\n        features.push(createFeature(id, 'LineString', geometry, geojson.properties));\n      }\n      return;\n    } else {\n      convertLines(coords, geometry, tolerance, false);\n    }\n  } else if (type === 'Polygon') {\n    convertLines(coords, geometry, tolerance, true);\n  } else if (type === 'MultiPolygon') {\n    for (const polygon of coords) {\n      const newPolygon = [];\n      convertLines(polygon, newPolygon, tolerance, true);\n      geometry.push(newPolygon);\n    }\n  } else if (type === 'GeometryCollection') {\n    for (const singleGeometry of geojson.geometry.geometries) {\n      convertFeature(\n        features,\n        {\n          id,\n          geometry: singleGeometry,\n          properties: geojson.properties\n        },\n        options,\n        index\n      );\n    }\n    return;\n  } else {\n    throw new Error('Input data is not a valid GeoJSON object.');\n  }\n\n  features.push(createFeature(id, type, geometry, geojson.properties));\n}\n\nfunction convertPoint(coords, out): void {\n  out.push(projectX(coords[0]), projectY(coords[1]), 0);\n}\n\nfunction convertLine(ring: number[], out, tolerance: number, isPolygon: boolean): void {\n  let x0, y0;\n  let size = 0;\n\n  for (let j = 0; j < ring.length; j++) {\n    const x = projectX(ring[j][0]);\n    const y = projectY(ring[j][1]);\n\n    out.push(x, y, 0);\n\n    if (j > 0) {\n      if (isPolygon) {\n        size += (x0 * y - x * y0) / 2; // area\n      } else {\n        size += Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)); // length\n      }\n    }\n    x0 = x;\n    y0 = y;\n  }\n\n  const last = out.length - 3;\n  out[2] = 1;\n  simplify(out, 0, last, tolerance);\n  out[last + 2] = 1;\n\n  out.size = Math.abs(size);\n  out.start = 0;\n  out.end = out.size;\n}\n\nfunction convertLines(rings: number[][], out, tolerance: number, isPolygon: boolean): void {\n  for (let i = 0; i < rings.length; i++) {\n    const geom = [];\n    convertLine(rings[i], geom, tolerance, isPolygon);\n    out.push(geom);\n  }\n}\n\nfunction projectX(x: number): number {\n  return x / 360 + 0.5;\n}\n\nfunction projectY(y: number): number {\n  const sin = Math.sin((y * Math.PI) / 180);\n  const y2 = 0.5 - (0.25 * Math.log((1 + sin) / (1 - sin))) / Math.PI;\n  return y2 < 0 ? 0 : y2 > 1 ? 1 : y2;\n}\n"],"mappings":";;;;;;AASA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AAAwC,SAAAE,2BAAAC,CAAA,EAAAC,cAAA,QAAAC,EAAA,UAAAC,MAAA,oBAAAH,CAAA,CAAAG,MAAA,CAAAC,QAAA,KAAAJ,CAAA,qBAAAE,EAAA,QAAAG,KAAA,CAAAC,OAAA,CAAAN,CAAA,MAAAE,EAAA,GAAAK,2BAAA,CAAAP,CAAA,MAAAC,cAAA,IAAAD,CAAA,WAAAA,CAAA,CAAAQ,MAAA,qBAAAN,EAAA,EAAAF,CAAA,GAAAE,EAAA,MAAAO,CAAA,UAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,QAAAH,CAAA,IAAAT,CAAA,CAAAQ,MAAA,WAAAK,IAAA,mBAAAA,IAAA,SAAAC,KAAA,EAAAd,CAAA,CAAAS,CAAA,UAAAM,CAAA,WAAAA,EAAAC,EAAA,UAAAA,EAAA,KAAAC,CAAA,EAAAP,CAAA,gBAAAQ,SAAA,iJAAAC,gBAAA,SAAAC,MAAA,UAAAC,GAAA,WAAAV,CAAA,WAAAA,EAAA,IAAAT,EAAA,GAAAA,EAAA,CAAAoB,IAAA,CAAAtB,CAAA,MAAAY,CAAA,WAAAA,EAAA,QAAAW,IAAA,GAAArB,EAAA,CAAAsB,IAAA,IAAAL,gBAAA,GAAAI,IAAA,CAAAV,IAAA,SAAAU,IAAA,KAAAR,CAAA,WAAAA,EAAAU,GAAA,IAAAL,MAAA,SAAAC,GAAA,GAAAI,GAAA,KAAAR,CAAA,WAAAA,EAAA,eAAAE,gBAAA,IAAAjB,EAAA,CAAAwB,MAAA,UAAAxB,EAAA,CAAAwB,MAAA,oBAAAN,MAAA,QAAAC,GAAA;AAAA,SAAAd,4BAAAP,CAAA,EAAA2B,MAAA,SAAA3B,CAAA,qBAAAA,CAAA,sBAAA4B,iBAAA,CAAA5B,CAAA,EAAA2B,MAAA,OAAAf,CAAA,GAAAiB,MAAA,CAAAC,SAAA,CAAAC,QAAA,CAAAT,IAAA,CAAAtB,CAAA,EAAAgC,KAAA,aAAApB,CAAA,iBAAAZ,CAAA,CAAAiC,WAAA,EAAArB,CAAA,GAAAZ,CAAA,CAAAiC,WAAA,CAAAC,IAAA,MAAAtB,CAAA,cAAAA,CAAA,mBAAAP,KAAA,CAAA8B,IAAA,CAAAnC,CAAA,OAAAY,CAAA,+DAAAwB,IAAA,CAAAxB,CAAA,UAAAgB,iBAAA,CAAA5B,CAAA,EAAA2B,MAAA;AAAA,SAAAC,kBAAAS,GAAA,EAAAC,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAD,GAAA,CAAA7B,MAAA,EAAA8B,GAAA,GAAAD,GAAA,CAAA7B,MAAA,WAAAC,CAAA,MAAA8B,IAAA,OAAAlC,KAAA,CAAAiC,GAAA,GAAA7B,CAAA,GAAA6B,GAAA,EAAA7B,CAAA,IAAA8B,IAAA,CAAA9B,CAAA,IAAA4B,GAAA,CAAA5B,CAAA,UAAA8B,IAAA;AAIjC,SAASC,OAAOA,CAACC,IAAa,EAAEC,OAAO,EAAwB;EACpE,IAAMC,QAAQ,GAAG,EAAE;EACnB,IAAIF,IAAI,CAACG,IAAI,KAAK,mBAAmB,EAAE;IACrC,KAAK,IAAInC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgC,IAAI,CAACE,QAAQ,CAACnC,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC7CoC,cAAc,CAACF,QAAQ,EAAEF,IAAI,CAACE,QAAQ,CAAClC,CAAC,CAAC,EAAEiC,OAAO,EAAEjC,CAAC,CAAC;IACxD;EACF,CAAC,MAAM,IAAIgC,IAAI,CAACG,IAAI,KAAK,SAAS,EAAE;IAClCC,cAAc,CAACF,QAAQ,EAAEF,IAAI,EAAEC,OAAO,CAAC;EACzC,CAAC,MAAM;IAELG,cAAc,CAACF,QAAQ,EAAE;MAACG,QAAQ,EAAEL;IAAI,CAAC,EAAEC,OAAO,CAAC;EACrD;EAEA,OAAOC,QAAQ;AACjB;AASA,SAASE,cAAcA,CACrBF,QAA8B,EAC9BI,OAAgB,EAChBL,OAA8B,EAC9BM,KAAa,EACP;EACN,IAAI,CAACD,OAAO,CAACD,QAAQ,EAAE;IACrB;EACF;EAEA,IAAMG,MAAM,GAAGF,OAAO,CAACD,QAAQ,CAACI,WAAW;EAC3C,IAAMN,IAAI,GAAGG,OAAO,CAACD,QAAQ,CAACF,IAAI;EAClC,IAAMO,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACX,OAAO,CAACS,SAAS,IAAI,CAAC,CAAC,IAAIT,OAAO,CAACY,OAAO,IAAIZ,OAAO,CAACa,MAAM,CAAC,EAAE,CAAC,CAAC;EAC5F,IAAIT,QAAQ,GAAG,EAAE;EACjB,IAAIU,EAAE,GAAGT,OAAO,CAACS,EAAE;EACnB,IAAId,OAAO,CAACe,SAAS,EAAE;IACrBD,EAAE,GAAGT,OAAO,CAACW,UAAU,CAAChB,OAAO,CAACe,SAAS,CAAC;EAC5C,CAAC,MAAM,IAAIf,OAAO,CAACiB,UAAU,EAAE;IAC7BH,EAAE,GAAGR,KAAK,IAAI,CAAC;EACjB;EACA,IAAIJ,IAAI,KAAK,OAAO,EAAE;IACpBgB,YAAY,CAACX,MAAM,EAAEH,QAAQ,CAAC;EAChC,CAAC,MAAM,IAAIF,IAAI,KAAK,YAAY,EAAE;IAAA,IAAAiB,SAAA,GAAA9D,0BAAA,CAChBkD,MAAM;MAAAa,KAAA;IAAA;MAAtB,KAAAD,SAAA,CAAAlD,CAAA,MAAAmD,KAAA,GAAAD,SAAA,CAAAjD,CAAA,IAAAC,IAAA,GAAwB;QAAA,IAAbkD,CAAC,GAAAD,KAAA,CAAAhD,KAAA;QACV8C,YAAY,CAACG,CAAC,EAAEjB,QAAQ,CAAC;MAC3B;IAAC,SAAAzB,GAAA;MAAAwC,SAAA,CAAA9C,CAAA,CAAAM,GAAA;IAAA;MAAAwC,SAAA,CAAA5C,CAAA;IAAA;EACH,CAAC,MAAM,IAAI2B,IAAI,KAAK,YAAY,EAAE;IAChCoB,WAAW,CAACf,MAAM,EAAEH,QAAQ,EAAEK,SAAS,EAAE,KAAK,CAAC;EACjD,CAAC,MAAM,IAAIP,IAAI,KAAK,iBAAiB,EAAE;IACrC,IAAIF,OAAO,CAACuB,WAAW,EAAE;MAAA,IAAAC,UAAA,GAAAnE,0BAAA,CAEJkD,MAAM;QAAAkB,MAAA;MAAA;QAAzB,KAAAD,UAAA,CAAAvD,CAAA,MAAAwD,MAAA,GAAAD,UAAA,CAAAtD,CAAA,IAAAC,IAAA,GAA2B;UAAA,IAAhBuD,IAAI,GAAAD,MAAA,CAAArD,KAAA;UACbgC,QAAQ,GAAG,EAAE;UACbkB,WAAW,CAACI,IAAI,EAAEtB,QAAQ,EAAEK,SAAS,EAAE,KAAK,CAAC;UAC7CR,QAAQ,CAAC0B,IAAI,CAAC,IAAAC,sBAAa,EAACd,EAAE,EAAE,YAAY,EAAEV,QAAQ,EAAEC,OAAO,CAACW,UAAU,CAAC,CAAC;QAC9E;MAAC,SAAArC,GAAA;QAAA6C,UAAA,CAAAnD,CAAA,CAAAM,GAAA;MAAA;QAAA6C,UAAA,CAAAjD,CAAA;MAAA;MACD;IACF,CAAC,MAAM;MACLsD,YAAY,CAACtB,MAAM,EAAEH,QAAQ,EAAEK,SAAS,EAAE,KAAK,CAAC;IAClD;EACF,CAAC,MAAM,IAAIP,IAAI,KAAK,SAAS,EAAE;IAC7B2B,YAAY,CAACtB,MAAM,EAAEH,QAAQ,EAAEK,SAAS,EAAE,IAAI,CAAC;EACjD,CAAC,MAAM,IAAIP,IAAI,KAAK,cAAc,EAAE;IAAA,IAAA4B,UAAA,GAAAzE,0BAAA,CACZkD,MAAM;MAAAwB,MAAA;IAAA;MAA5B,KAAAD,UAAA,CAAA7D,CAAA,MAAA8D,MAAA,GAAAD,UAAA,CAAA5D,CAAA,IAAAC,IAAA,GAA8B;QAAA,IAAnB6D,OAAO,GAAAD,MAAA,CAAA3D,KAAA;QAChB,IAAM6D,UAAU,GAAG,EAAE;QACrBJ,YAAY,CAACG,OAAO,EAAEC,UAAU,EAAExB,SAAS,EAAE,IAAI,CAAC;QAClDL,QAAQ,CAACuB,IAAI,CAACM,UAAU,CAAC;MAC3B;IAAC,SAAAtD,GAAA;MAAAmD,UAAA,CAAAzD,CAAA,CAAAM,GAAA;IAAA;MAAAmD,UAAA,CAAAvD,CAAA;IAAA;EACH,CAAC,MAAM,IAAI2B,IAAI,KAAK,oBAAoB,EAAE;IAAA,IAAAgC,UAAA,GAAA7E,0BAAA,CACXgD,OAAO,CAACD,QAAQ,CAAC+B,UAAU;MAAAC,MAAA;IAAA;MAAxD,KAAAF,UAAA,CAAAjE,CAAA,MAAAmE,MAAA,GAAAF,UAAA,CAAAhE,CAAA,IAAAC,IAAA,GAA0D;QAAA,IAA/CkE,cAAc,GAAAD,MAAA,CAAAhE,KAAA;QACvB+B,cAAc,CACZF,QAAQ,EACR;UACEa,EAAE,EAAFA,EAAE;UACFV,QAAQ,EAAEiC,cAAc;UACxBrB,UAAU,EAAEX,OAAO,CAACW;QACtB,CAAC,EACDhB,OAAO,EACPM,KACF,CAAC;MACH;IAAC,SAAA3B,GAAA;MAAAuD,UAAA,CAAA7D,CAAA,CAAAM,GAAA;IAAA;MAAAuD,UAAA,CAAA3D,CAAA;IAAA;IACD;EACF,CAAC,MAAM;IACL,MAAM,IAAI+D,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EAEArC,QAAQ,CAAC0B,IAAI,CAAC,IAAAC,sBAAa,EAACd,EAAE,EAAEZ,IAAI,EAAEE,QAAQ,EAAEC,OAAO,CAACW,UAAU,CAAC,CAAC;AACtE;AAEA,SAASE,YAAYA,CAACX,MAAM,EAAEgC,GAAG,EAAQ;EACvCA,GAAG,CAACZ,IAAI,CAACa,QAAQ,CAACjC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAEkC,QAAQ,CAAClC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACvD;AAEA,SAASe,WAAWA,CAACoB,IAAc,EAAEH,GAAG,EAAE9B,SAAiB,EAAEkC,SAAkB,EAAQ;EACrF,IAAIC,EAAE,EAAEC,EAAE;EACV,IAAIC,IAAI,GAAG,CAAC;EAEZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAAC5E,MAAM,EAAEiF,CAAC,EAAE,EAAE;IACpC,IAAMC,CAAC,GAAGR,QAAQ,CAACE,IAAI,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAME,CAAC,GAAGR,QAAQ,CAACC,IAAI,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE9BR,GAAG,CAACZ,IAAI,CAACqB,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC;IAEjB,IAAIF,CAAC,GAAG,CAAC,EAAE;MACT,IAAIJ,SAAS,EAAE;QACbG,IAAI,IAAI,CAACF,EAAE,GAAGK,CAAC,GAAGD,CAAC,GAAGH,EAAE,IAAI,CAAC;MAC/B,CAAC,MAAM;QACLC,IAAI,IAAIpC,IAAI,CAACwC,IAAI,CAACxC,IAAI,CAACC,GAAG,CAACqC,CAAC,GAAGJ,EAAE,EAAE,CAAC,CAAC,GAAGlC,IAAI,CAACC,GAAG,CAACsC,CAAC,GAAGJ,EAAE,EAAE,CAAC,CAAC,CAAC;MAC9D;IACF;IACAD,EAAE,GAAGI,CAAC;IACNH,EAAE,GAAGI,CAAC;EACR;EAEA,IAAME,IAAI,GAAGZ,GAAG,CAACzE,MAAM,GAAG,CAAC;EAC3ByE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACV,IAAAa,kBAAQ,EAACb,GAAG,EAAE,CAAC,EAAEY,IAAI,EAAE1C,SAAS,CAAC;EACjC8B,GAAG,CAACY,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;EAEjBZ,GAAG,CAACO,IAAI,GAAGpC,IAAI,CAAC2C,GAAG,CAACP,IAAI,CAAC;EACzBP,GAAG,CAACe,KAAK,GAAG,CAAC;EACbf,GAAG,CAACgB,GAAG,GAAGhB,GAAG,CAACO,IAAI;AACpB;AAEA,SAASjB,YAAYA,CAAC2B,KAAiB,EAAEjB,GAAG,EAAE9B,SAAiB,EAAEkC,SAAkB,EAAQ;EACzF,KAAK,IAAI5E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyF,KAAK,CAAC1F,MAAM,EAAEC,CAAC,EAAE,EAAE;IACrC,IAAM0F,IAAI,GAAG,EAAE;IACfnC,WAAW,CAACkC,KAAK,CAACzF,CAAC,CAAC,EAAE0F,IAAI,EAAEhD,SAAS,EAAEkC,SAAS,CAAC;IACjDJ,GAAG,CAACZ,IAAI,CAAC8B,IAAI,CAAC;EAChB;AACF;AAEA,SAASjB,QAAQA,CAACQ,CAAS,EAAU;EACnC,OAAOA,CAAC,GAAG,GAAG,GAAG,GAAG;AACtB;AAEA,SAASP,QAAQA,CAACQ,CAAS,EAAU;EACnC,IAAMS,GAAG,GAAGhD,IAAI,CAACgD,GAAG,CAAET,CAAC,GAAGvC,IAAI,CAACiD,EAAE,GAAI,GAAG,CAAC;EACzC,IAAMC,EAAE,GAAG,GAAG,GAAI,IAAI,GAAGlD,IAAI,CAACmD,GAAG,CAAC,CAAC,CAAC,GAAGH,GAAG,KAAK,CAAC,GAAGA,GAAG,CAAC,CAAC,GAAIhD,IAAI,CAACiD,EAAE;EACnE,OAAOC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAGA,EAAE,GAAG,CAAC,GAAG,CAAC,GAAGA,EAAE;AACrC"}