{"version":3,"file":"frame-state.js","names":["_core","require","_culling","_geospatial","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","scratchVector","Vector3","scratchPosition","cullingVolume","CullingVolume","Plane","getFrameState","viewport","frameNumber","cameraDirection","cameraUp","height","metersPerUnit","distanceScales","viewportCenterCartesian","worldToCartesian","center","enuToFixedTransform","Ellipsoid","WGS84","eastNorthUpToFixedFrame","cameraPositionCartographic","unprojectPosition","cameraPosition","cameraPositionCartesian","cartographicToCartesian","cameraDirectionCartesian","transformAsVector","scale","normalize","cameraUpCartesian","commonSpacePlanesToWGS84","ViewportClass","longitude","latitude","width","bearing","zoom","topDownViewport","pitch","camera","position","direction","up","sseDenominator","limitSelectedTiles","tiles","frameState","maximumTilesSelected","tuples","_frameState$viewport","viewportLongitude","viewportLatitude","_iterator","entries","_step","_step$value","_slicedToArray2","default","index","tile","_tile$header$mbs","header","mbs","deltaLon","Math","abs","deltaLat","distance","sqrt","push","tuplesSorted","sort","a","b","selectedTiles","unselectedTiles","frustumPlanes","getFrustumPlanes","nearCenterCommon","closestPointOnPlane","near","nearCenterCartesian","cameraCartesian","planes","fromPointNormal","copy","subtract","dir","plane","posCommon","cartesianPos","refPoint","out","arguments","undefined","distanceToRef","normal","dot","add","point","cartographicPos"],"sources":["../../../../src/tileset/helpers/frame-state.ts"],"sourcesContent":["import {Tile3D} from '@loaders.gl/tiles';\nimport {Vector3} from '@math.gl/core';\nimport {CullingVolume, Plane} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {GeospatialViewport, Viewport} from '../../types';\n\nexport type FrameState = {\n  camera: {\n    position: number[];\n    direction: number[];\n    up: number[];\n  };\n  viewport: GeospatialViewport;\n  topDownViewport: GeospatialViewport; // Use it to calculate projected radius for a tile\n  height: number;\n  cullingVolume: CullingVolume;\n  frameNumber: number; // TODO: This can be the same between updates, what number is unique for between updates?\n  sseDenominator: number; // Assumes fovy = 60 degrees\n};\n\nconst scratchVector = new Vector3();\nconst scratchPosition = new Vector3();\nconst cullingVolume = new CullingVolume([\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane()\n]);\n\n// Extracts a frame state appropriate for tile culling from a deck.gl viewport\n// TODO - this could likely be generalized and merged back into deck.gl for other culling scenarios\nexport function getFrameState(viewport: GeospatialViewport, frameNumber: number): FrameState {\n  // Traverse and and request. Update _selectedTiles so that we know what to render.\n  // Traverse and and request. Update _selectedTiles so that we know what to render.\n  const {cameraDirection, cameraUp, height} = viewport;\n  const {metersPerUnit} = viewport.distanceScales;\n\n  // TODO - Ellipsoid.eastNorthUpToFixedFrame() breaks on raw array, create a Vector.\n  // TODO - Ellipsoid.eastNorthUpToFixedFrame() takes a cartesian, is that intuitive?\n  const viewportCenterCartesian = worldToCartesian(viewport, viewport.center);\n  const enuToFixedTransform = Ellipsoid.WGS84.eastNorthUpToFixedFrame(viewportCenterCartesian);\n\n  const cameraPositionCartographic = viewport.unprojectPosition(viewport.cameraPosition);\n  const cameraPositionCartesian = Ellipsoid.WGS84.cartographicToCartesian(\n    cameraPositionCartographic,\n    new Vector3()\n  );\n\n  // These should still be normalized as the transform has scale 1 (goes from meters to meters)\n  const cameraDirectionCartesian = new Vector3(\n    // @ts-ignore\n    enuToFixedTransform.transformAsVector(new Vector3(cameraDirection).scale(metersPerUnit))\n  ).normalize();\n  const cameraUpCartesian = new Vector3(\n    // @ts-ignore\n    enuToFixedTransform.transformAsVector(new Vector3(cameraUp).scale(metersPerUnit))\n  ).normalize();\n\n  commonSpacePlanesToWGS84(viewport);\n\n  const ViewportClass = viewport.constructor;\n  const {longitude, latitude, width, bearing, zoom} = viewport;\n  // @ts-ignore\n  const topDownViewport = new ViewportClass({\n    longitude,\n    latitude,\n    height,\n    width,\n    bearing,\n    zoom,\n    pitch: 0\n  });\n\n  // TODO: make a file/class for frameState and document what needs to be attached to this so that traversal can function\n  return {\n    camera: {\n      position: cameraPositionCartesian,\n      direction: cameraDirectionCartesian,\n      up: cameraUpCartesian\n    },\n    viewport,\n    topDownViewport,\n    height,\n    cullingVolume,\n    frameNumber, // TODO: This can be the same between updates, what number is unique for between updates?\n    sseDenominator: 1.15 // Assumes fovy = 60 degrees\n  };\n}\n\n/**\n * Limit `tiles` array length with `maximumTilesSelected` number.\n * The criteria for this filtering is distance of a tile center\n * to the `frameState.viewport`'s longitude and latitude\n * @param tiles - tiles array to filter\n * @param frameState - frameState to calculate distances\n * @param maximumTilesSelected - maximal amount of tiles in the output array\n * @returns new tiles array\n */\nexport function limitSelectedTiles(\n  tiles: Tile3D[],\n  frameState: FrameState,\n  maximumTilesSelected: number\n): [Tile3D[], Tile3D[]] {\n  if (maximumTilesSelected === 0 || tiles.length <= maximumTilesSelected) {\n    return [tiles, []];\n  }\n  // Accumulate distances in couples array: [tileIndex: number, distanceToViewport: number]\n  const tuples: [number, number][] = [];\n  const {longitude: viewportLongitude, latitude: viewportLatitude} = frameState.viewport;\n  for (const [index, tile] of tiles.entries()) {\n    const [longitude, latitude] = tile.header.mbs;\n    const deltaLon = Math.abs(viewportLongitude - longitude);\n    const deltaLat = Math.abs(viewportLatitude - latitude);\n    const distance = Math.sqrt(deltaLat * deltaLat + deltaLon * deltaLon);\n    tuples.push([index, distance]);\n  }\n  const tuplesSorted = tuples.sort((a, b) => a[1] - b[1]);\n  const selectedTiles: Tile3D[] = [];\n  for (let i = 0; i < maximumTilesSelected; i++) {\n    selectedTiles.push(tiles[tuplesSorted[i][0]]);\n  }\n  const unselectedTiles: Tile3D[] = [];\n  for (let i = maximumTilesSelected; i < tuplesSorted.length; i++) {\n    unselectedTiles.push(tiles[tuplesSorted[i][0]]);\n  }\n\n  return [selectedTiles, unselectedTiles];\n}\n\nfunction commonSpacePlanesToWGS84(viewport) {\n  // Extract frustum planes based on current view.\n  const frustumPlanes = viewport.getFrustumPlanes();\n\n  // Get the near/far plane centers\n  const nearCenterCommon = closestPointOnPlane(frustumPlanes.near, viewport.cameraPosition);\n  const nearCenterCartesian = worldToCartesian(viewport, nearCenterCommon);\n  const cameraCartesian = worldToCartesian(viewport, viewport.cameraPosition, scratchPosition);\n\n  let i = 0;\n  cullingVolume.planes[i++].fromPointNormal(\n    nearCenterCartesian,\n    scratchVector.copy(nearCenterCartesian).subtract(cameraCartesian)\n  );\n\n  for (const dir in frustumPlanes) {\n    if (dir === 'near') {\n      continue; // eslint-disable-line no-continue\n    }\n    const plane = frustumPlanes[dir];\n    const posCommon = closestPointOnPlane(plane, nearCenterCommon, scratchPosition);\n    const cartesianPos = worldToCartesian(viewport, posCommon, scratchPosition);\n\n    cullingVolume.planes[i++].fromPointNormal(\n      cartesianPos,\n      // Want the normal to point into the frustum since that's what culling expects\n      scratchVector.copy(nearCenterCartesian).subtract(cartesianPos)\n    );\n  }\n}\n\nfunction closestPointOnPlane(\n  plane: {distance: number; normal: Vector3},\n  refPoint: [number, number, number] | Vector3,\n  out: Vector3 = new Vector3()\n): Vector3 {\n  const distanceToRef = plane.normal.dot(refPoint);\n  out\n    .copy(plane.normal)\n    .scale(plane.distance - distanceToRef)\n    .add(refPoint);\n  return out;\n}\n\nfunction worldToCartesian(\n  viewport: Viewport,\n  point: number[] | Vector3,\n  out: Vector3 = new Vector3()\n): Vector3 {\n  const cartographicPos = viewport.unprojectPosition(point);\n  return Ellipsoid.WGS84.cartographicToCartesian(cartographicPos, out);\n}\n"],"mappings":"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"}