{"version":3,"file":"tileset-traverser.js","names":["_managedArray","require","_constants","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","DEFAULT_PROPS","loadSiblings","skipLevelOfDetail","maximumScreenSpaceError","updateTransforms","onTraversalEnd","viewportTraversersMap","basePath","exports","TilesetTraverser","options","_classCallCheck2","Date","getTime","ManagedArray","_createClass2","traversalFinished","frameState","traverse","root","reset","updateTile","_frameNumber","frameNumber","executeTraversal","requestedTiles","selectedTiles","emptyTiles","_traversalStack","_emptyTraversalStack","stack","_selectionDepth","tile","pop","shouldRefine","canTraverse","updateChildTiles","updateAndPushChildren","hasRenderContent","parent","parentRefines","Boolean","_shouldRefine","stoppedRefining","id","loadTile","selectTile","refine","TILE_REFINEMENT","ADD","REPLACE","touchTile","newTime","lastUpdate","updateDebounceTime","children","_iterator","_step","child","depth","_this$options","sort","compareDistanceToCamera","bind","checkRefines","hasVisibleChild","refines","_iterator2","_step2","isVisibleAndInRequestVolume","find","delete","childRefines","_inRequestVolume","executeEmptyTraversal","contentAvailable","updateTileVisibility","shouldSelectTile","_selectedFrame","shouldLoadTile","_requestedFrame","_priority","_getPriority","tileset","_cache","touch","_touchedFrame","useParentMetric","undefined","ignoreVisibility","hasChildren","hasTilesetContent","contentExpired","hasUnloadedContent","screenSpaceError","_screenSpaceError","getScreenSpaceError","viewportIds","viewport","updateVisibility","b","a","_distanceToCamera","anyChildrenVisible","anyVisible","_iterator3","_step3","allDescendantsLoaded","_iterator4","_step4"],"sources":["../../../src/tileset/tileset-traverser.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {Tile3D} from './tile-3d';\nimport {ManagedArray} from '../utils/managed-array';\nimport {TILE_REFINEMENT} from '../constants';\nimport {FrameState} from './helpers/frame-state';\n\nexport type TilesetTraverserProps = {\n  loadSiblings?: boolean;\n  skipLevelOfDetail?: boolean;\n  updateTransforms?: boolean;\n  maximumScreenSpaceError?: number;\n  onTraversalEnd?: (frameState) => any;\n  viewportTraversersMap?: Record<string, any>;\n  basePath?: string;\n};\n\nexport const DEFAULT_PROPS: Required<TilesetTraverserProps> = {\n  loadSiblings: false,\n  skipLevelOfDetail: false,\n  maximumScreenSpaceError: 2,\n  updateTransforms: true,\n  onTraversalEnd: () => {},\n  viewportTraversersMap: {},\n  basePath: ''\n};\n\nexport class TilesetTraverser {\n  options: Required<TilesetTraverserProps>;\n\n  // fulfill in traverse call\n  root: any = null;\n\n  // tiles should be rendered\n  selectedTiles: Record<string, Tile3D> = {};\n  // tiles should be loaded from server\n  requestedTiles: Record<string, Tile3D> = {};\n  // tiles does not have render content\n  emptyTiles: Record<string, Tile3D> = {};\n\n  protected lastUpdate: number = new Date().getTime();\n  protected readonly updateDebounceTime = 1000;\n  /** temporary storage to hold the traversed tiles during a traversal */\n  protected _traversalStack = new ManagedArray();\n  protected _emptyTraversalStack = new ManagedArray();\n  /** set in every traverse cycle */\n  protected _frameNumber: number | null = null;\n\n  // RESULT\n  protected traversalFinished(frameState: FrameState): boolean {\n    return true;\n  }\n\n  // TODO nested props\n  constructor(options: TilesetTraverserProps) {\n    this.options = {...DEFAULT_PROPS, ...options};\n  }\n\n  // tiles should be visible\n  traverse(root, frameState, options) {\n    this.root = root; // for root screen space error\n    this.options = {...this.options, ...options};\n\n    // reset result\n    this.reset();\n\n    // update tile (visibility and expiration)\n    this.updateTile(root, frameState);\n\n    this._frameNumber = frameState.frameNumber;\n    this.executeTraversal(root, frameState);\n  }\n\n  reset() {\n    this.requestedTiles = {};\n    this.selectedTiles = {};\n    this.emptyTiles = {};\n    this._traversalStack.reset();\n    this._emptyTraversalStack.reset();\n  }\n\n  /**\n   * Execute traverse\n   * Depth-first traversal that traverses all visible tiles and marks tiles for selection.\n   * If skipLevelOfDetail is off then a tile does not refine until all children are loaded.\n   * This is the traditional replacement refinement approach and is called the base traversal.\n   * Tiles that have a greater screen space error than the base screen space error are part of the base traversal,\n   * all other tiles are part of the skip traversal. The skip traversal allows for skipping levels of the tree\n   * and rendering children and parent tiles simultaneously.\n   */\n  /* eslint-disable-next-line complexity, max-statements */\n  executeTraversal(root, frameState: FrameState): void {\n    // stack to store traversed tiles, only visible tiles should be added to stack\n    // visible: visible in the current view frustum\n    const stack = this._traversalStack;\n    root._selectionDepth = 1;\n\n    stack.push(root);\n    while (stack.length > 0) {\n      // 1. pop tile\n      const tile = stack.pop();\n\n      // 2. check if tile needs to be refine, needs refine if a tile's LoD is not sufficient and tile has available children (available content)\n      let shouldRefine = false;\n      if (this.canTraverse(tile, frameState)) {\n        this.updateChildTiles(tile, frameState);\n        shouldRefine = this.updateAndPushChildren(\n          tile,\n          frameState,\n          stack,\n          tile.hasRenderContent ? tile._selectionDepth + 1 : tile._selectionDepth\n        );\n      }\n\n      // 3. decide if should render (select) this tile\n      //   - tile does not have render content\n      //   - tile has render content and tile is `add` type (pointcloud)\n      //   - tile has render content and tile is `replace` type (photogrammetry) and can't refine any further\n      const parent = tile.parent;\n      const parentRefines = Boolean(!parent || parent._shouldRefine);\n      const stoppedRefining = !shouldRefine;\n\n      if (!tile.hasRenderContent) {\n        this.emptyTiles[tile.id] = tile;\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n        // additive tiles\n      } else if (tile.refine === TILE_REFINEMENT.ADD) {\n        // Additive tiles are always loaded and selected\n        this.loadTile(tile, frameState);\n        this.selectTile(tile, frameState);\n\n        // replace tiles\n      } else if (tile.refine === TILE_REFINEMENT.REPLACE) {\n        // Always load tiles in the base traversal\n        // Select tiles that can't refine further\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n      }\n\n      // 3. update cache, most recent touched tiles have higher priority to be fetched from server\n      this.touchTile(tile, frameState);\n\n      // 4. update tile refine prop and parent refinement status to trickle down to the descendants\n      tile._shouldRefine = shouldRefine && parentRefines;\n    }\n\n    const newTime = new Date().getTime();\n    if (this.traversalFinished(frameState) || newTime - this.lastUpdate > this.updateDebounceTime) {\n      this.lastUpdate = newTime;\n      this.options.onTraversalEnd(frameState);\n    }\n  }\n\n  updateChildTiles(tile: Tile3D, frameState: FrameState): void {\n    const children = tile.children;\n    for (const child of children) {\n      this.updateTile(child, frameState);\n    }\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAndPushChildren(tile: Tile3D, frameState: FrameState, stack, depth): boolean {\n    const {loadSiblings, skipLevelOfDetail} = this.options;\n\n    const children = tile.children;\n\n    // sort children tiles\n    children.sort(this.compareDistanceToCamera.bind(this));\n\n    // For traditional replacement refinement only refine if all children are loaded.\n    // Empty tiles are exempt since it looks better if children stream in as they are loaded to fill the empty space.\n    const checkRefines =\n      tile.refine === TILE_REFINEMENT.REPLACE && tile.hasRenderContent && !skipLevelOfDetail;\n\n    let hasVisibleChild = false;\n    let refines = true;\n\n    for (const child of children) {\n      child._selectionDepth = depth;\n      if (child.isVisibleAndInRequestVolume) {\n        if (stack.find(child)) {\n          stack.delete(child);\n        }\n        stack.push(child);\n        hasVisibleChild = true;\n      } else if (checkRefines || loadSiblings) {\n        // Keep non-visible children loaded since they are still needed before the parent can refine.\n        // Or loadSiblings is true so always load tiles regardless of visibility.\n        this.loadTile(child, frameState);\n        this.touchTile(child, frameState);\n      }\n\n      if (checkRefines) {\n        let childRefines;\n        if (!child._inRequestVolume) {\n          childRefines = false;\n        } else if (!child.hasRenderContent) {\n          childRefines = this.executeEmptyTraversal(child, frameState);\n        } else {\n          childRefines = child.contentAvailable;\n        }\n        refines = refines && childRefines;\n\n        if (!refines) {\n          return false;\n        }\n      }\n    }\n\n    if (!hasVisibleChild) {\n      refines = false;\n    }\n    return refines;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  updateTile(tile: Tile3D, frameState: FrameState): void {\n    this.updateTileVisibility(tile, frameState);\n  }\n\n  // tile to render in the browser\n  selectTile(tile: Tile3D, frameState: FrameState): void {\n    if (this.shouldSelectTile(tile)) {\n      // The tile can be selected right away and does not require traverseAndSelect\n      tile._selectedFrame = frameState.frameNumber;\n      this.selectedTiles[tile.id] = tile;\n    }\n  }\n\n  // tile to load from server\n  loadTile(tile: Tile3D, frameState: FrameState): void {\n    if (this.shouldLoadTile(tile)) {\n      tile._requestedFrame = frameState.frameNumber;\n      tile._priority = tile._getPriority();\n      this.requestedTiles[tile.id] = tile;\n    }\n  }\n\n  // cache tile\n  touchTile(tile: Tile3D, frameState: FrameState): void {\n    tile.tileset._cache.touch(tile);\n    tile._touchedFrame = frameState.frameNumber;\n  }\n\n  // tile should be visible\n  // tile should have children\n  // tile LoD (level of detail) is not sufficient under current viewport\n  canTraverse(\n    tile: Tile3D,\n    frameState: FrameState,\n    useParentMetric: boolean = false,\n    ignoreVisibility: boolean = false\n  ): boolean {\n    if (!tile.hasChildren) {\n      return false;\n    }\n\n    // cesium specific\n    if (tile.hasTilesetContent) {\n      // Traverse external this to visit its root tile\n      // Don't traverse if the subtree is expired because it will be destroyed\n      return !tile.contentExpired;\n    }\n\n    if (!ignoreVisibility && !tile.isVisibleAndInRequestVolume) {\n      return false;\n    }\n\n    return this.shouldRefine(tile, frameState, useParentMetric);\n  }\n\n  shouldLoadTile(tile: Tile3D): boolean {\n    // if request tile is in current frame\n    // and has unexpired render content\n    return tile.hasUnloadedContent || tile.contentExpired;\n  }\n\n  shouldSelectTile(tile: Tile3D): boolean {\n    // if select tile is in current frame\n    // and content available\n    return tile.contentAvailable && !this.options.skipLevelOfDetail;\n  }\n\n  /** Decide if tile LoD (level of detail) is not sufficient under current viewport */\n  shouldRefine(tile: Tile3D, frameState: FrameState, useParentMetric: boolean = false): boolean {\n    let screenSpaceError = tile._screenSpaceError;\n    if (useParentMetric) {\n      screenSpaceError = tile.getScreenSpaceError(frameState, true);\n    }\n\n    return screenSpaceError > this.options.maximumScreenSpaceError;\n  }\n\n  updateTileVisibility(tile: Tile3D, frameState: FrameState): void {\n    const viewportIds: string[] = [];\n    if (this.options.viewportTraversersMap) {\n      for (const key in this.options.viewportTraversersMap) {\n        const value = this.options.viewportTraversersMap[key];\n        if (value === frameState.viewport.id) {\n          viewportIds.push(key);\n        }\n      }\n    } else {\n      viewportIds.push(frameState.viewport.id);\n    }\n    tile.updateVisibility(frameState, viewportIds);\n  }\n\n  // UTILITIES\n\n  compareDistanceToCamera(b: Tile3D, a: Tile3D): number {\n    return b._distanceToCamera - a._distanceToCamera;\n  }\n\n  anyChildrenVisible(tile: Tile3D, frameState: FrameState): boolean {\n    let anyVisible = false;\n    for (const child of tile.children) {\n      // @ts-expect-error\n      child.updateVisibility(frameState);\n      // @ts-expect-error\n      anyVisible = anyVisible || child.isVisibleAndInRequestVolume;\n    }\n    return anyVisible;\n  }\n\n  // Depth-first traversal that checks if all nearest descendants with content are loaded.\n  // Ignores visibility.\n  executeEmptyTraversal(root: Tile3D, frameState: FrameState): boolean {\n    let allDescendantsLoaded = true;\n    const stack = this._emptyTraversalStack;\n\n    stack.push(root);\n\n    while (stack.length > 0 && allDescendantsLoaded) {\n      const tile = stack.pop();\n\n      this.updateTile(tile, frameState);\n\n      if (!tile.isVisibleAndInRequestVolume) {\n        // Load tiles that aren't visible since they are still needed for the parent to refine\n        this.loadTile(tile, frameState);\n      }\n\n      this.touchTile(tile, frameState);\n\n      // Only traverse if the tile is empty - traversal stop at descendants with content\n      const traverse = !tile.hasRenderContent && this.canTraverse(tile, frameState, false, true);\n\n      if (traverse) {\n        const children = tile.children;\n        for (const child of children) {\n          // eslint-disable-next-line max-depth\n          if (stack.find(child)) {\n            stack.delete(child);\n          }\n          stack.push(child);\n        }\n      } else if (!tile.contentAvailable) {\n        allDescendantsLoaded = false;\n      }\n    }\n\n    return allDescendantsLoaded;\n  }\n}\n"],"mappings":"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"}