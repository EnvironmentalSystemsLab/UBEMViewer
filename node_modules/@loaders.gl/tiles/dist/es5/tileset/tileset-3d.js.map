{"version":3,"file":"tileset-3d.js","names":["_core","require","_geospatial","_stats","_loaderUtils","_tilesetCache","_transformUtils","_frameState","_zoom","_tile3d","_constants","_tilesetTraverser","_tileset3dTraverser","_i3sTilesetTraverser","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","DEFAULT_PROPS","description","ellipsoid","Ellipsoid","WGS84","modelMatrix","Matrix4","throttleRequests","maxRequests","maximumMemoryUsage","maximumTilesSelected","debounceTime","onTileLoad","onTileUnload","onTileError","onTraversalComplete","selectedTiles","contentLoader","undefined","viewDistanceScale","maximumScreenSpaceError","loadTiles","updateTransforms","viewportTraversersMap","loadOptions","fetch","attributions","basePath","i3s","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","Tileset3D","tileset","options","_classCallCheck2","draco","meshopt","dds","ktx2","TilesetCache","loader","type","url","path","dirname","lodMetricType","lodMetricValue","refine","root","_traverser","_initializeTraverser","_requestScheduler","RequestScheduler","stats","Stats","id","_initializeStats","tilesetInitializationPromise","_initializeTileSet","_createClass2","destroy","_destroy","isLoaded","_pendingCount","_frameNumber","_requestedTiles","get","values","_tiles","URLSearchParams","_queryParams","setProps","props","setOptions","getTileUrl","tilePath","isDataUrl","startsWith","concat","includes","queryParams","hasExtension","extensionName","Boolean","_extensionsUsed","indexOf","update","_this","viewports","then","lastUpdatedVieports","doUpdate","_selectTiles","_asyncToGenerator2","_regenerator","mark","_callee","_this2","_args","wrap","_callee$","_context","prev","updatePromise","Promise","resolve","setTimeout","abrupt","stop","selectTiles","traverseCounter","preparedViewports","_cache","reset","viewportsToTraverse","_iterator","_step","viewport","_needTraverse","_iterator2","_step2","roots","_initializeTileHeaders","frameState","getFrameState","traverse","viewportId","traverserId","_onTraversalEnd","frameStateData","_emptyTiles","currentFrameStateData","_limitSelectedTiles","limitSelectedTiles","_limitSelectedTiles2","_slicedToArray2","filteredSelectedTiles","unselectedTiles","_iterator3","_step3","tile","unselect","requestedTiles","emptyTiles","_updateTiles","frameStateKey","frameStateDataValue","_iterator4","_step4","_loadTiles","_unloadTiles","_updateStats","_tilesChanged","oldSelectedTiles","set1","Set","map","t","set2","changed","x","has","_iterator5","_step5","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","_iterator6","_step6","contentAvailable","content","pointCount","vertexCount","count","_initializeTileSet2","_callee2","tilesetJson","_callee2$","_context2","TILESET_TYPE","I3S","calculateViewPropsI3S","sent","TILES3D","_initializeTiles3DTileset","calculateViewPropsTiles3D","_initializeI3STileset","_x","_this$tileset$store","fullExtent","xmin","xmax","ymin","ymax","zmin","zmax","cartographicCenter","Vector3","cartesianCenter","cartographicToCartesian","zoom","getZoomFromFullExtent","extent","store","_extent","getZoomFromExtent","console","warn","center","boundingVolume","cartesianToCartographic","radii","getZoomFromBoundingVolume","parentTileHeader","rootTile","Tile3D","children","depth","stack","pop","incrementCount","header","_iterator7","_step7","_childTile$contentUrl","childHeader","childTile","contentUrl","URL","session","searchParams","TraverserClass","Tileset3DTraverser","I3STilesetTraverser","TilesetTraverser","onTraversalEnd","bind","_destroyTileHeaders","parentTile","_destroySubtree","_loadTile2","_callee3","loaded","_callee3$","_context3","_onStartTileLoading","loadContent","t0","_onTileLoadError","Error","_onEndTileLoading","_onTileLoad","finish","_x2","error","message","_this$tileset","_this$tileset$nodePag","nodesInNodePages","nodePagesTile","addCount","calculateTransformProps","updateContentTypes","_addTileToCache","isDracoGeometry","contentFormats","textureFormat","_tile$content","_ref","gltf","_ref$extensionsRemove","extensionsRemoved","decrementCount","add","_updateCacheStats","gpuMemoryUsageInBytes","unloadContent","_iterator8","_step8","child","_destroyTile","_iterator9","_step9","unloadTile","queryString","fromEntries","entries","asset","version","v","tilesetVersion","credits","properties","geometricError","extensionsUsed","extras","token","exports"],"sources":["../../../src/tileset/tileset-3d.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {RequestScheduler, path, LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {TilesetCache} from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {FrameState, getFrameState, limitSelectedTiles} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume, getZoomFromExtent, getZoomFromFullExtent} from './helpers/zoom';\n\nimport type {GeospatialViewport, Viewport} from '../types';\nimport {Tile3D} from './tile-3d';\nimport {TILESET_TYPE} from '../constants';\n\nimport {TilesetTraverser} from './tileset-traverser';\n\n// TODO - these should be moved into their respective modules\nimport {Tileset3DTraverser} from './format-3d-tiles/tileset-3d-traverser';\nimport {I3STilesetTraverser} from './format-i3s/i3s-tileset-traverser';\n\nexport type TilesetJSON = any;\n\n/*\nexport type TilesetJSON = {\n    loader;\n    // could be  3d tiles, i3s\n    type: 'I3S' | '3DTILES';\n    /** The url to the top level tileset JSON file. *\n    url: string;\n    basePath?: string;\n    // Geometric error when the tree is not rendered at all\n    lodMetricType: string;\n    lodMetricValue: number;\n    root: {\n      refine: string;\n      [key: string]: unknown;\n    },\n    [key: string]: unknown;\n};\n*/\n\nexport type Tileset3DProps = {\n  // loading\n  throttleRequests?: boolean;\n  maxRequests?: number;\n  loadOptions?: LoaderOptions;\n  loadTiles?: boolean;\n  basePath?: string;\n  maximumMemoryUsage?: number;\n  maximumTilesSelected?: number;\n  debounceTime?: number;\n\n  // Metadata\n  description?: string;\n  attributions?: string[];\n\n  // Transforms\n  ellipsoid?: object;\n  modelMatrix?: Matrix4;\n\n  // Traversal\n  maximumScreenSpaceError?: number;\n  viewportTraversersMap?: any;\n  updateTransforms?: boolean;\n  viewDistanceScale?: number;\n\n  // Callbacks\n  onTileLoad?: (tile: Tile3D) => any;\n  onTileUnload?: (tile: Tile3D) => any;\n  onTileError?: (tile: Tile3D, message: string, url: string) => any;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  onTraversalComplete?: (selectedTiles: Tile3D[]) => Tile3D[];\n};\n\ntype Props = {\n  description: string;\n  ellipsoid: object;\n  /** A 4x4 transformation matrix this transforms the entire tileset. */\n  modelMatrix: Matrix4;\n  /** Set to false to disable network request throttling */\n  throttleRequests: boolean;\n  /** Number of simultaneous requsts, if throttleRequests is true */\n  maxRequests: number;\n  maximumMemoryUsage: number;\n  /** Maximum number limit of tiles selected for show. 0 means no limit */\n  maximumTilesSelected: number;\n  /** Delay time before the tileset traversal. It prevents traversal requests spam.*/\n  debounceTime: number;\n  /** Callback. Indicates this a tile's content was loaded */\n  onTileLoad: (tile: Tile3D) => void;\n  /** Callback. Indicates this a tile's content was unloaded (cache full) */\n  onTileUnload: (tile: Tile3D) => void;\n  /** Callback. Indicates this a tile's content failed to load */\n  onTileError: (tile: Tile3D, message: string, url: string) => void;\n  /** Callback. Allows post-process selectedTiles right after traversal. */\n  onTraversalComplete: (selectedTiles: Tile3D[]) => Tile3D[];\n  /** The maximum screen space error used to drive level of detail refinement. */\n  maximumScreenSpaceError: number;\n  viewportTraversersMap: Record<string, any> | null;\n  attributions: string[];\n  loadTiles: boolean;\n  loadOptions: LoaderOptions;\n  updateTransforms: boolean;\n  /** View distance scale modifier */\n  viewDistanceScale: number;\n  basePath: string;\n  /** Optional async tile content loader */\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  /** @todo I3S specific knowledge should be moved to I3S module */\n  i3s: Record<string, any>;\n};\n\nconst DEFAULT_PROPS: Props = {\n  description: '',\n  ellipsoid: Ellipsoid.WGS84,\n  modelMatrix: new Matrix4(),\n  throttleRequests: true,\n  maxRequests: 64,\n  maximumMemoryUsage: 32,\n  maximumTilesSelected: 0,\n  debounceTime: 0,\n  onTileLoad: () => {},\n  onTileUnload: () => {},\n  onTileError: () => {},\n  onTraversalComplete: (selectedTiles: Tile3D[]) => selectedTiles,\n  contentLoader: undefined,\n  viewDistanceScale: 1.0,\n  maximumScreenSpaceError: 8,\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n  loadOptions: {fetch: {}},\n  attributions: [],\n  basePath: '',\n  i3s: {}\n};\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points/Vertices';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\n/**\n * The Tileset loading and rendering flow is as below,\n * A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n * `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n * to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n * `Tile3DLayer` will update rendering based on `selectedTiles`.\n * `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n * when new tiles are loaded.\n\n * As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n * During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n * after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n * Tile3DLayer\n *      |\n *  await load(tileset)\n *      |\n *  tileset.update()\n *      |                async load tileHeader\n *  tileset.traverse() -------------------------- Queued\n *      |        resume traversal after fetched  |\n *      |----------------------------------------|\n *      |\n *      |                     async load tile content\n * tilset.requestedTiles  ----------------------------- RequestScheduler\n *                                                             |\n * tilset.selectedTiles (ready for rendering)                  |\n *      |         Listen to                                    |\n *   Tile3DLayer ----------- onTileLoad  ----------------------|\n *      |                         |   notify new tile is available\n *   updateLayers                 |\n *                       tileset.update // trigger another round of update\n*/\nexport class Tileset3D {\n  // props: Tileset3DProps;\n  options: Props;\n  loadOptions: LoaderOptions;\n\n  type: string;\n  tileset: TilesetJSON;\n  loader: LoaderWithParser;\n  url: string;\n  basePath: string;\n  modelMatrix: Matrix4;\n  ellipsoid: any;\n  lodMetricType: string;\n  lodMetricValue: number;\n  refine: string;\n  root: Tile3D | null = null;\n  roots: Record<string, Tile3D> = {};\n  /** @todo any->unknown */\n  asset: Record<string, any> = {};\n\n  // Metadata for the entire tileset\n  description: string = '';\n  properties: any;\n\n  extras: any = null;\n  attributions: any = {};\n  credits: any = {};\n\n  stats: Stats;\n\n  /** flags that contain information about data types in nested tiles */\n  contentFormats = {draco: false, meshopt: false, dds: false, ktx2: false};\n\n  // view props\n  cartographicCenter: Vector3 | null = null;\n  cartesianCenter: Vector3 | null = null;\n  zoom: number = 1;\n  boundingVolume: any = null;\n\n  /** Updated based on the camera position and direction */\n  dynamicScreenSpaceErrorComputedDensity: number = 0.0;\n\n  // METRICS\n\n  /**\n   * The maximum amount of GPU memory (in MB) that may be used to cache tiles\n   * Tiles not in view are unloaded to enforce private\n   */\n  maximumMemoryUsage: number = 32;\n\n  /** The total amount of GPU memory in bytes used by the tileset. */\n  gpuMemoryUsageInBytes: number = 0;\n\n  /** Update tracker. increase in each update cycle. */\n  _frameNumber: number = 0;\n  private _queryParams: Record<string, string> = {};\n  private _extensionsUsed: string[] = [];\n  private _tiles: Record<string, Tile3D> = {};\n\n  /** counter for tracking tiles requests */\n  private _pendingCount: number = 0;\n\n  /** Hold traversal results */\n  selectedTiles: Tile3D[] = [];\n\n  // TRAVERSAL\n  traverseCounter: number = 0;\n  geometricError: number = 0;\n  private lastUpdatedVieports: Viewport[] | Viewport | null = null;\n  private _requestedTiles: Tile3D[] = [];\n  private _emptyTiles: Tile3D[] = [];\n  private frameStateData: any = {};\n\n  _traverser: TilesetTraverser;\n  _cache = new TilesetCache();\n  _requestScheduler: RequestScheduler;\n\n  // Promise tracking\n  private updatePromise: Promise<number> | null = null;\n  tilesetInitializationPromise: Promise<void>;\n\n  /**\n   * Create a new Tileset3D\n   * @param json\n   * @param props\n   */\n  // eslint-disable-next-line max-statements\n  constructor(tileset: TilesetJSON, options?: Tileset3DProps) {\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_PROPS, ...options};\n    // raw data\n    this.tileset = tileset;\n    this.loader = tileset.loader;\n    // could be  3d tiles, i3s\n    this.type = tileset.type;\n    // The url to a tileset JSON file.\n    this.url = tileset.url;\n    this.basePath = tileset.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = tileset.lodMetricType;\n    this.lodMetricValue = tileset.lodMetricValue;\n    this.refine = tileset.root.refine;\n\n    this.loadOptions = this.options.loadOptions || {};\n\n    // TRAVERSAL\n    this._traverser = this._initializeTraverser();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n\n    // METRICS\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    this.tilesetInitializationPromise = this._initializeTileSet(tileset);\n  }\n\n  /** Release resources */\n  destroy(): void {\n    this._destroy();\n  }\n\n  /** Is the tileset loaded (update needs to have been called at least once) */\n  isLoaded(): boolean {\n    // Check that `_frameNumber !== 0` which means that update was called at least once\n    return this._pendingCount === 0 && this._frameNumber !== 0 && this._requestedTiles.length === 0;\n  }\n\n  get tiles(): object[] {\n    return Object.values(this._tiles);\n  }\n\n  get frameNumber(): number {\n    return this._frameNumber;\n  }\n\n  get queryParams(): string {\n    return new URLSearchParams(this._queryParams).toString();\n  }\n\n  setProps(props: Tileset3DProps): void {\n    this.options = {...this.options, ...props};\n  }\n\n  /** @deprecated */\n  setOptions(options: Tileset3DProps): void {\n    this.options = {...this.options, ...options};\n  }\n\n  /**\n   * Return a loadable tile url for a specific tile subpath\n   * @param tilePath a tile subpath\n   */\n  getTileUrl(tilePath: string): string {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${tilePath.includes('?') ? '&' : '?'}${this.queryParams}`;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName: string): boolean {\n    return Boolean(this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports - list of viewports\n   * @deprecated\n   */\n  update(viewports: Viewport[] | Viewport | null = null) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.tilesetInitializationPromise.then(() => {\n      if (!viewports && this.lastUpdatedVieports) {\n        viewports = this.lastUpdatedVieports;\n      } else {\n        this.lastUpdatedVieports = viewports;\n      }\n      if (viewports) {\n        this.doUpdate(viewports);\n      }\n    });\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports.\n   * Do it with debounce delay to prevent update spam\n   * @param viewports viewports\n   * @returns Promise of new frameNumber\n   */\n  async selectTiles(viewports: Viewport[] | Viewport | null = null): Promise<number> {\n    await this.tilesetInitializationPromise;\n    if (viewports) {\n      this.lastUpdatedVieports = viewports;\n    }\n    if (!this.updatePromise) {\n      this.updatePromise = new Promise<number>((resolve) => {\n        setTimeout(() => {\n          if (this.lastUpdatedVieports) {\n            this.doUpdate(this.lastUpdatedVieports);\n          }\n          resolve(this._frameNumber);\n          this.updatePromise = null;\n        }, this.options.debounceTime);\n      });\n    }\n    return this.updatePromise;\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports viewports\n   */\n  // eslint-disable-next-line max-statements, complexity\n  private doUpdate(viewports: Viewport[] | Viewport): void {\n    if ('loadTiles' in this.options && !this.options.loadTiles) {\n      return;\n    }\n    if (this.traverseCounter > 0) {\n      return;\n    }\n    const preparedViewports = viewports instanceof Array ? viewports : [viewports];\n\n    this._cache.reset();\n    this._frameNumber++;\n    this.traverseCounter = preparedViewports.length;\n    const viewportsToTraverse: string[] = [];\n    // First loop to decrement traverseCounter\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (this._needTraverse(id)) {\n        viewportsToTraverse.push(id);\n      } else {\n        this.traverseCounter--;\n      }\n    }\n\n    // Second loop to traverse\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (!this.roots[id]) {\n        this.roots[id] = this._initializeTileHeaders(this.tileset, null);\n      }\n\n      if (!viewportsToTraverse.includes(id)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const frameState = getFrameState(viewport as GeospatialViewport, this._frameNumber);\n      this._traverser.traverse(this.roots[id], frameState, this.options);\n    }\n  }\n\n  /**\n   * Check if traversal is needed for particular viewport\n   * @param {string} viewportId - id of a viewport\n   * @return {boolean}\n   */\n  _needTraverse(viewportId: string): boolean {\n    let traverserId = viewportId;\n    if (this.options.viewportTraversersMap) {\n      traverserId = this.options.viewportTraversersMap[viewportId];\n    }\n    if (traverserId !== viewportId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * The callback to post-process tiles after traversal procedure\n   * @param frameState - frame state for tile culling\n   */\n  _onTraversalEnd(frameState: FrameState): void {\n    const id = frameState.viewport.id;\n    if (!this.frameStateData[id]) {\n      this.frameStateData[id] = {selectedTiles: [], _requestedTiles: [], _emptyTiles: []};\n    }\n    const currentFrameStateData = this.frameStateData[id];\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    const [filteredSelectedTiles, unselectedTiles] = limitSelectedTiles(\n      selectedTiles,\n      frameState,\n      this.options.maximumTilesSelected\n    );\n    currentFrameStateData.selectedTiles = filteredSelectedTiles;\n    for (const tile of unselectedTiles) {\n      tile.unselect();\n    }\n\n    currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n    currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this.traverseCounter--;\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    this._updateTiles();\n  }\n\n  /**\n   * Update tiles relying on data from all traversers\n   */\n  _updateTiles(): void {\n    this.selectedTiles = [];\n    this._requestedTiles = [];\n    this._emptyTiles = [];\n\n    for (const frameStateKey in this.frameStateData) {\n      const frameStateDataValue = this.frameStateData[frameStateKey];\n      this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n      this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n      this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n    }\n\n    this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n\n    this._loadTiles();\n    this._unloadTiles();\n    this._updateStats();\n  }\n\n  _tilesChanged(oldSelectedTiles: Tile3D[], selectedTiles: Tile3D[]): boolean {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map((t) => t.id));\n    const set2 = new Set(selectedTiles.map((t) => t.id));\n    let changed = oldSelectedTiles.filter((x) => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter((x) => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles(): void {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._loadTile(tile);\n      }\n    }\n  }\n\n  _unloadTiles(): void {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats(): void {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable && tile.content) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        } else {\n          // Calculate vertices for non point cloud tiles.\n          pointsRenderable += tile.content.vertexCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  async _initializeTileSet(tilesetJson: TilesetJSON): Promise<void> {\n    if (this.type === TILESET_TYPE.I3S) {\n      this.calculateViewPropsI3S();\n      tilesetJson.root = await tilesetJson.root;\n    }\n    this.root = this._initializeTileHeaders(tilesetJson, null);\n\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeTiles3DTileset(tilesetJson);\n      this.calculateViewPropsTiles3D();\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset();\n    }\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset\n   * For I3S there is extent (<1.8 version) or fullExtent (>=1.8 version) to calculate view props\n   * @returns\n   */\n  private calculateViewPropsI3S(): void {\n    // for I3S 1.8 try to calculate with fullExtent\n    const fullExtent = this.tileset.fullExtent;\n    if (fullExtent) {\n      const {xmin, xmax, ymin, ymax, zmin, zmax} = fullExtent;\n      this.cartographicCenter = new Vector3(\n        xmin + (xmax - xmin) / 2,\n        ymin + (ymax - ymin) / 2,\n        zmin + (zmax - zmin) / 2\n      );\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromFullExtent(fullExtent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // for I3S 1.6-1.7 try to calculate with extent\n    const extent = this.tileset.store?.extent;\n    if (extent) {\n      const [xmin, ymin, xmax, ymax] = extent;\n      this.cartographicCenter = new Vector3(xmin + (xmax - xmin) / 2, ymin + (ymax - ymin) / 2, 0);\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromExtent(extent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console.warn('Extent is not defined in the tileset header');\n    this.cartographicCenter = new Vector3();\n    this.zoom = 1;\n    return;\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset.\n   * For 3DTiles the root tile data is used to calculate view props.\n   * @returns\n   */\n  private calculateViewPropsTiles3D() {\n    const root = this.root as Tile3D;\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line no-console\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n\n    // cartographic coordinates are undefined at the center of the ellipsoid\n    if (center[0] !== 0 || center[1] !== 0 || center[2] !== 0) {\n      this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    } else {\n      this.cartographicCenter = new Vector3(0, 0, -Ellipsoid.WGS84.radii[0]);\n    }\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT);\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson: TilesetJSON, parentTileHeader?: any) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // 3DTiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack: Tile3D[] = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop() as Tile3D;\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile);\n\n          // Special handling for Google\n          // A session key must be used for all tile requests\n          if (childTile.contentUrl?.includes('?session=')) {\n            const url = new URL(childTile.contentUrl);\n            const session = url.searchParams.get('session');\n            if (session) {\n              this._queryParams.session = session;\n            }\n          }\n\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser(): TilesetTraverser {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3STilesetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile: Tile3D): void {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile: Tile3D): Promise<void> {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent();\n    } catch (error: unknown) {\n      this._onTileLoadError(tile, error instanceof Error ? error : new Error('load failed'));\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile: Tile3D, error: Error): void {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile: Tile3D, loaded: boolean): void {\n    if (!loaded) {\n      return;\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      // We can't calculate tiles total in I3S in advance so we calculate it dynamically.\n      const nodesInNodePages = this.tileset?.nodePagesTile?.nodesInNodePages || 0;\n      this.stats.get(TILES_TOTAL).reset();\n      this.stats.get(TILES_TOTAL).addCount(nodesInNodePages);\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this.updateContentTypes(tile);\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  /**\n   * Update information about data types in nested tiles\n   * @param tile instance of a nested Tile3D\n   */\n  private updateContentTypes(tile: Tile3D) {\n    if (this.type === TILESET_TYPE.I3S) {\n      if (tile.header.isDracoGeometry) {\n        this.contentFormats.draco = true;\n      }\n      switch (tile.header.textureFormat) {\n        case 'dds':\n          this.contentFormats.dds = true;\n          break;\n        case 'ktx2':\n          this.contentFormats.ktx2 = true;\n          break;\n        default:\n      }\n    } else if (this.type === TILESET_TYPE.TILES3D) {\n      const {extensionsRemoved = []} = tile.content?.gltf || {};\n      if (extensionsRemoved.includes('KHR_draco_mesh_compression')) {\n        this.contentFormats.draco = true;\n      }\n      if (extensionsRemoved.includes('EXT_meshopt_compression')) {\n        this.contentFormats.meshopt = true;\n      }\n      if (extensionsRemoved.includes('KHR_texture_basisu')) {\n        this.contentFormats.ktx2 = true;\n      }\n    }\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile: Tile3D) {\n    this._cache.add(this, tile, (tileset) => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.gpuMemoryUsageInBytes || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= tile.gpuMemoryUsageInBytes || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack: Tile3D[] = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile: Tile3D = stack.pop() as Tile3D;\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack: Tile3D[] = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeTiles3DTileset(tilesetJson) {\n    if (tilesetJson.queryString) {\n      const searchParams = new URLSearchParams(tilesetJson.queryString);\n      const queryParams = Object.fromEntries(searchParams.entries());\n      this._queryParams = {...this._queryParams, ...queryParams};\n    }\n\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description || '';\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed || [];\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset() {\n    // @ts-expect-error\n    if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n      this._queryParams.token = this.loadOptions.i3s.token as string;\n    }\n  }\n}\n"],"mappings":"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"}