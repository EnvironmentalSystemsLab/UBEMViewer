{"version":3,"file":"i3s-tileset-traverser.js","names":["_core","require","_tilesetTraverser","_i3sLod","_tile3d","_i3sTileManager","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","Reflect","construct","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","I3STilesetTraverser","_TilesetTraverser","_inherits2","_super","options","_this","_classCallCheck2","_assertThisInitialized2","_tileManager","I3STileManager","_createClass2","traversalFinished","frameState","hasPendingTiles","viewport","id","_frameNumber","shouldRefine","tile","_lodJudge","getLodStatus","updateChildTiles","_this2","children","header","childTiles","tileset","_iterator","_step","_loop","child","extendedId","concat","childTile","find","t","request","_loadTile","cachedRequest","nodePages","nodePagesTile","formTileFromNodePages","add","_onTileLoad","update","updateTile","_loadTile2","_asyncToGenerator2","_regenerator","mark","_callee","nodeId","loader","nodeUrl","wrap","_callee$","_context","prev","getTileUrl","url","loadOptions","i3s","isTileHeader","load","abrupt","sent","stop","_x","_x2","Tile3D","frameNumber","Date","getTime","lastUpdate","updateDebounceTime","executeTraversal","TilesetTraverser","exports"],"sources":["../../../../src/tileset/format-i3s/i3s-tileset-traverser.ts"],"sourcesContent":["import {load} from '@loaders.gl/core';\nimport {TilesetTraverser} from '../tileset-traverser';\n\nimport {getLodStatus} from '../helpers/i3s-lod';\nimport {Tile3D} from '../tile-3d';\nimport {I3STileManager} from './i3s-tile-manager';\nimport {FrameState} from '../helpers/frame-state';\n\nexport class I3STilesetTraverser extends TilesetTraverser {\n  private _tileManager: I3STileManager;\n\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  /**\n   * Check if there are no penging tile header requests,\n   * that means the traversal is finished and we can call\n   * following-up callbacks.\n   */\n  traversalFinished(frameState: FrameState): boolean {\n    return !this._tileManager.hasPendingTiles(frameState.viewport.id, this._frameNumber || 0);\n  }\n\n  shouldRefine(tile, frameState: FrameState) {\n    tile._lodJudge = getLodStatus(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState: FrameState): boolean {\n    const children = tile.header.children || [];\n    // children which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      const extendedId = `${child.id}-${frameState.viewport.id}`;\n      // if child tile is not fetched\n      const childTile = childTiles && childTiles.find((t) => t.id === extendedId);\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(extendedId);\n        if (!cachedRequest) {\n          // eslint-disable-next-line max-depth\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n          this._tileManager.add(\n            request,\n            extendedId,\n            (header) => this._onTileLoad(header, tile, extendedId),\n            frameState\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(extendedId, frameState);\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n    return false;\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      ...tileset.loadOptions,\n      i3s: {\n        ...tileset.loadOptions.i3s,\n        isTileHeader: true\n      }\n    };\n\n    return await load(nodeUrl, loader, options);\n  }\n\n  /**\n   * The callback to init Tile3D instance after loading the tile JSON\n   * @param {Object} header - the tile JSON from a dataset\n   * @param {Tile3D} tile - the parent Tile3D instance\n   * @param {string} extendedId - optional ID to separate copies of a tile for different viewports.\n   *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   * @return {void}\n   */\n  _onTileLoad(header, tile, extendedId) {\n    // after child tile is fetched\n    const childTile = new Tile3D(tile.tileset, header, tile, extendedId);\n    tile.children.push(childTile);\n    const frameState = this._tileManager.find(childTile.id).frameState;\n    this.updateTile(childTile, frameState);\n\n    // after tile fetched, resume traversal if still in current update/traversal frame\n    if (\n      this._frameNumber === frameState.frameNumber &&\n      (this.traversalFinished(frameState) ||\n        new Date().getTime() - this.lastUpdate > this.updateDebounceTime)\n    ) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"mappings":"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"}