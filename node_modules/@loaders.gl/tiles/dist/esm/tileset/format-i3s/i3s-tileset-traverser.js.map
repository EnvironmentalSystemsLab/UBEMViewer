{"version":3,"file":"i3s-tileset-traverser.js","names":["load","TilesetTraverser","getLodStatus","Tile3D","I3STileManager","I3STilesetTraverser","constructor","options","_defineProperty","_tileManager","traversalFinished","frameState","hasPendingTiles","viewport","id","_frameNumber","shouldRefine","tile","_lodJudge","updateChildTiles","children","header","childTiles","tileset","child","extendedId","concat","childTile","find","t","request","_loadTile","cachedRequest","nodePages","nodePagesTile","formTileFromNodePages","add","_onTileLoad","update","updateTile","nodeId","loader","nodeUrl","getTileUrl","url","loadOptions","i3s","isTileHeader","push","frameNumber","Date","getTime","lastUpdate","updateDebounceTime","executeTraversal"],"sources":["../../../../src/tileset/format-i3s/i3s-tileset-traverser.ts"],"sourcesContent":["import {load} from '@loaders.gl/core';\nimport {TilesetTraverser} from '../tileset-traverser';\n\nimport {getLodStatus} from '../helpers/i3s-lod';\nimport {Tile3D} from '../tile-3d';\nimport {I3STileManager} from './i3s-tile-manager';\nimport {FrameState} from '../helpers/frame-state';\n\nexport class I3STilesetTraverser extends TilesetTraverser {\n  private _tileManager: I3STileManager;\n\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  /**\n   * Check if there are no penging tile header requests,\n   * that means the traversal is finished and we can call\n   * following-up callbacks.\n   */\n  traversalFinished(frameState: FrameState): boolean {\n    return !this._tileManager.hasPendingTiles(frameState.viewport.id, this._frameNumber || 0);\n  }\n\n  shouldRefine(tile, frameState: FrameState) {\n    tile._lodJudge = getLodStatus(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState: FrameState): boolean {\n    const children = tile.header.children || [];\n    // children which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      const extendedId = `${child.id}-${frameState.viewport.id}`;\n      // if child tile is not fetched\n      const childTile = childTiles && childTiles.find((t) => t.id === extendedId);\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(extendedId);\n        if (!cachedRequest) {\n          // eslint-disable-next-line max-depth\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n          this._tileManager.add(\n            request,\n            extendedId,\n            (header) => this._onTileLoad(header, tile, extendedId),\n            frameState\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(extendedId, frameState);\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n    return false;\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      ...tileset.loadOptions,\n      i3s: {\n        ...tileset.loadOptions.i3s,\n        isTileHeader: true\n      }\n    };\n\n    return await load(nodeUrl, loader, options);\n  }\n\n  /**\n   * The callback to init Tile3D instance after loading the tile JSON\n   * @param {Object} header - the tile JSON from a dataset\n   * @param {Tile3D} tile - the parent Tile3D instance\n   * @param {string} extendedId - optional ID to separate copies of a tile for different viewports.\n   *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   * @return {void}\n   */\n  _onTileLoad(header, tile, extendedId) {\n    // after child tile is fetched\n    const childTile = new Tile3D(tile.tileset, header, tile, extendedId);\n    tile.children.push(childTile);\n    const frameState = this._tileManager.find(childTile.id).frameState;\n    this.updateTile(childTile, frameState);\n\n    // after tile fetched, resume traversal if still in current update/traversal frame\n    if (\n      this._frameNumber === frameState.frameNumber &&\n      (this.traversalFinished(frameState) ||\n        new Date().getTime() - this.lastUpdate > this.updateDebounceTime)\n    ) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"mappings":";AAAA,SAAQA,IAAI,QAAO,kBAAkB;AACrC,SAAQC,gBAAgB,QAAO,sBAAsB;AAErD,SAAQC,YAAY,QAAO,oBAAoB;AAC/C,SAAQC,MAAM,QAAO,YAAY;AACjC,SAAQC,cAAc,QAAO,oBAAoB;AAGjD,OAAO,MAAMC,mBAAmB,SAASJ,gBAAgB,CAAC;EAGxDK,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IAACC,eAAA;IACf,IAAI,CAACC,YAAY,GAAG,IAAIL,cAAc,CAAC,CAAC;EAC1C;EAOAM,iBAAiBA,CAACC,UAAsB,EAAW;IACjD,OAAO,CAAC,IAAI,CAACF,YAAY,CAACG,eAAe,CAACD,UAAU,CAACE,QAAQ,CAACC,EAAE,EAAE,IAAI,CAACC,YAAY,IAAI,CAAC,CAAC;EAC3F;EAEAC,YAAYA,CAACC,IAAI,EAAEN,UAAsB,EAAE;IACzCM,IAAI,CAACC,SAAS,GAAGhB,YAAY,CAACe,IAAI,EAAEN,UAAU,CAAC;IAC/C,OAAOM,IAAI,CAACC,SAAS,KAAK,KAAK;EACjC;EAEAC,gBAAgBA,CAACF,IAAI,EAAEN,UAAsB,EAAW;IACtD,MAAMS,QAAQ,GAAGH,IAAI,CAACI,MAAM,CAACD,QAAQ,IAAI,EAAE;IAE3C,MAAME,UAAU,GAAGL,IAAI,CAACG,QAAQ;IAChC,MAAMG,OAAO,GAAGN,IAAI,CAACM,OAAO;IAE5B,KAAK,MAAMC,KAAK,IAAIJ,QAAQ,EAAE;MAC5B,MAAMK,UAAU,MAAAC,MAAA,CAAMF,KAAK,CAACV,EAAE,OAAAY,MAAA,CAAIf,UAAU,CAACE,QAAQ,CAACC,EAAE,CAAE;MAE1D,MAAMa,SAAS,GAAGL,UAAU,IAAIA,UAAU,CAACM,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACf,EAAE,KAAKW,UAAU,CAAC;MAC3E,IAAI,CAACE,SAAS,EAAE;QACd,IAAIG,OAAO,GAAGA,CAAA,KAAM,IAAI,CAACC,SAAS,CAACP,KAAK,CAACV,EAAE,EAAES,OAAO,CAAC;QACrD,MAAMS,aAAa,GAAG,IAAI,CAACvB,YAAY,CAACmB,IAAI,CAACH,UAAU,CAAC;QACxD,IAAI,CAACO,aAAa,EAAE;UAElB,IAAIT,OAAO,CAACA,OAAO,CAACU,SAAS,EAAE;YAC7BH,OAAO,GAAGA,CAAA,KAAMP,OAAO,CAACA,OAAO,CAACW,aAAa,CAACC,qBAAqB,CAACX,KAAK,CAACV,EAAE,CAAC;UAC/E;UACA,IAAI,CAACL,YAAY,CAAC2B,GAAG,CACnBN,OAAO,EACPL,UAAU,EACTJ,MAAM,IAAK,IAAI,CAACgB,WAAW,CAAChB,MAAM,EAAEJ,IAAI,EAAEQ,UAAU,CAAC,EACtDd,UACF,CAAC;QACH,CAAC,MAAM;UAEL,IAAI,CAACF,YAAY,CAAC6B,MAAM,CAACb,UAAU,EAAEd,UAAU,CAAC;QAClD;MACF,CAAC,MAAM,IAAIgB,SAAS,EAAE;QAEpB,IAAI,CAACY,UAAU,CAACZ,SAAS,EAAEhB,UAAU,CAAC;MACxC;IACF;IACA,OAAO,KAAK;EACd;EAEA,MAAMoB,SAASA,CAACS,MAAM,EAAEjB,OAAO,EAAE;IAC/B,MAAM;MAACkB;IAAM,CAAC,GAAGlB,OAAO;IACxB,MAAMmB,OAAO,GAAGnB,OAAO,CAACoB,UAAU,IAAAjB,MAAA,CAAIH,OAAO,CAACqB,GAAG,aAAAlB,MAAA,CAAUc,MAAM,CAAE,CAAC;IAEpE,MAAMjC,OAAO,GAAG;MACd,GAAGgB,OAAO,CAACsB,WAAW;MACtBC,GAAG,EAAE;QACH,GAAGvB,OAAO,CAACsB,WAAW,CAACC,GAAG;QAC1BC,YAAY,EAAE;MAChB;IACF,CAAC;IAED,OAAO,MAAM/C,IAAI,CAAC0C,OAAO,EAAED,MAAM,EAAElC,OAAO,CAAC;EAC7C;EAUA8B,WAAWA,CAAChB,MAAM,EAAEJ,IAAI,EAAEQ,UAAU,EAAE;IAEpC,MAAME,SAAS,GAAG,IAAIxB,MAAM,CAACc,IAAI,CAACM,OAAO,EAAEF,MAAM,EAAEJ,IAAI,EAAEQ,UAAU,CAAC;IACpER,IAAI,CAACG,QAAQ,CAAC4B,IAAI,CAACrB,SAAS,CAAC;IAC7B,MAAMhB,UAAU,GAAG,IAAI,CAACF,YAAY,CAACmB,IAAI,CAACD,SAAS,CAACb,EAAE,CAAC,CAACH,UAAU;IAClE,IAAI,CAAC4B,UAAU,CAACZ,SAAS,EAAEhB,UAAU,CAAC;IAGtC,IACE,IAAI,CAACI,YAAY,KAAKJ,UAAU,CAACsC,WAAW,KAC3C,IAAI,CAACvC,iBAAiB,CAACC,UAAU,CAAC,IACjC,IAAIuC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,kBAAkB,CAAC,EACnE;MACA,IAAI,CAACC,gBAAgB,CAAC3B,SAAS,EAAEhB,UAAU,CAAC;IAC9C;EACF;AACF"}