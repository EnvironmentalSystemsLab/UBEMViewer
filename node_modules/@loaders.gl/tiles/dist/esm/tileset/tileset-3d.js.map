{"version":3,"file":"tileset-3d.js","names":["Matrix4","Vector3","Ellipsoid","Stats","RequestScheduler","path","TilesetCache","calculateTransformProps","getFrameState","limitSelectedTiles","getZoomFromBoundingVolume","getZoomFromExtent","getZoomFromFullExtent","Tile3D","TILESET_TYPE","TilesetTraverser","Tileset3DTraverser","I3STilesetTraverser","DEFAULT_PROPS","description","ellipsoid","WGS84","modelMatrix","throttleRequests","maxRequests","maximumMemoryUsage","maximumTilesSelected","debounceTime","onTileLoad","onTileUnload","onTileError","onTraversalComplete","selectedTiles","contentLoader","undefined","viewDistanceScale","maximumScreenSpaceError","loadTiles","updateTransforms","viewportTraversersMap","loadOptions","fetch","attributions","basePath","i3s","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","Tileset3D","constructor","tileset","options","_defineProperty","draco","meshopt","dds","ktx2","loader","type","url","dirname","lodMetricType","lodMetricValue","refine","root","_traverser","_initializeTraverser","_requestScheduler","stats","id","_initializeStats","tilesetInitializationPromise","_initializeTileSet","destroy","_destroy","isLoaded","_pendingCount","_frameNumber","_requestedTiles","length","tiles","Object","values","_tiles","frameNumber","queryParams","URLSearchParams","_queryParams","toString","setProps","props","setOptions","getTileUrl","tilePath","isDataUrl","startsWith","concat","includes","hasExtension","extensionName","Boolean","_extensionsUsed","indexOf","update","viewports","arguments","then","lastUpdatedVieports","doUpdate","selectTiles","updatePromise","Promise","resolve","setTimeout","traverseCounter","preparedViewports","Array","_cache","reset","viewportsToTraverse","viewport","_needTraverse","push","roots","_initializeTileHeaders","frameState","traverse","viewportId","traverserId","_onTraversalEnd","frameStateData","_emptyTiles","currentFrameStateData","filteredSelectedTiles","unselectedTiles","tile","unselect","requestedTiles","emptyTiles","_updateTiles","frameStateKey","frameStateDataValue","_loadTiles","_unloadTiles","_updateStats","_tilesChanged","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","x","has","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","vertexCount","get","count","tilesetJson","I3S","calculateViewPropsI3S","TILES3D","_initializeTiles3DTileset","calculateViewPropsTiles3D","_initializeI3STileset","_this$tileset$store","fullExtent","xmin","xmax","ymin","ymax","zmin","zmax","cartographicCenter","cartesianCenter","cartographicToCartesian","zoom","extent","store","console","warn","center","boundingVolume","cartesianToCartographic","radii","parentTileHeader","rootTile","children","depth","stack","pop","incrementCount","header","childHeader","_childTile$contentUrl","childTile","contentUrl","URL","session","searchParams","TraverserClass","onTraversalEnd","bind","_destroyTileHeaders","parentTile","_destroySubtree","loaded","_onStartTileLoading","loadContent","error","_onTileLoadError","Error","_onEndTileLoading","_onTileLoad","message","_this$tileset","_this$tileset$nodePag","nodesInNodePages","nodePagesTile","addCount","updateContentTypes","_addTileToCache","isDracoGeometry","contentFormats","textureFormat","_tile$content","extensionsRemoved","gltf","decrementCount","add","_updateCacheStats","gpuMemoryUsageInBytes","unloadContent","child","_destroyTile","unloadTile","queryString","fromEntries","entries","asset","version","v","tilesetVersion","credits","properties","geometricError","extensionsUsed","extras","token"],"sources":["../../../src/tileset/tileset-3d.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {RequestScheduler, path, LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {TilesetCache} from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {FrameState, getFrameState, limitSelectedTiles} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume, getZoomFromExtent, getZoomFromFullExtent} from './helpers/zoom';\n\nimport type {GeospatialViewport, Viewport} from '../types';\nimport {Tile3D} from './tile-3d';\nimport {TILESET_TYPE} from '../constants';\n\nimport {TilesetTraverser} from './tileset-traverser';\n\n// TODO - these should be moved into their respective modules\nimport {Tileset3DTraverser} from './format-3d-tiles/tileset-3d-traverser';\nimport {I3STilesetTraverser} from './format-i3s/i3s-tileset-traverser';\n\nexport type TilesetJSON = any;\n\n/*\nexport type TilesetJSON = {\n    loader;\n    // could be  3d tiles, i3s\n    type: 'I3S' | '3DTILES';\n    /** The url to the top level tileset JSON file. *\n    url: string;\n    basePath?: string;\n    // Geometric error when the tree is not rendered at all\n    lodMetricType: string;\n    lodMetricValue: number;\n    root: {\n      refine: string;\n      [key: string]: unknown;\n    },\n    [key: string]: unknown;\n};\n*/\n\nexport type Tileset3DProps = {\n  // loading\n  throttleRequests?: boolean;\n  maxRequests?: number;\n  loadOptions?: LoaderOptions;\n  loadTiles?: boolean;\n  basePath?: string;\n  maximumMemoryUsage?: number;\n  maximumTilesSelected?: number;\n  debounceTime?: number;\n\n  // Metadata\n  description?: string;\n  attributions?: string[];\n\n  // Transforms\n  ellipsoid?: object;\n  modelMatrix?: Matrix4;\n\n  // Traversal\n  maximumScreenSpaceError?: number;\n  viewportTraversersMap?: any;\n  updateTransforms?: boolean;\n  viewDistanceScale?: number;\n\n  // Callbacks\n  onTileLoad?: (tile: Tile3D) => any;\n  onTileUnload?: (tile: Tile3D) => any;\n  onTileError?: (tile: Tile3D, message: string, url: string) => any;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  onTraversalComplete?: (selectedTiles: Tile3D[]) => Tile3D[];\n};\n\ntype Props = {\n  description: string;\n  ellipsoid: object;\n  /** A 4x4 transformation matrix this transforms the entire tileset. */\n  modelMatrix: Matrix4;\n  /** Set to false to disable network request throttling */\n  throttleRequests: boolean;\n  /** Number of simultaneous requsts, if throttleRequests is true */\n  maxRequests: number;\n  maximumMemoryUsage: number;\n  /** Maximum number limit of tiles selected for show. 0 means no limit */\n  maximumTilesSelected: number;\n  /** Delay time before the tileset traversal. It prevents traversal requests spam.*/\n  debounceTime: number;\n  /** Callback. Indicates this a tile's content was loaded */\n  onTileLoad: (tile: Tile3D) => void;\n  /** Callback. Indicates this a tile's content was unloaded (cache full) */\n  onTileUnload: (tile: Tile3D) => void;\n  /** Callback. Indicates this a tile's content failed to load */\n  onTileError: (tile: Tile3D, message: string, url: string) => void;\n  /** Callback. Allows post-process selectedTiles right after traversal. */\n  onTraversalComplete: (selectedTiles: Tile3D[]) => Tile3D[];\n  /** The maximum screen space error used to drive level of detail refinement. */\n  maximumScreenSpaceError: number;\n  viewportTraversersMap: Record<string, any> | null;\n  attributions: string[];\n  loadTiles: boolean;\n  loadOptions: LoaderOptions;\n  updateTransforms: boolean;\n  /** View distance scale modifier */\n  viewDistanceScale: number;\n  basePath: string;\n  /** Optional async tile content loader */\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  /** @todo I3S specific knowledge should be moved to I3S module */\n  i3s: Record<string, any>;\n};\n\nconst DEFAULT_PROPS: Props = {\n  description: '',\n  ellipsoid: Ellipsoid.WGS84,\n  modelMatrix: new Matrix4(),\n  throttleRequests: true,\n  maxRequests: 64,\n  maximumMemoryUsage: 32,\n  maximumTilesSelected: 0,\n  debounceTime: 0,\n  onTileLoad: () => {},\n  onTileUnload: () => {},\n  onTileError: () => {},\n  onTraversalComplete: (selectedTiles: Tile3D[]) => selectedTiles,\n  contentLoader: undefined,\n  viewDistanceScale: 1.0,\n  maximumScreenSpaceError: 8,\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n  loadOptions: {fetch: {}},\n  attributions: [],\n  basePath: '',\n  i3s: {}\n};\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points/Vertices';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\n/**\n * The Tileset loading and rendering flow is as below,\n * A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n * `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n * to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n * `Tile3DLayer` will update rendering based on `selectedTiles`.\n * `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n * when new tiles are loaded.\n\n * As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n * During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n * after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n * Tile3DLayer\n *      |\n *  await load(tileset)\n *      |\n *  tileset.update()\n *      |                async load tileHeader\n *  tileset.traverse() -------------------------- Queued\n *      |        resume traversal after fetched  |\n *      |----------------------------------------|\n *      |\n *      |                     async load tile content\n * tilset.requestedTiles  ----------------------------- RequestScheduler\n *                                                             |\n * tilset.selectedTiles (ready for rendering)                  |\n *      |         Listen to                                    |\n *   Tile3DLayer ----------- onTileLoad  ----------------------|\n *      |                         |   notify new tile is available\n *   updateLayers                 |\n *                       tileset.update // trigger another round of update\n*/\nexport class Tileset3D {\n  // props: Tileset3DProps;\n  options: Props;\n  loadOptions: LoaderOptions;\n\n  type: string;\n  tileset: TilesetJSON;\n  loader: LoaderWithParser;\n  url: string;\n  basePath: string;\n  modelMatrix: Matrix4;\n  ellipsoid: any;\n  lodMetricType: string;\n  lodMetricValue: number;\n  refine: string;\n  root: Tile3D | null = null;\n  roots: Record<string, Tile3D> = {};\n  /** @todo any->unknown */\n  asset: Record<string, any> = {};\n\n  // Metadata for the entire tileset\n  description: string = '';\n  properties: any;\n\n  extras: any = null;\n  attributions: any = {};\n  credits: any = {};\n\n  stats: Stats;\n\n  /** flags that contain information about data types in nested tiles */\n  contentFormats = {draco: false, meshopt: false, dds: false, ktx2: false};\n\n  // view props\n  cartographicCenter: Vector3 | null = null;\n  cartesianCenter: Vector3 | null = null;\n  zoom: number = 1;\n  boundingVolume: any = null;\n\n  /** Updated based on the camera position and direction */\n  dynamicScreenSpaceErrorComputedDensity: number = 0.0;\n\n  // METRICS\n\n  /**\n   * The maximum amount of GPU memory (in MB) that may be used to cache tiles\n   * Tiles not in view are unloaded to enforce private\n   */\n  maximumMemoryUsage: number = 32;\n\n  /** The total amount of GPU memory in bytes used by the tileset. */\n  gpuMemoryUsageInBytes: number = 0;\n\n  /** Update tracker. increase in each update cycle. */\n  _frameNumber: number = 0;\n  private _queryParams: Record<string, string> = {};\n  private _extensionsUsed: string[] = [];\n  private _tiles: Record<string, Tile3D> = {};\n\n  /** counter for tracking tiles requests */\n  private _pendingCount: number = 0;\n\n  /** Hold traversal results */\n  selectedTiles: Tile3D[] = [];\n\n  // TRAVERSAL\n  traverseCounter: number = 0;\n  geometricError: number = 0;\n  private lastUpdatedVieports: Viewport[] | Viewport | null = null;\n  private _requestedTiles: Tile3D[] = [];\n  private _emptyTiles: Tile3D[] = [];\n  private frameStateData: any = {};\n\n  _traverser: TilesetTraverser;\n  _cache = new TilesetCache();\n  _requestScheduler: RequestScheduler;\n\n  // Promise tracking\n  private updatePromise: Promise<number> | null = null;\n  tilesetInitializationPromise: Promise<void>;\n\n  /**\n   * Create a new Tileset3D\n   * @param json\n   * @param props\n   */\n  // eslint-disable-next-line max-statements\n  constructor(tileset: TilesetJSON, options?: Tileset3DProps) {\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_PROPS, ...options};\n    // raw data\n    this.tileset = tileset;\n    this.loader = tileset.loader;\n    // could be  3d tiles, i3s\n    this.type = tileset.type;\n    // The url to a tileset JSON file.\n    this.url = tileset.url;\n    this.basePath = tileset.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = tileset.lodMetricType;\n    this.lodMetricValue = tileset.lodMetricValue;\n    this.refine = tileset.root.refine;\n\n    this.loadOptions = this.options.loadOptions || {};\n\n    // TRAVERSAL\n    this._traverser = this._initializeTraverser();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n\n    // METRICS\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    this.tilesetInitializationPromise = this._initializeTileSet(tileset);\n  }\n\n  /** Release resources */\n  destroy(): void {\n    this._destroy();\n  }\n\n  /** Is the tileset loaded (update needs to have been called at least once) */\n  isLoaded(): boolean {\n    // Check that `_frameNumber !== 0` which means that update was called at least once\n    return this._pendingCount === 0 && this._frameNumber !== 0 && this._requestedTiles.length === 0;\n  }\n\n  get tiles(): object[] {\n    return Object.values(this._tiles);\n  }\n\n  get frameNumber(): number {\n    return this._frameNumber;\n  }\n\n  get queryParams(): string {\n    return new URLSearchParams(this._queryParams).toString();\n  }\n\n  setProps(props: Tileset3DProps): void {\n    this.options = {...this.options, ...props};\n  }\n\n  /** @deprecated */\n  setOptions(options: Tileset3DProps): void {\n    this.options = {...this.options, ...options};\n  }\n\n  /**\n   * Return a loadable tile url for a specific tile subpath\n   * @param tilePath a tile subpath\n   */\n  getTileUrl(tilePath: string): string {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${tilePath.includes('?') ? '&' : '?'}${this.queryParams}`;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName: string): boolean {\n    return Boolean(this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports - list of viewports\n   * @deprecated\n   */\n  update(viewports: Viewport[] | Viewport | null = null) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.tilesetInitializationPromise.then(() => {\n      if (!viewports && this.lastUpdatedVieports) {\n        viewports = this.lastUpdatedVieports;\n      } else {\n        this.lastUpdatedVieports = viewports;\n      }\n      if (viewports) {\n        this.doUpdate(viewports);\n      }\n    });\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports.\n   * Do it with debounce delay to prevent update spam\n   * @param viewports viewports\n   * @returns Promise of new frameNumber\n   */\n  async selectTiles(viewports: Viewport[] | Viewport | null = null): Promise<number> {\n    await this.tilesetInitializationPromise;\n    if (viewports) {\n      this.lastUpdatedVieports = viewports;\n    }\n    if (!this.updatePromise) {\n      this.updatePromise = new Promise<number>((resolve) => {\n        setTimeout(() => {\n          if (this.lastUpdatedVieports) {\n            this.doUpdate(this.lastUpdatedVieports);\n          }\n          resolve(this._frameNumber);\n          this.updatePromise = null;\n        }, this.options.debounceTime);\n      });\n    }\n    return this.updatePromise;\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports viewports\n   */\n  // eslint-disable-next-line max-statements, complexity\n  private doUpdate(viewports: Viewport[] | Viewport): void {\n    if ('loadTiles' in this.options && !this.options.loadTiles) {\n      return;\n    }\n    if (this.traverseCounter > 0) {\n      return;\n    }\n    const preparedViewports = viewports instanceof Array ? viewports : [viewports];\n\n    this._cache.reset();\n    this._frameNumber++;\n    this.traverseCounter = preparedViewports.length;\n    const viewportsToTraverse: string[] = [];\n    // First loop to decrement traverseCounter\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (this._needTraverse(id)) {\n        viewportsToTraverse.push(id);\n      } else {\n        this.traverseCounter--;\n      }\n    }\n\n    // Second loop to traverse\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (!this.roots[id]) {\n        this.roots[id] = this._initializeTileHeaders(this.tileset, null);\n      }\n\n      if (!viewportsToTraverse.includes(id)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const frameState = getFrameState(viewport as GeospatialViewport, this._frameNumber);\n      this._traverser.traverse(this.roots[id], frameState, this.options);\n    }\n  }\n\n  /**\n   * Check if traversal is needed for particular viewport\n   * @param {string} viewportId - id of a viewport\n   * @return {boolean}\n   */\n  _needTraverse(viewportId: string): boolean {\n    let traverserId = viewportId;\n    if (this.options.viewportTraversersMap) {\n      traverserId = this.options.viewportTraversersMap[viewportId];\n    }\n    if (traverserId !== viewportId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * The callback to post-process tiles after traversal procedure\n   * @param frameState - frame state for tile culling\n   */\n  _onTraversalEnd(frameState: FrameState): void {\n    const id = frameState.viewport.id;\n    if (!this.frameStateData[id]) {\n      this.frameStateData[id] = {selectedTiles: [], _requestedTiles: [], _emptyTiles: []};\n    }\n    const currentFrameStateData = this.frameStateData[id];\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    const [filteredSelectedTiles, unselectedTiles] = limitSelectedTiles(\n      selectedTiles,\n      frameState,\n      this.options.maximumTilesSelected\n    );\n    currentFrameStateData.selectedTiles = filteredSelectedTiles;\n    for (const tile of unselectedTiles) {\n      tile.unselect();\n    }\n\n    currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n    currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this.traverseCounter--;\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    this._updateTiles();\n  }\n\n  /**\n   * Update tiles relying on data from all traversers\n   */\n  _updateTiles(): void {\n    this.selectedTiles = [];\n    this._requestedTiles = [];\n    this._emptyTiles = [];\n\n    for (const frameStateKey in this.frameStateData) {\n      const frameStateDataValue = this.frameStateData[frameStateKey];\n      this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n      this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n      this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n    }\n\n    this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n\n    this._loadTiles();\n    this._unloadTiles();\n    this._updateStats();\n  }\n\n  _tilesChanged(oldSelectedTiles: Tile3D[], selectedTiles: Tile3D[]): boolean {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map((t) => t.id));\n    const set2 = new Set(selectedTiles.map((t) => t.id));\n    let changed = oldSelectedTiles.filter((x) => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter((x) => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles(): void {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._loadTile(tile);\n      }\n    }\n  }\n\n  _unloadTiles(): void {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats(): void {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable && tile.content) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        } else {\n          // Calculate vertices for non point cloud tiles.\n          pointsRenderable += tile.content.vertexCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  async _initializeTileSet(tilesetJson: TilesetJSON): Promise<void> {\n    if (this.type === TILESET_TYPE.I3S) {\n      this.calculateViewPropsI3S();\n      tilesetJson.root = await tilesetJson.root;\n    }\n    this.root = this._initializeTileHeaders(tilesetJson, null);\n\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeTiles3DTileset(tilesetJson);\n      this.calculateViewPropsTiles3D();\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset();\n    }\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset\n   * For I3S there is extent (<1.8 version) or fullExtent (>=1.8 version) to calculate view props\n   * @returns\n   */\n  private calculateViewPropsI3S(): void {\n    // for I3S 1.8 try to calculate with fullExtent\n    const fullExtent = this.tileset.fullExtent;\n    if (fullExtent) {\n      const {xmin, xmax, ymin, ymax, zmin, zmax} = fullExtent;\n      this.cartographicCenter = new Vector3(\n        xmin + (xmax - xmin) / 2,\n        ymin + (ymax - ymin) / 2,\n        zmin + (zmax - zmin) / 2\n      );\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromFullExtent(fullExtent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // for I3S 1.6-1.7 try to calculate with extent\n    const extent = this.tileset.store?.extent;\n    if (extent) {\n      const [xmin, ymin, xmax, ymax] = extent;\n      this.cartographicCenter = new Vector3(xmin + (xmax - xmin) / 2, ymin + (ymax - ymin) / 2, 0);\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromExtent(extent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console.warn('Extent is not defined in the tileset header');\n    this.cartographicCenter = new Vector3();\n    this.zoom = 1;\n    return;\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset.\n   * For 3DTiles the root tile data is used to calculate view props.\n   * @returns\n   */\n  private calculateViewPropsTiles3D() {\n    const root = this.root as Tile3D;\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line no-console\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n\n    // cartographic coordinates are undefined at the center of the ellipsoid\n    if (center[0] !== 0 || center[1] !== 0 || center[2] !== 0) {\n      this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    } else {\n      this.cartographicCenter = new Vector3(0, 0, -Ellipsoid.WGS84.radii[0]);\n    }\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT);\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson: TilesetJSON, parentTileHeader?: any) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // 3DTiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack: Tile3D[] = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop() as Tile3D;\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile);\n\n          // Special handling for Google\n          // A session key must be used for all tile requests\n          if (childTile.contentUrl?.includes('?session=')) {\n            const url = new URL(childTile.contentUrl);\n            const session = url.searchParams.get('session');\n            if (session) {\n              this._queryParams.session = session;\n            }\n          }\n\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser(): TilesetTraverser {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3STilesetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile: Tile3D): void {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile: Tile3D): Promise<void> {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent();\n    } catch (error: unknown) {\n      this._onTileLoadError(tile, error instanceof Error ? error : new Error('load failed'));\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile: Tile3D, error: Error): void {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile: Tile3D, loaded: boolean): void {\n    if (!loaded) {\n      return;\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      // We can't calculate tiles total in I3S in advance so we calculate it dynamically.\n      const nodesInNodePages = this.tileset?.nodePagesTile?.nodesInNodePages || 0;\n      this.stats.get(TILES_TOTAL).reset();\n      this.stats.get(TILES_TOTAL).addCount(nodesInNodePages);\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this.updateContentTypes(tile);\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  /**\n   * Update information about data types in nested tiles\n   * @param tile instance of a nested Tile3D\n   */\n  private updateContentTypes(tile: Tile3D) {\n    if (this.type === TILESET_TYPE.I3S) {\n      if (tile.header.isDracoGeometry) {\n        this.contentFormats.draco = true;\n      }\n      switch (tile.header.textureFormat) {\n        case 'dds':\n          this.contentFormats.dds = true;\n          break;\n        case 'ktx2':\n          this.contentFormats.ktx2 = true;\n          break;\n        default:\n      }\n    } else if (this.type === TILESET_TYPE.TILES3D) {\n      const {extensionsRemoved = []} = tile.content?.gltf || {};\n      if (extensionsRemoved.includes('KHR_draco_mesh_compression')) {\n        this.contentFormats.draco = true;\n      }\n      if (extensionsRemoved.includes('EXT_meshopt_compression')) {\n        this.contentFormats.meshopt = true;\n      }\n      if (extensionsRemoved.includes('KHR_texture_basisu')) {\n        this.contentFormats.ktx2 = true;\n      }\n    }\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile: Tile3D) {\n    this._cache.add(this, tile, (tileset) => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.gpuMemoryUsageInBytes || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= tile.gpuMemoryUsageInBytes || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack: Tile3D[] = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile: Tile3D = stack.pop() as Tile3D;\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack: Tile3D[] = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeTiles3DTileset(tilesetJson) {\n    if (tilesetJson.queryString) {\n      const searchParams = new URLSearchParams(tilesetJson.queryString);\n      const queryParams = Object.fromEntries(searchParams.entries());\n      this._queryParams = {...this._queryParams, ...queryParams};\n    }\n\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description || '';\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed || [];\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset() {\n    // @ts-expect-error\n    if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n      this._queryParams.token = this.loadOptions.i3s.token as string;\n    }\n  }\n}\n"],"mappings":"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"}