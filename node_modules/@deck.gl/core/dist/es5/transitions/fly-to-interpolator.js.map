{"version":3,"sources":["../../../src/transitions/fly-to-interpolator.ts"],"names":["LINEARLY_INTERPOLATED_PROPS","bearing","pitch","position","DEFAULT_OPTS","speed","curve","FlyToInterpolator","opts","compare","extract","required","startProps","endProps","t","viewport","key","transitionDuration","TransitionInterpolator"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;AAEA,IAAMA,2BAA2B,GAAG;AAClCC,EAAAA,OAAO,EAAE,CADyB;AAElCC,EAAAA,KAAK,EAAE,CAF2B;AAGlCC,EAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAHwB,CAApC;AAKA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,GADY;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;;IAYqBC,iB;;;;;AAQnB,+BAWE;AAAA;;AAAA,QAVAC,IAUA,uEADI,EACJ;AAAA;AACA,8BAAM;AACJC,MAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,EAAsD,UAAtD,CADL;AAEJC,MAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,EAAiC,UAAjC,EAA6C,MAA7C,EAAqD,SAArD,EAAgE,OAAhE,EAAyE,UAAzE,CAFL;AAGJC,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,WAAhC,EAA6C,MAA7C;AAHN,KAAN;AADA;AAMA,UAAKH,IAAL,mCAAgBJ,YAAhB,GAAiCI,IAAjC;AANA;AAOD;;;;WAED,0BAAiBI,UAAjB,EAA6BC,QAA7B,EAAuCC,CAAvC,EAA0C;AACxC,UAAMC,QAAQ,GAAG,gCAAcH,UAAd,EAA0BC,QAA1B,EAAoCC,CAApC,EAAuC,KAAKN,IAA5C,CAAjB;;AAOA,WAAK,IAAMQ,GAAX,IAAkBhB,2BAAlB,EAA+C;AAC7Ce,QAAAA,QAAQ,CAACC,GAAD,CAAR,GAAgB,gBACdJ,UAAU,CAACI,GAAD,CAAV,IAAmBhB,2BAA2B,CAACgB,GAAD,CADhC,EAEdH,QAAQ,CAACG,GAAD,CAAR,IAAiBhB,2BAA2B,CAACgB,GAAD,CAF9B,EAGdF,CAHc,CAAhB;AAKD;;AAED,aAAOC,QAAP;AACD;;;WAGD,qBAAYH,UAAZ,EAAwBC,QAAxB,EAAkC;AAChC,UAAKI,kBAAL,GAA2BJ,QAA3B,CAAKI,kBAAL;;AACA,UAAIA,kBAAkB,KAAK,MAA3B,EAAmC;AAEjCA,QAAAA,kBAAkB,GAAG,mCAAiBL,UAAjB,EAA6BC,QAA7B,EAAuC,KAAKL,IAA5C,CAArB;AACD;;AACD,aAAOS,kBAAP;AACD;;;EAvD4CC,+B","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from '@math.gl/core';\n\nimport {flyToViewport, getFlyToDuration} from '@math.gl/web-mercator';\n\nconst LINEARLY_INTERPOLATED_PROPS = {\n  bearing: 0,\n  pitch: 0,\n  position: [0, 0, 0]\n};\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n};\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class FlyToInterpolator extends TransitionInterpolator {\n  opts: {\n    curve: number;\n    speed: number;\n    screenSpeed?: number;\n    maxDuration?: number;\n  };\n\n  constructor(\n    opts: {\n      /** The zooming \"curve\" that will occur along the flight path. Default 1.414 */\n      curve?: number;\n      /** The average speed of the animation defined in relation to `options.curve`, it linearly affects the duration, higher speed returns smaller durations and vice versa. Default 1.2 */\n      speed?: number;\n      /** The average speed of the animation measured in screenfuls per second. Similar to `opts.speed` it linearly affects the duration,  when specified `opts.speed` is ignored. */\n      screenSpeed?: number;\n      /** Maximum duration in milliseconds, if calculated duration exceeds this value, `0` is returned. */\n      maxDuration?: number;\n    } = {}\n  ) {\n    super({\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n    this.opts = {...DEFAULT_OPTS, ...opts};\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.opts);\n\n    // Linearly interpolate 'bearing', 'pitch' and 'position'.\n    // If they are not supplied, they are interpreted as zeros in viewport calculation\n    // (fallback defined in WebMercatorViewport)\n    // Because there is no guarantee that the current controller's ViewState normalizes\n    // these props, safe guard is needed to avoid generating NaNs\n    for (const key in LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(\n        startProps[key] || LINEARLY_INTERPOLATED_PROPS[key],\n        endProps[key] || LINEARLY_INTERPOLATED_PROPS[key],\n        t\n      );\n    }\n\n    return viewport;\n  }\n\n  // computes the transition duration\n  getDuration(startProps, endProps) {\n    let {transitionDuration} = endProps;\n    if (transitionDuration === 'auto') {\n      // auto calculate duration based on start and end props\n      transitionDuration = getFlyToDuration(startProps, endProps, this.opts);\n    }\n    return transitionDuration;\n  }\n}\n"],"file":"fly-to-interpolator.js"}