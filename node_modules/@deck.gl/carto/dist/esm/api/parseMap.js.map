{"version":3,"sources":["../../../src/api/parseMap.ts"],"names":["AGGREGATION","getLayer","getColorAccessor","getColorValueAccessor","getSizeAccessor","getTextAccessor","OPACITY_MAP","opacityToAlpha","getIconUrlAccessor","negateAccessor","getMaxMarkerSize","PointLabelLayer","log","CollisionFilterExtension","assert","collisionFilterExtension","parseMap","json","keplerMapConfig","datasets","token","version","mapState","mapStyle","config","layers","layerBlending","interactionConfig","visState","id","title","description","createdAt","updatedAt","initialViewState","reverse","map","type","visualChannels","dataId","dataset","find","d","data","Layer","propMap","defaultProps","styleProps","createStyleProps","createInteractionProps","createChannelProps","createParametersProp","parameters","createLoadOptions","e","error","message","undefined","blendFunc","blendEquation","Object","keys","length","pickable","tooltip","enabled","autoHighlight","mapProps","source","target","mapping","sourceKey","sourceValue","targetKey","key","value","entries","result","stroked","getLineColor","getFillColor","colorAccessor","Array","isArray","color","opacityKey","opacity","visConfig","highlightColor","enable3d","colorField","colorScale","radiusField","radiusScale","sizeField","sizeScale","strokeColorField","strokeColorScale","heightField","heightScale","textLabel","colorScaleType","colorAggregation","getColorValue","getColorWeight","name","aggregation","colorRange","range","altitude","columns","dataTransform","features","forEach","geometry","properties","coordinates","getPointRadius","sizeAggregation","radiusRange","sizeRange","fallbackOpacity","strokeOpacity","strokeColorAggregation","strokeColorRange","getElevation","heightAggregation","heightRange","customMarkers","maxIconSize","customMarkersUrl","customMarkersRange","filled","useMaskedIcons","pointType","getIcon","customMarkersField","fallbackUrl","_subLayerProps","loadOptions","image","imagebitmap","resizeWidth","resizeHeight","resizeQuality","getIconColor","getIconSize","rotationField","getIconAngle","field","mainLabel","secondaryLabel","collisionGroup","alignment","getTextAlignmentBaseline","anchor","getTextAnchor","getTextColor","outlineColor","textOutlineColor","size","textSizeScale","getSecondaryColor","secondaryField","secondaryOutlineColor","secondarySizeScale","getText","getSecondaryText","textCharacterSet","textFontFamily","textFontSettings","sdf","textFontWeight","textOutlineWidth","extensions","collisionEnabled","getRadius","radius","accessToken","fetch","headers","Authorization"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {\n  AGGREGATION,\n  getLayer,\n  getColorAccessor,\n  getColorValueAccessor,\n  getSizeAccessor,\n  getTextAccessor,\n  OPACITY_MAP,\n  opacityToAlpha,\n  getIconUrlAccessor,\n  negateAccessor,\n  getMaxMarkerSize\n} from './layer-map';\nimport PointLabelLayer from '../layers/point-label-layer';\nimport {log} from '@deck.gl/core';\nimport {CollisionFilterExtension} from '@deck.gl/extensions';\nimport {assert} from '../utils';\nimport {MapDataset, MapLayerConfig, VisualChannels} from './types';\n\nconst collisionFilterExtension = new CollisionFilterExtension();\n\nexport function parseMap(json) {\n  const {keplerMapConfig, datasets, token} = json;\n  assert(keplerMapConfig.version === 'v1', 'Only support Kepler v1');\n  const {mapState, mapStyle} = keplerMapConfig.config;\n  const {layers, layerBlending, interactionConfig} = keplerMapConfig.config.visState;\n\n  return {\n    id: json.id,\n    title: json.title,\n    description: json.description,\n    createdAt: json.createdAt,\n    updatedAt: json.updatedAt,\n    initialViewState: mapState,\n    mapStyle,\n    token,\n    layers: layers.reverse().map(({id, type, config, visualChannels}) => {\n      try {\n        const {dataId} = config;\n        const dataset: MapDataset | null = datasets.find(d => d.id === dataId);\n        assert(dataset, `No dataset matching dataId: ${dataId}`);\n        const {data} = dataset;\n        assert(data, `No data loaded for dataId: ${dataId}`);\n        const {Layer, propMap, defaultProps} = getLayer(type, config, dataset);\n        const styleProps = createStyleProps(config, propMap);\n        return new Layer({\n          id,\n          data,\n          ...defaultProps,\n          ...createInteractionProps(interactionConfig),\n          ...styleProps,\n          ...createChannelProps(id, type, config, visualChannels, data), // Must come after style\n          ...createParametersProp(layerBlending, styleProps.parameters || {}), // Must come after style\n          ...createLoadOptions(token)\n        });\n      } catch (e: any) {\n        log.error(e.message)();\n        return undefined;\n      }\n    })\n  };\n}\n\nfunction createParametersProp(layerBlending, parameters: Record<string, any>) {\n  if (layerBlending === 'additive') {\n    parameters.blendFunc = [GL.SRC_ALPHA, GL.DST_ALPHA];\n    parameters.blendEquation = GL.FUNC_ADD;\n  } else if (layerBlending === 'subtractive') {\n    parameters.blendFunc = [GL.ONE, GL.ONE_MINUS_DST_COLOR, GL.SRC_ALPHA, GL.DST_ALPHA];\n    parameters.blendEquation = [GL.FUNC_SUBTRACT, GL.FUNC_ADD];\n  }\n\n  return Object.keys(parameters).length ? {parameters} : {};\n}\n\nfunction createInteractionProps(interactionConfig) {\n  const pickable = interactionConfig && interactionConfig.tooltip.enabled;\n  return {\n    autoHighlight: pickable,\n    pickable\n  };\n}\n\nfunction mapProps(source, target, mapping) {\n  for (const sourceKey in mapping) {\n    const sourceValue = source[sourceKey];\n    const targetKey = mapping[sourceKey];\n    if (sourceValue === undefined) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (typeof targetKey === 'string') {\n      target[targetKey] = sourceValue;\n    } else if (typeof targetKey === 'function') {\n      const [key, value] = Object.entries(targetKey(sourceValue))[0];\n      target[key] = value;\n    } else if (typeof targetKey === 'object') {\n      // Nested definition, recurse down one level (also handles arrays)\n      mapProps(sourceValue, target, targetKey);\n    }\n  }\n}\n\nfunction createStyleProps(config: MapLayerConfig, mapping) {\n  const result: Record<string, any> = {};\n  mapProps(config, result, mapping);\n\n  // Kepler format sometimes omits strokeColor. TODO: remove once we can rely on\n  // `strokeColor` always being set when `stroke: true`.\n  if (result.stroked && !result.getLineColor) {\n    result.getLineColor = result.getFillColor;\n  }\n\n  for (const colorAccessor in OPACITY_MAP) {\n    if (Array.isArray(result[colorAccessor])) {\n      const color = [...result[colorAccessor]];\n      const opacityKey = OPACITY_MAP[colorAccessor];\n      const opacity = config.visConfig[opacityKey];\n      color[3] = opacityToAlpha(opacity);\n      result[colorAccessor] = color;\n    }\n  }\n\n  result.highlightColor = config.visConfig.enable3d ? [255, 255, 255, 60] : [252, 242, 26, 255];\n  return result;\n}\n\n/* eslint-disable complexity, max-statements */\nfunction createChannelProps(\n  id: string,\n  type: string,\n  config: MapLayerConfig,\n  visualChannels: VisualChannels,\n  data\n) {\n  const {\n    colorField,\n    colorScale,\n    radiusField,\n    radiusScale,\n    sizeField,\n    sizeScale,\n    strokeColorField,\n    strokeColorScale\n  } = visualChannels;\n  let {heightField, heightScale} = visualChannels;\n  if (type === 'hexagonId') {\n    heightField = sizeField;\n    heightScale = sizeScale;\n  }\n  const {textLabel, visConfig} = config;\n  const result: Record<string, any> = {};\n\n  if (type === 'grid' || type === 'hexagon') {\n    result.colorScaleType = colorScale;\n    if (colorField) {\n      const {colorAggregation} = config.visConfig;\n      if (!AGGREGATION[colorAggregation]) {\n        result.getColorValue = getColorValueAccessor(colorField, colorAggregation, data);\n      } else {\n        result.getColorWeight = d => d[colorField.name];\n      }\n    }\n  } else if (colorField) {\n    const {colorAggregation: aggregation, colorRange: range} = visConfig;\n    result.getFillColor = getColorAccessor(\n      colorField,\n      // @ts-ignore\n      colorScale,\n      {aggregation, range},\n      visConfig.opacity,\n      data\n    );\n  }\n\n  if (type === 'point') {\n    const altitude = config.columns?.altitude;\n    if (altitude) {\n      result.dataTransform = data => {\n        data.features.forEach(({geometry, properties}) => {\n          const {type, coordinates} = geometry;\n          if (type === 'Point') {\n            coordinates[2] = properties[altitude];\n          }\n        });\n        return data;\n      };\n    }\n  }\n\n  if (radiusField || sizeField) {\n    result.getPointRadius = getSizeAccessor(\n      // @ts-ignore\n      radiusField || sizeField,\n      // @ts-ignore\n      radiusScale || sizeScale,\n      visConfig.sizeAggregation,\n      visConfig.radiusRange || visConfig.sizeRange,\n      data\n    );\n  }\n\n  if (strokeColorField) {\n    const fallbackOpacity = type === 'point' ? visConfig.opacity : 1;\n    const opacity =\n      visConfig.strokeOpacity !== undefined ? visConfig.strokeOpacity : fallbackOpacity;\n    const {strokeColorAggregation: aggregation, strokeColorRange: range} = visConfig;\n    result.getLineColor = getColorAccessor(\n      strokeColorField,\n      // @ts-ignore\n      strokeColorScale,\n      // @ts-ignore\n      {aggregation, range},\n      opacity,\n      data\n    );\n  }\n\n  if (heightField && visConfig.enable3d) {\n    result.getElevation = getSizeAccessor(\n      heightField,\n      // @ts-ignore\n      heightScale,\n      visConfig.heightAggregation,\n      visConfig.heightRange || visConfig.sizeRange,\n      data\n    );\n  }\n\n  if (visConfig.customMarkers) {\n    const maxIconSize = getMaxMarkerSize(visConfig, visualChannels);\n    const {getPointRadius, getFillColor} = result;\n    const {customMarkersUrl, customMarkersRange, filled: useMaskedIcons} = visConfig;\n\n    result.pointType = 'icon';\n    result.getIcon = getIconUrlAccessor(\n      visualChannels.customMarkersField,\n      customMarkersRange,\n      {fallbackUrl: customMarkersUrl, maxIconSize, useMaskedIcons},\n      data\n    );\n    result._subLayerProps = {\n      'points-icon': {\n        loadOptions: {\n          image: {\n            type: 'imagebitmap'\n          },\n          imagebitmap: {\n            resizeWidth: maxIconSize,\n            resizeHeight: maxIconSize,\n            resizeQuality: 'high'\n          }\n        }\n      }\n    };\n\n    if (getFillColor && useMaskedIcons) {\n      result.getIconColor = getFillColor;\n    }\n\n    if (getPointRadius) {\n      result.getIconSize = getPointRadius;\n    }\n\n    if (visualChannels.rotationField) {\n      result.getIconAngle = negateAccessor(\n        getSizeAccessor(visualChannels.rotationField, undefined, null, undefined, data)\n      );\n    }\n  } else if (type === 'point' || type === 'tileset') {\n    result.pointType = 'circle';\n  }\n\n  if (textLabel && textLabel.length && textLabel[0].field) {\n    const [mainLabel, secondaryLabel] = textLabel;\n    const collisionGroup = id;\n\n    ({\n      alignment: result.getTextAlignmentBaseline,\n      anchor: result.getTextAnchor,\n      color: result.getTextColor,\n      outlineColor: result.textOutlineColor,\n      size: result.textSizeScale\n    } = mainLabel);\n    const {\n      color: getSecondaryColor,\n      field: secondaryField,\n      outlineColor: secondaryOutlineColor,\n      size: secondarySizeScale\n    } = secondaryLabel || {};\n\n    result.getText = mainLabel.field && getTextAccessor(mainLabel.field, data);\n    const getSecondaryText = secondaryField && getTextAccessor(secondaryField, data);\n\n    result.pointType = `${result.pointType}+text`;\n    result.textCharacterSet = 'auto';\n    result.textFontFamily = 'Inter, sans';\n    result.textFontSettings = {sdf: true};\n    result.textFontWeight = 600;\n    result.textOutlineWidth = 3;\n\n    result._subLayerProps = {\n      ...result._subLayerProps,\n      'points-text': {\n        type: PointLabelLayer,\n        extensions: [collisionFilterExtension],\n        collisionEnabled: true,\n        collisionGroup,\n\n        // getPointRadius already has radiusScale baked in, so only pass one or the other\n        ...(result.getPointRadius\n          ? {getRadius: result.getPointRadius}\n          : {radiusScale: visConfig.radius}),\n\n        ...(secondaryField && {\n          getSecondaryText,\n          getSecondaryColor,\n          secondarySizeScale,\n          secondaryOutlineColor\n        })\n      }\n    };\n  }\n\n  return result;\n}\n\nfunction createLoadOptions(accessToken: string) {\n  return {\n    loadOptions: {fetch: {headers: {Authorization: `Bearer ${accessToken}`}}}\n  };\n}\n"],"file":"parseMap.js"}