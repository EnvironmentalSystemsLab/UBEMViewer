{"version":3,"sources":["../../../src/api/carto-api-error.ts"],"names":["CartoAPIError","Error","constructor","error","errorContext","response","responseString","status","message","requestType","key","Object","keys","formatErrorKey","name","replace","s","toUpperCase"],"mappings":";AAgBA,OAAO,MAAMA,aAAN,SAA4BC,KAA5B,CAAkC;AAUvCC,EAAAA,WAAW,CAACC,KAAD,EAAeC,YAAf,EAA8CC,QAA9C,EAAmE;AAC5E,QAAIC,cAAc,GAAG,mBAArB;;AACA,QAAID,QAAJ,EAAc;AACZC,MAAAA,cAAc,GAAG,mBAAjB;;AACA,UAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3BD,QAAAA,cAAc,IAAI,aAAlB;AACD,OAFD,MAEO,IAAID,QAAQ,CAACE,MAAT,KAAoB,GAApB,IAA2BF,QAAQ,CAACE,MAAT,KAAoB,GAAnD,EAAwD;AAC7DD,QAAAA,cAAc,IAAI,qBAAlB;AACD,OAFM,MAEA,IAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAClCD,QAAAA,cAAc,IAAI,WAAlB;AACD,OAFM,MAEA;AACLA,QAAAA,cAAc,IAAI,OAAlB;AACD;;AAEDA,MAAAA,cAAc,gBAASD,QAAQ,CAACE,MAAlB,OAAd;AACD;;AACDD,IAAAA,cAAc,eAAQH,KAAK,CAACK,OAAN,IAAiBL,KAAzB,CAAd;AAEA,QAAIK,OAAO,aAAMJ,YAAY,CAACK,WAAnB,wBAAX;AACAD,IAAAA,OAAO,gBAASF,cAAT,CAAP;;AACA,SAAK,MAAMI,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYR,YAAZ,CAAlB,EAA6C;AAC3C,UAAIM,GAAG,KAAK,aAAZ,EAA2B;AAC3BF,MAAAA,OAAO,gBAASK,cAAc,CAACH,GAAD,CAAvB,eAAiCN,YAAY,CAACM,GAAD,CAA7C,CAAP;AACD;;AACDF,IAAAA,OAAO,IAAI,IAAX;AAEA,UAAMA,OAAN;;AA1B4E;;AAAA;;AAAA;;AA4B5E,SAAKM,IAAL,GAAY,eAAZ;AACA,SAAKT,QAAL,GAAgBA,QAAhB;AACA,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACD;;AA1CsC;;AAgDzC,SAASS,cAAT,CAAwBH,GAAxB,EAA6B;AAC3B,SAAOA,GAAG,CAACK,OAAJ,CAAY,UAAZ,EAAwB,KAAxB,EAA+BA,OAA/B,CAAuC,IAAvC,EAA6CC,CAAC,IAAIA,CAAC,CAACC,WAAF,EAAlD,CAAP;AACD","sourcesContent":["import {MapType, RequestType} from './maps-api-common';\n\nexport type APIErrorContext = {\n  requestType: RequestType;\n  mapId?: string;\n  connection?: string;\n  source?: string;\n  type?: MapType;\n};\n\n/**\n *\n * Custom error for reported errors in CARTO Maps API.\n * Provides useful debugging information in console and context for applications.\n *\n */\nexport class CartoAPIError extends Error {\n  /** Source error from server */\n  error: Error;\n\n  /** Context (API call & parameters) in which error occured */\n  errorContext: APIErrorContext;\n\n  /** Response from server */\n  response?: Response;\n\n  constructor(error: Error, errorContext: APIErrorContext, response?: Response) {\n    let responseString = 'Failed to connect';\n    if (response) {\n      responseString = 'Server returned: ';\n      if (response.status === 400) {\n        responseString += 'Bad request';\n      } else if (response.status === 401 || response.status === 403) {\n        responseString += 'Unauthorized access';\n      } else if (response.status === 404) {\n        responseString += 'Not found';\n      } else {\n        responseString += 'Error';\n      }\n\n      responseString += ` (${response.status}):`;\n    }\n    responseString += ` ${error.message || error}`;\n\n    let message = `${errorContext.requestType} API request failed`;\n    message += `\\n${responseString}`;\n    for (const key of Object.keys(errorContext)) {\n      if (key === 'requestType') continue; // eslint-disable-line no-continue\n      message += `\\n${formatErrorKey(key)}: ${errorContext[key]}`;\n    }\n    message += '\\n';\n\n    super(message);\n\n    this.name = 'CartoAPIError';\n    this.response = response;\n    this.error = error;\n    this.errorContext = errorContext;\n  }\n}\n\n/**\n * Converts camelCase to Camel Case\n */\nfunction formatErrorKey(key) {\n  return key.replace(/([A-Z])/g, ' $1').replace(/^./, s => s.toUpperCase());\n}\n"],"file":"carto-api-error.js"}