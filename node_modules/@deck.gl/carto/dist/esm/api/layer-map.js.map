{"version":3,"sources":["../../../src/api/layer-map.ts"],"names":["deviation","extent","groupSort","median","variance","rgb","scaleLinear","scaleOrdinal","scaleLog","scalePoint","scaleQuantile","scaleQuantize","scaleSqrt","scaleThreshold","format","d3Format","moment","CPUGridLayer","HeatmapLayer","HexagonLayer","GeoJsonLayer","H3HexagonLayer","MVTLayer","CartoTileLayer","H3TileLayer","QuadbinTileLayer","RasterTileLayer","TILE_FORMATS","assert","createBinaryProxy","SCALE_FUNCS","linear","ordinal","log","point","quantile","quantize","sqrt","custom","identity","v","UNKNOWN_COLOR","AGGREGATION","average","maximum","minimum","sum","OPACITY_MAP","getFillColor","getLineColor","getTextColor","AGGREGATION_FUNC","values","accessor","length","mode","pop","stddev","hexToRGBA","c","r","g","b","opacity","sharedPropMap","color","isVisible","label","textLabel","alignment","anchor","size","visConfig","enable3d","elevationScale","filled","strokeColor","stroked","thickness","radius","wireframe","customMarkersPropsMap","aggregationVisConfig","colorAggregation","x","colorRange","colors","map","coverage","elevationPercentile","percentile","defaultProps","lineMiterLimit","lineWidthUnits","pointRadiusUnits","rounded","wrapLongitude","mergePropMaps","a","getLayer","type","config","dataset","basePropMap","customMarkers","getTileLayer","geoColumn","getPosition","d","coordinates","hexagonId","columns","hex_id","layerTypeDefs","Layer","propMap","altitude","parameters","depthTest","Boolean","outline","geojson","grid","worldUnitSize","cellSize","heatmap","hexagon","getHexagon","layer","layerFromTileDataset","formatTiles","MVT","scheme","aggregationExp","aggregationResLevel","data","tiles","tileUrl","URL","searchParams","get","uniqueIdProperty","domainFromAttribute","attribute","scaleType","scaleLength","categories","category","filter","undefined","quantiles","min","max","domainFromValues","sort","d0","d1","calculateDomain","name","tilestats","attributes","layers","find","features","properties","Array","isArray","normalizeAccessor","object","info","__source","index","proxy","opacityToAlpha","Math","round","pow","getAccessorKeys","aggregation","keys","concat","toUpperCase","findAccessorKey","key","Error","getColorValueAccessor","aggregator","p","getColorAccessor","range","colorMap","scale","domain","scaleColor","forEach","value","push","slice","unknown","alpha","accessorKeys","propertyValue","FALLBACK_ICON","getIconUrlAccessor","field","fallbackUrl","maxIconSize","useMaskedIcons","urlToUnpackedIcon","url","id","width","height","mask","unknownValue","othersMarker","unknownIcon","mapping","markerUrl","markerMap","getMaxMarkerSize","visualChannels","radiusRange","radiusField","sizeField","ceil","negateAccessor","i","getSizeAccessor","FORMATS","date","s","utc","integer","float","timestamp","default","String","getTextAccessor","_domainFromValues"],"mappings":"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","sourcesContent":["import {deviation, extent, groupSort, median, variance} from 'd3-array';\nimport {rgb} from 'd3-color';\nimport {\n  scaleLinear,\n  scaleOrdinal,\n  scaleLog,\n  scalePoint,\n  scaleQuantile,\n  scaleQuantize,\n  scaleSqrt,\n  scaleThreshold\n} from 'd3-scale';\nimport {format as d3Format} from 'd3-format';\nimport moment from 'moment-timezone';\n\nimport {Accessor, Layer, _ConstructorOf as ConstructorOf} from '@deck.gl/core';\nimport {CPUGridLayer, HeatmapLayer, HexagonLayer} from '@deck.gl/aggregation-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {H3HexagonLayer, MVTLayer} from '@deck.gl/geo-layers';\n\nimport CartoTileLayer from '../layers/carto-tile-layer';\nimport H3TileLayer from '../layers/h3-tile-layer';\nimport QuadbinTileLayer from '../layers/quadbin-tile-layer';\nimport RasterTileLayer from '../layers/raster-tile-layer';\nimport {MapType, TILE_FORMATS, TileFormat} from './maps-api-common';\nimport {assert, createBinaryProxy} from '../utils';\nimport {\n  CustomMarkersRange,\n  MapDataset,\n  MapTextSubLayerConfig,\n  VisConfig,\n  VisualChannelField,\n  VisualChannels\n} from './types';\n\nconst SCALE_FUNCS = {\n  linear: scaleLinear,\n  ordinal: scaleOrdinal,\n  log: scaleLog,\n  point: scalePoint,\n  quantile: scaleQuantile,\n  quantize: scaleQuantize,\n  sqrt: scaleSqrt,\n  custom: scaleThreshold\n};\nexport type SCALE_TYPE = keyof typeof SCALE_FUNCS;\n\nfunction identity<T>(v: T): T {\n  return v;\n}\n\nconst UNKNOWN_COLOR = '#868d91';\n\nexport const AGGREGATION = {\n  average: 'MEAN',\n  maximum: 'MAX',\n  minimum: 'MIN',\n  sum: 'SUM'\n};\n\nexport const OPACITY_MAP = {\n  getFillColor: 'opacity',\n  getLineColor: 'strokeOpacity',\n  getTextColor: 'opacity'\n};\n\nconst AGGREGATION_FUNC = {\n  'count unique': (values, accessor) => groupSort(values, v => v.length, accessor).length,\n  median,\n  // Unfortunately mode() is only available in d3-array@3+ which is ESM only\n  mode: (values, accessor) => groupSort(values, v => v.length, accessor).pop(),\n  stddev: deviation,\n  variance\n};\n\nconst hexToRGBA = c => {\n  const {r, g, b, opacity} = rgb(c);\n  return [r, g, b, 255 * opacity];\n};\n\n// Kepler prop value -> Deck.gl prop value\n// Supports nested definitions, and function transforms:\n//   {keplerProp: 'deckProp'} is equivalent to:\n//   {keplerProp: x => ({deckProp: x})}\nconst sharedPropMap = {\n  // Apply the value of Kepler `color` prop to the deck `getFillColor` prop\n  color: 'getFillColor',\n  isVisible: 'visible',\n  label: 'cartoLabel',\n  textLabel: {\n    alignment: 'getTextAlignmentBaseline',\n    anchor: 'getTextAnchor',\n    // Apply the value of Kepler `textLabel.color` prop to the deck `getTextColor` prop\n    color: 'getTextColor',\n    size: 'getTextSize'\n  },\n  visConfig: {\n    enable3d: 'extruded',\n    elevationScale: 'elevationScale',\n    filled: 'filled',\n    strokeColor: 'getLineColor',\n    stroked: 'stroked',\n    thickness: 'getLineWidth',\n    radius: 'getPointRadius',\n    wireframe: 'wireframe'\n  }\n};\n\nconst customMarkersPropsMap = {\n  color: 'getIconColor',\n  visConfig: {\n    radius: 'getIconSize'\n  }\n};\n\nconst aggregationVisConfig = {\n  colorAggregation: x => ({colorAggregation: AGGREGATION[x] || AGGREGATION.sum}),\n  colorRange: x => ({colorRange: x.colors.map(hexToRGBA)}),\n  coverage: 'coverage',\n  elevationPercentile: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n  percentile: ['lowerPercentile', 'upperPercentile']\n};\n\nconst defaultProps = {\n  lineMiterLimit: 2,\n  lineWidthUnits: 'pixels',\n  pointRadiusUnits: 'pixels',\n  rounded: true,\n  wrapLongitude: false\n};\n\nfunction mergePropMaps(a: Record<string, any> = {}, b: Record<string, any> = {}) {\n  return {...a, ...b, visConfig: {...a.visConfig, ...b.visConfig}};\n}\n\nexport function getLayer(\n  type: string,\n  config: MapTextSubLayerConfig,\n  dataset: MapDataset\n): {Layer: ConstructorOf<Layer>; propMap: any; defaultProps: any} {\n  let basePropMap: any = sharedPropMap;\n\n  if (config.visConfig?.customMarkers) {\n    basePropMap = mergePropMaps(sharedPropMap, customMarkersPropsMap);\n  }\n  if (type === 'mvt' || type === 'tileset' || type === 'h3' || type === 'quadbin') {\n    return getTileLayer(dataset, basePropMap);\n  }\n\n  const geoColumn = dataset?.geoColumn;\n  const getPosition = d => d[geoColumn].coordinates;\n\n  const hexagonId = config.columns?.hex_id;\n\n  const layerTypeDefs: Record<\n    string,\n    {Layer: ConstructorOf<Layer>; propMap?: any; defaultProps?: any}\n  > = {\n    point: {\n      Layer: GeoJsonLayer,\n      propMap: {\n        columns: {\n          altitude: x => ({parameters: {depthTest: Boolean(x)}})\n        },\n        visConfig: {outline: 'stroked'}\n      }\n    },\n    geojson: {\n      Layer: GeoJsonLayer\n    },\n    grid: {\n      Layer: CPUGridLayer,\n      propMap: {visConfig: {...aggregationVisConfig, worldUnitSize: x => ({cellSize: 1000 * x})}},\n      defaultProps: {getPosition}\n    },\n    heatmap: {\n      Layer: HeatmapLayer,\n      propMap: {visConfig: {...aggregationVisConfig, radius: 'radiusPixels'}},\n      defaultProps: {getPosition}\n    },\n    hexagon: {\n      Layer: HexagonLayer,\n      propMap: {visConfig: {...aggregationVisConfig, worldUnitSize: x => ({radius: 1000 * x})}},\n      defaultProps: {getPosition}\n    },\n    hexagonId: {\n      Layer: H3HexagonLayer,\n      propMap: {visConfig: {coverage: 'coverage'}},\n      defaultProps: {getHexagon: d => d[hexagonId], stroked: false}\n    }\n  };\n\n  const layer = layerTypeDefs[type];\n\n  assert(layer, `Unsupported layer type: ${type}`);\n  return {\n    ...layer,\n    propMap: mergePropMaps(basePropMap, layer.propMap),\n    defaultProps: {...defaultProps, ...layer.defaultProps}\n  };\n}\n\nexport function layerFromTileDataset(\n  formatTiles: TileFormat | null = TILE_FORMATS.MVT,\n  scheme: string,\n  type?: MapType\n): typeof CartoTileLayer | typeof H3TileLayer | typeof MVTLayer | typeof QuadbinTileLayer {\n  if (type === 'raster') {\n    return RasterTileLayer;\n  }\n  if (scheme === 'h3') {\n    return H3TileLayer;\n  }\n  if (scheme === 'quadbin') {\n    return QuadbinTileLayer;\n  }\n  if (formatTiles === 'mvt') {\n    return MVTLayer;\n  }\n\n  // formatTiles === BINARY|JSON|GEOJSON\n  return CartoTileLayer;\n}\n\nfunction getTileLayer(dataset: MapDataset, basePropMap) {\n  const {\n    aggregationExp,\n    aggregationResLevel,\n    data: {\n      scheme,\n      tiles: [tileUrl]\n    }\n  } = dataset;\n  /* global URL */\n  const formatTiles = new URL(tileUrl).searchParams.get('formatTiles') as TileFormat;\n\n  return {\n    Layer: layerFromTileDataset(formatTiles, scheme),\n    propMap: basePropMap,\n    defaultProps: {\n      ...defaultProps,\n      ...(aggregationExp && {aggregationExp}),\n      ...(aggregationResLevel && {aggregationResLevel}),\n      formatTiles,\n      uniqueIdProperty: 'geoid'\n    }\n  };\n}\n\nfunction domainFromAttribute(attribute, scaleType: SCALE_TYPE, scaleLength: number) {\n  if (scaleType === 'ordinal' || scaleType === 'point') {\n    return attribute.categories.map(c => c.category).filter(c => c !== undefined && c !== null);\n  }\n\n  if (scaleType === 'quantile' && attribute.quantiles) {\n    return attribute.quantiles[scaleLength];\n  }\n\n  let {min} = attribute;\n  if (scaleType === 'log' && min === 0) {\n    min = 1e-5;\n  }\n  return [min, attribute.max];\n}\n\nfunction domainFromValues(values, scaleType: SCALE_TYPE) {\n  if (scaleType === 'ordinal' || scaleType === 'point') {\n    return groupSort(\n      values,\n      g => -g.length,\n      d => d\n    );\n  } else if (scaleType === 'quantile') {\n    return values.sort((a, b) => a - b);\n  } else if (scaleType === 'log') {\n    const [d0, d1] = extent(values as number[]);\n    return [d0 === 0 ? 1e-5 : d0, d1];\n  }\n  return extent(values);\n}\n\nfunction calculateDomain(data, name, scaleType, scaleLength?) {\n  if (data.tilestats) {\n    // Tileset data type\n    const {attributes} = data.tilestats.layers[0];\n    const attribute = attributes.find(a => a.attribute === name);\n    return domainFromAttribute(attribute, scaleType, scaleLength);\n  } else if (data.features) {\n    // GeoJSON data type\n    const values = data.features.map(({properties}) => properties[name]);\n    return domainFromValues(values, scaleType);\n  } else if (Array.isArray(data) && data[0][name] !== undefined) {\n    // JSON data type\n    const values = data.map(properties => properties[name]);\n    return domainFromValues(values, scaleType);\n  }\n\n  return [0, 1];\n}\n\nfunction normalizeAccessor(accessor, data) {\n  if (data.features || data.tilestats) {\n    return (object, info) => {\n      if (object) {\n        return accessor(object.properties || object.__source.object.properties);\n      }\n\n      const {data, index} = info;\n      const proxy = createBinaryProxy(data, index);\n      return accessor(proxy);\n    };\n  }\n  return accessor;\n}\n\nexport function opacityToAlpha(opacity?: number) {\n  return opacity !== undefined ? Math.round(255 * Math.pow(opacity, 1 / 2.2)) : 255;\n}\n\nfunction getAccessorKeys(name: string, aggregation: string | undefined): string[] {\n  let keys = [name];\n  if (aggregation) {\n    // Snowflake will capitalized the keys, need to check lower and upper case version\n    keys = keys.concat([aggregation, aggregation.toUpperCase()].map(a => `${name}_${a}`));\n  }\n  return keys;\n}\n\nfunction findAccessorKey(keys: string[], properties): string[] {\n  for (const key of keys) {\n    if (key in properties) {\n      return [key];\n    }\n  }\n\n  throw new Error(`Could not find property for any accessor key: ${keys}`);\n}\n\nexport function getColorValueAccessor({name}, colorAggregation, data: any) {\n  const aggregator = AGGREGATION_FUNC[colorAggregation];\n  const accessor = values => aggregator(values, p => p[name]);\n  return normalizeAccessor(accessor, data);\n}\n\nexport function getColorAccessor(\n  {name},\n  scaleType: SCALE_TYPE,\n  {aggregation, range: {colors, colorMap}},\n  opacity: number | undefined,\n  data: any\n) {\n  const scale = SCALE_FUNCS[scaleType as any]();\n  let domain: (string | number)[] = [];\n  let scaleColor: string[] = [];\n\n  if (Array.isArray(colorMap)) {\n    colorMap.forEach(([value, color]) => {\n      domain.push(value);\n      scaleColor.push(color);\n    });\n  } else {\n    domain = calculateDomain(data, name, scaleType, colors.length);\n    scaleColor = colors;\n  }\n\n  if (scaleType === 'ordinal') {\n    domain = domain.slice(0, scaleColor.length);\n  }\n\n  scale.domain(domain);\n  scale.range(scaleColor);\n  scale.unknown(UNKNOWN_COLOR);\n  const alpha = opacityToAlpha(opacity);\n\n  let accessorKeys = getAccessorKeys(name, aggregation);\n  const accessor = properties => {\n    if (!(accessorKeys[0] in properties)) {\n      accessorKeys = findAccessorKey(accessorKeys, properties);\n    }\n    const propertyValue = properties[accessorKeys[0]];\n    const {r, g, b} = rgb(scale(propertyValue));\n    return [r, g, b, propertyValue === null ? 0 : alpha];\n  };\n  return normalizeAccessor(accessor, data);\n}\n\nconst FALLBACK_ICON =\n  'data:image/svg+xml;charset=utf-8;base64,PHN2ZyB2aWV3Qm94PSIwIDAgMTAwIDEwMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4NCiAgPGNpcmNsZSBjeD0iNTAiIGN5PSI1MCIgcj0iNTAiLz4NCjwvc3ZnPg==';\n\nexport function getIconUrlAccessor(\n  field: VisualChannelField | null | undefined,\n  range: CustomMarkersRange | null | undefined,\n  {fallbackUrl, maxIconSize, useMaskedIcons},\n  data: any\n) {\n  const urlToUnpackedIcon = (url: string) => ({\n    id: `${url}@@${maxIconSize}`,\n    url,\n    width: maxIconSize,\n    height: maxIconSize,\n    mask: useMaskedIcons\n  });\n  let unknownValue = fallbackUrl || FALLBACK_ICON;\n\n  if (range?.othersMarker) {\n    unknownValue = range.othersMarker;\n  }\n\n  const unknownIcon = urlToUnpackedIcon(unknownValue);\n  if (!range || !field) {\n    return () => unknownIcon;\n  }\n\n  const mapping: Record<string, any> = {};\n  for (const {value, markerUrl} of range.markerMap) {\n    if (markerUrl) {\n      mapping[value] = urlToUnpackedIcon(markerUrl);\n    }\n  }\n\n  const accessor = properties => {\n    const propertyValue = properties[field.name];\n    return mapping[propertyValue] || unknownIcon;\n  };\n  return normalizeAccessor(accessor, data);\n}\n\nexport function getMaxMarkerSize(visConfig: VisConfig, visualChannels: VisualChannels): number {\n  const {radiusRange, radius} = visConfig;\n  const {radiusField, sizeField} = visualChannels;\n  const field = radiusField || sizeField;\n  return Math.ceil(radiusRange && field ? radiusRange[1] : radius);\n}\n\nexport function negateAccessor<T>(accessor: Accessor<T, number>): Accessor<T, number> {\n  return typeof accessor === 'function' ? (d, i) => -accessor(d, i) : -accessor;\n}\n\nexport function getSizeAccessor(\n  {name},\n  scaleType: SCALE_TYPE | undefined,\n  aggregation,\n  range: Iterable<Range> | undefined,\n  data: any\n) {\n  const scale = scaleType ? SCALE_FUNCS[scaleType as any]() : identity;\n  if (scaleType) {\n    if (aggregation !== 'count') {\n      scale.domain(calculateDomain(data, name, scaleType));\n    }\n    scale.range(range);\n  }\n\n  let accessorKeys = getAccessorKeys(name, aggregation);\n  const accessor = properties => {\n    if (!(accessorKeys[0] in properties)) {\n      accessorKeys = findAccessorKey(accessorKeys, properties);\n    }\n    const propertyValue = properties[accessorKeys[0]];\n    return scale(propertyValue);\n  };\n  return normalizeAccessor(accessor, data);\n}\n\nconst FORMATS: Record<string, (value: any) => string> = {\n  date: s => moment.utc(s).format('MM/DD/YY HH:mm:ssa'),\n  integer: d3Format('i'),\n  float: d3Format('.5f'),\n  timestamp: s => moment.utc(s).format('X'),\n  default: String\n};\n\nexport function getTextAccessor({name, type}: VisualChannelField, data) {\n  const format = FORMATS[type] || FORMATS.default;\n  const accessor = properties => {\n    return format(properties[name]);\n  };\n  return normalizeAccessor(accessor, data);\n}\n\nexport {domainFromValues as _domainFromValues};\n"],"file":"layer-map.js"}