{"version":3,"sources":["../../../src/layers/raster-tile-layer.ts"],"names":["CompositeLayer","RasterLayer","QuadbinTileset2D","SpatialIndexTileLayer","renderSubLayers","props","tileIndex","tile","index","q","RasterTileLayer","initializeState","setState","data","tileJSON","updateState","changeFlags","dataChanged","tiles","renderLayers","state","minZoom","parseInt","minzoom","maxZoom","maxzoom","id","TilesetClass"],"mappings":";AAAA,SACEA,cADF,QAMO,eANP;AAOA,OAAOC,WAAP,MAA4C,gBAA5C;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AAEA,OAAO,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAAA;;AACtC,QAAMC,SAAS,kBAAGD,KAAK,CAACE,IAAT,qEAAG,YAAYC,KAAf,sDAAG,kBAAmBC,CAArC;AACA,MAAI,CAACH,SAAL,EAAgB,OAAO,IAAP;AAChB,SAAO,IAAIL,WAAJ,CAAgBI,KAAhB,EAAuB;AAACC,IAAAA;AAAD,GAAvB,CAAP;AACD,CAJM;AAcP,eAAe,MAAMI,eAAN,SAGLV,cAHK,CAG+D;AAAA;AAAA;;AAAA;AAAA;;AAK5EW,EAAAA,eAAe,GAAS;AACtB,SAAKC,QAAL,CAAc;AAACC,MAAAA,IAAI,EAAE,IAAP;AAAaC,MAAAA,QAAQ,EAAE;AAAvB,KAAd;AACD;;AAEDC,EAAAA,WAAW,CAAC;AAACC,IAAAA;AAAD,GAAD,EAA8C;AACvD,QAAIA,WAAW,CAACC,WAAhB,EAA6B;AAC3B,UAAI;AAACJ,QAAAA;AAAD,UAAS,KAAKR,KAAlB;AACA,YAAMS,QAAQ,GAAGD,IAAjB;AACAA,MAAAA,IAAI,GAAIC,QAAD,CAAkBI,KAAzB;AACA,WAAKN,QAAL,CAAc;AAACC,QAAAA,IAAD;AAAOC,QAAAA;AAAP,OAAd;AACD;AACF;;AAEDK,EAAAA,YAAY,GAA8B;AACxC,UAAM;AAACN,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAmB,KAAKM,KAA9B;AACA,UAAMC,OAAO,GAAGC,QAAQ,CAACR,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAES,OAAX,CAAxB;AACA,UAAMC,OAAO,GAAGF,QAAQ,CAACR,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEW,OAAX,CAAxB;AACA,WAAO,CACL,IAAItB,qBAAJ,CAA0B,KAAKE,KAA/B,EAAsC;AACpCqB,MAAAA,EAAE,8BAAuB,KAAKrB,KAAL,CAAWqB,EAAlC,CADkC;AAEpCb,MAAAA,IAFoC;AAIpCc,MAAAA,YAAY,EAAEzB,gBAJsB;AAKpCE,MAAAA,eALoC;AAMpCiB,MAAAA,OANoC;AAOpCG,MAAAA;AAPoC,KAAtC,CADK,CAAP;AAWD;;AAjC2E;;gBAHzDd,e,eAIA,iB;;gBAJAA,e,kBAKG,E","sourcesContent":["import {\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  LayersList,\n  UpdateParameters\n} from '@deck.gl/core';\nimport RasterLayer, {RasterLayerProps} from './raster-layer';\nimport QuadbinTileset2D from './quadbin-tileset-2d';\nimport SpatialIndexTileLayer from './spatial-index-tile-layer';\n\nexport const renderSubLayers = props => {\n  const tileIndex = props.tile?.index?.q;\n  if (!tileIndex) return null;\n  return new RasterLayer(props, {tileIndex});\n};\n\n/** All properties supported by RasterTileLayer. */\nexport type RasterTileLayerProps<DataT = any> = _RasterTileLayerProps<DataT> & CompositeLayerProps;\n\n/** Properties added by RasterTileLayer. */\ntype _RasterTileLayerProps<DataT> = RasterLayerProps<DataT> & {\n  data: string;\n};\n\nexport default class RasterTileLayer<\n  DataT = any,\n  ExtraProps extends {} = {}\n> extends CompositeLayer<ExtraProps & Required<_RasterTileLayerProps<DataT>>> {\n  static layerName = 'RasterTileLayer';\n  static defaultProps = {};\n\n  state!: {tileJSON: any; data: any};\n  initializeState(): void {\n    this.setState({data: null, tileJSON: null});\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>): void {\n    if (changeFlags.dataChanged) {\n      let {data} = this.props;\n      const tileJSON = data;\n      data = (tileJSON as any).tiles;\n      this.setState({data, tileJSON});\n    }\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    const {data, tileJSON} = this.state;\n    const minZoom = parseInt(tileJSON?.minzoom);\n    const maxZoom = parseInt(tileJSON?.maxzoom);\n    return [\n      new SpatialIndexTileLayer(this.props, {\n        id: `raster-tile-layer-${this.props.id}`,\n        data,\n        // TODO: Tileset2D should be generic over TileIndex type\n        TilesetClass: QuadbinTileset2D as any,\n        renderSubLayers,\n        minZoom,\n        maxZoom\n      })\n    ];\n  }\n}\n"],"file":"raster-tile-layer.js"}