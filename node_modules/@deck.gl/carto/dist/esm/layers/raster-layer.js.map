{"version":3,"sources":["../../../src/layers/raster-layer.ts"],"names":["CompositeLayer","ColumnLayer","quadbinToOffset","vs","assert","createBinaryProxy","defaultProps","extruded","diskResolution","vertices","RasterColumnLayer","getShaders","shaders","initializeState","attributeManager","getAttributeManager","addInstanced","instanceElevations","size","transition","accessor","instanceFillColors","props","colorFormat","length","type","normalized","defaultValue","instanceLineColors","RasterLayer","renderLayers","data","getElevation","getFillColor","getLineColor","getLineWidth","tileIndex","updateTriggers","blockWidth","blockHeight","xOffset","yOffset","scale","offset","CellLayer","getSubLayerClass","getSubLayerProps","id","getSubLayerAccessor","object","info","index","binaryData","proxy","cells","properties"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {\n  Accessor,\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  LayersList,\n  DefaultProps\n} from '@deck.gl/core';\nimport {ColumnLayer, ColumnLayerProps} from '@deck.gl/layers';\nimport {quadbinToOffset} from './quadbin-utils';\nimport {Raster} from './schema/carto-raster-tile-loader';\nimport vs from './raster-layer-vertex.glsl';\nimport {assert, createBinaryProxy} from '../utils';\n\nconst defaultProps: DefaultProps<RasterLayerProps> = {\n  ...ColumnLayer.defaultProps,\n  extruded: false,\n  diskResolution: 4,\n  vertices: [\n    [-0.5, -0.5],\n    [0.5, -0.5],\n    [0.5, 0.5],\n    [-0.5, 0.5]\n  ]\n};\n\n// Modified ColumnLayer with custom vertex shader\nclass RasterColumnLayer extends ColumnLayer {\n  static layerName = 'RasterColumnLayer';\n\n  getShaders() {\n    const shaders = super.getShaders();\n    return {...shaders, vs};\n  }\n\n  initializeState() {\n    // Only add attributes needed by shader\n    const attributeManager = this.getAttributeManager()!;\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: [255, 255, 255, 255]\n      }\n    });\n  }\n}\n\n/** All properties supported by RasterLayer. */\nexport type RasterLayerProps<DataT = any> = _RasterLayerProps &\n  ColumnLayerProps<DataT> &\n  CompositeLayerProps;\n\n/** Properties added by RasterLayer. */\ntype _RasterLayerProps = {\n  /**\n   * Quadbin index of tile\n   */\n  tileIndex: bigint;\n};\n\n// Adapter layer around RasterColumnLayer that converts data & accessors into correct format\nexport default class RasterLayer<DataT = any, ExtraProps = {}> extends CompositeLayer<\n  Required<RasterLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'RasterLayer';\n  static defaultProps = defaultProps;\n\n  renderLayers(): Layer | null | LayersList {\n    // Rendering props underlying layer\n    const {\n      data,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      tileIndex,\n      updateTriggers\n    } = this.props;\n    if (!data || !tileIndex) return null;\n\n    const {blockWidth, blockHeight} = data as unknown as Raster;\n    assert(\n      blockWidth === blockHeight,\n      `blockWidth (${blockWidth}) must equal blockHeight (${blockHeight})`\n    );\n\n    const [xOffset, yOffset, scale] = quadbinToOffset(tileIndex);\n    const offset = [xOffset, yOffset, scale / blockWidth];\n\n    // Filled Column Layer\n    const CellLayer = this.getSubLayerClass('column', RasterColumnLayer);\n    return new CellLayer(\n      this.props,\n      this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers,\n\n        getElevation: this.getSubLayerAccessor(getElevation),\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth)\n      }),\n      {\n        data: {\n          data, // Pass through data for getSubLayerAccessor()\n          length: blockWidth * blockHeight\n        },\n        offset\n      }\n    );\n  }\n\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    if (typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    // Proxy values back in standard feature format\n    return (object, info) => {\n      const {data, index} = info;\n      const binaryData = (data as unknown as {data: Raster}).data;\n      const proxy = createBinaryProxy(binaryData.cells, index);\n      // @ts-ignore (TS2349) accessor is always function\n      return accessor({properties: proxy}, info);\n    };\n  }\n}\n"],"file":"raster-layer.js"}