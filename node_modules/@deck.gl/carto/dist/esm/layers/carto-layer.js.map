{"version":3,"sources":["../../../src/layers/carto-layer.ts"],"names":["CompositeLayer","log","MVTLayer","fetchLayerData","getDataV2","API_VERSIONS","layerFromTileDataset","COLUMNS_SUPPORT","FORMATS","GEO_COLUMN_SUPPORT","MAP_TYPES","getDefaultCredentials","assert","defaultProps","data","type","onDataLoad","value","onDataError","optional","uniqueIdProperty","credentials","connection","format","formatTiles","clientId","geoColumn","columns","headers","aggregationExp","aggregationResLevel","queryParameters","CartoLayer","initializeState","state","apiVersion","isLoaded","getSubLayers","length","_checkProps","props","localCreds","Object","values","includes","V1","V2","QUERY","TILESET","V3","join","Array","isArray","updateState","oldProps","changeFlags","shouldUpdateData","dataChanged","JSON","stringify","setState","_updateData","source","rest","localConfig","result","TILEJSON","propName","layer","err","_getSubLayerAndProps","_notUsed","propsNoData","tileUrl","URL","tiles","searchParams","get","scheme","renderLayers","updateTriggers","loadOptions","accessToken","fetch","Authorization","getSubLayerProps","id","layerName"],"mappings":"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","sourcesContent":["import {\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  LayerProps,\n  log,\n  UpdateParameters\n} from '@deck.gl/core';\n\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport {fetchLayerData, getDataV2, API_VERSIONS} from '../api';\nimport {CartoAPIError} from '../api/carto-api-error';\nimport {layerFromTileDataset} from '../api/layer-map';\nimport {\n  COLUMNS_SUPPORT,\n  FORMATS,\n  GEO_COLUMN_SUPPORT,\n  MapType,\n  MAP_TYPES,\n  TileFormat,\n  QueryParameters\n} from '../api/maps-api-common';\nimport {\n  ClassicCredentials,\n  CloudNativeCredentials,\n  Credentials,\n  getDefaultCredentials\n} from '../config';\nimport {FetchLayerDataResult, Headers} from '../api/maps-v3-client';\nimport {assert} from '../utils';\n\nconst defaultProps = {\n  // (String, required): data resource to load. table name, sql query or tileset name.\n  data: null,\n  // (Enum (MAP_TYPES), required)\n  type: null,\n  onDataLoad: {type: 'function', value: data => {}},\n  onDataError: {type: 'function', value: null, optional: true},\n  uniqueIdProperty: 'cartodb_id',\n\n  // override carto credentials for the layer, set to null to read from default\n  credentials: null,\n\n  /*********************/\n  /* API v3 PARAMETERS */\n  /**********************/\n  // (String, required): connection name at CARTO platform\n  connection: null,\n\n  // (String, optional): format of data\n  format: null,\n\n  // (String, optional): force format of data for tiles\n  formatTiles: null,\n\n  // (String, optional): clientId identifier used for internal tracing, place here a string to identify the client who is doing the request.\n  clientId: null,\n\n  // (String, optional): name of the `geo_column` in the CARTO platform. Use this override the default column ('geom'), from which the geometry information should be fetched.\n  geoColumn: null,\n\n  // (Array<String>, optional): names of columns to fetch. By default, all columns are fetched.\n  columns: {type: 'array', value: null},\n\n  // (Headers, optional): Custom headers to include in the map instantiation request.\n  headers: {type: 'object', value: {}, optional: true},\n\n  // (String, optional): aggregation SQL expression. Only used for spatial index datasets\n  aggregationExp: null,\n\n  // (Number, optional): aggregation resolution level. Only used for spatial index datasets, defaults to 6 for quadbins, 4 for h3\n  aggregationResLevel: null,\n\n  // (QueryParameters, optional): query parameters to be sent to the server.\n  queryParameters: null\n};\n\n/** All properties supported by CartoLayer. */\nexport type CartoLayerProps = _CartoLayerProps & CompositeLayerProps;\n\n/** Properties added by CartoLayer. */\ntype _CartoLayerProps = {\n  /**\n   * Either a SQL query or a name of dataset/tileset.\n   */\n  data: string;\n\n  /**\n   * Data type.\n   *\n   * Possible values are:\n   *  * `MAP_TYPES.QUERY`, if data is a SQL query.\n   *  * `MAP_TYPES.TILESET`, if data is a tileset name.\n   *  * `MAP_TYPES.TABLE`, if data is a dataset name. Only supported with API v3.\n   */\n  type: MapType;\n\n  /**\n   * Name of the connection registered in the CARTO workspace.\n   *\n   * Required when apiVersion is `API_VERSIONS.V3`.\n   */\n  connection?: string;\n\n  /**\n   * Use to override the default tile data format.\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3`.\n   *\n   * Possible values are: `TILE_FORMATS.BINARY`, `TILE_FORMATS.GEOJSON` and `TILE_FORMATS.MVT`.\n   */\n  formatTiles?: TileFormat;\n\n  /**\n   * Name of the geo_column in the CARTO platform.\n   *\n   * Use this override the default column (`'geom'`), from which the geometry information should be fetched.\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3` and type is `MAP_TYPES.TABLE`.\n   */\n  geoColumn?: string;\n\n  /**\n   * Names of columns to fetch.\n   *\n   * By default, all columns are fetched\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3` and type is `MAP_TYPES.TABLE`.\n   */\n  columns?: string[];\n\n  /**\n   * A string pointing to a unique attribute at the result of the query.\n   *\n   * A unique attribute is needed for highlighting with vector tiles when a feature is split across two or more tiles.\n   */\n  uniqueIdProperty?: string;\n\n  /**\n   * Optional. Overrides the configuration to connect with CARTO.\n   *\n   * @see Credentials\n   */\n  credentials?: Credentials;\n\n  /**\n   * Called when the request to the CARTO Maps API failed.\n   *\n   * By default the CartoAPIError is thrown.\n   */\n  onDataError?: (err: CartoAPIError) => void;\n\n  clientId?: string;\n\n  /** Custom headers to include in the map instantiation request **/\n  headers?: Headers;\n\n  /** Aggregation SQL expression. Only used for spatial index datasets **/\n  aggregationExp?: string;\n\n  /** Aggregation resolution level. Only used for spatial index datasets, defaults to 6 for quadbins, 4 for h3. **/\n  aggregationResLevel?: number;\n\n  /** Query parameters to be sent to the server. **/\n  queryParameters?: QueryParameters;\n};\n\nexport default class CartoLayer<ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<_CartoLayerProps> & ExtraProps\n> {\n  static layerName = 'CartoLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      data: null,\n      apiVersion: null\n    };\n  }\n\n  get isLoaded(): boolean {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  _checkProps(props: CartoLayerProps): void {\n    const {type, credentials, connection, geoColumn, columns} = props;\n    const localCreds = {...getDefaultCredentials(), ...credentials};\n    const {apiVersion} = localCreds;\n\n    log.assert(\n      Object.values(API_VERSIONS).includes(apiVersion),\n      `Invalid apiVersion ${apiVersion}. Use API_VERSIONS enum.`\n    );\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      log.assert(\n        type === MAP_TYPES.QUERY || type === MAP_TYPES.TILESET,\n        `Invalid type ${type}. Use type MAP_TYPES.QUERY or MAP_TYPES.TILESET for apiVersion ${apiVersion}`\n      );\n      log.assert(!connection, `Connection prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!geoColumn, `geoColumn prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!columns, `columns prop is not supported for apiVersion ${apiVersion}`);\n    } else if (apiVersion === API_VERSIONS.V3) {\n      log.assert(connection, 'Missing mandatory connection parameter');\n      log.assert(\n        Object.values(MAP_TYPES).includes(type),\n        `Invalid type ${type}. Use MAP_TYPES enum.`\n      );\n      if (!COLUMNS_SUPPORT.includes(type)) {\n        log.assert(!columns, `columns prop is only supported for types: ${COLUMNS_SUPPORT.join()}`);\n      }\n      if (!GEO_COLUMN_SUPPORT.includes(type)) {\n        log.assert(\n          !geoColumn,\n          `geoColumn prop is only supported for types: ${GEO_COLUMN_SUPPORT.join()}`\n        );\n      }\n      if (columns) {\n        log.assert(Array.isArray(columns), 'columns prop must be an Array');\n      }\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}: UpdateParameters<this>) {\n    this._checkProps(props);\n    const shouldUpdateData =\n      changeFlags.dataChanged ||\n      props.aggregationExp !== oldProps.aggregationExp ||\n      props.aggregationResLevel !== oldProps.aggregationResLevel ||\n      props.connection !== oldProps.connection ||\n      props.geoColumn !== oldProps.geoColumn ||\n      props.formatTiles !== oldProps.formatTiles ||\n      props.type !== oldProps.type ||\n      JSON.stringify(props.columns) !== JSON.stringify(oldProps.columns) ||\n      JSON.stringify(props.credentials) !== JSON.stringify(oldProps.credentials) ||\n      JSON.stringify(props.queryParameters) !== JSON.stringify(oldProps.queryParameters);\n\n    if (shouldUpdateData) {\n      this.setState({data: null, apiVersion: null});\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._updateData();\n    }\n  }\n\n  async _updateData(): Promise<void> {\n    try {\n      const {type, data: source, credentials, connection, ...rest} = this.props;\n      const localConfig = {...getDefaultCredentials(), ...credentials};\n      const {apiVersion} = localConfig;\n\n      let result: Partial<FetchLayerDataResult>;\n      if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n        result = {\n          data: await getDataV2({type, source, credentials: credentials as ClassicCredentials})\n        };\n      } else {\n        result = await fetchLayerData({\n          type,\n          source,\n          credentials: credentials as CloudNativeCredentials,\n          connection,\n          ...rest,\n          // CartoLayer only supports tiled output from v8.8, force data format\n          format: FORMATS.TILEJSON\n        });\n      }\n\n      this.setState({...result, apiVersion});\n\n      this.props.onDataLoad?.(result.data, {\n        propName: 'data',\n        layer: this\n      });\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err as CartoAPIError);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  _getSubLayerAndProps(): [any, LayerProps] {\n    assert(this.state);\n\n    const {data, apiVersion} = this.state;\n\n    const {uniqueIdProperty} = defaultProps;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {data: _notUsed, ...propsNoData} = this.props;\n    // @ts-expect-error 'uniqueIdProperty' is specified more than once, so this usage will be overwritten.\n    const props = {uniqueIdProperty, ...propsNoData};\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      return [MVTLayer, props];\n    }\n\n    /* global URL */\n    const tileUrl = new URL(data.tiles[0]);\n    props.formatTiles =\n      props.formatTiles || (tileUrl.searchParams.get('formatTiles') as TileFormat);\n\n    return [layerFromTileDataset(props.formatTiles, data.scheme, props.type), props];\n  }\n\n  renderLayers(): Layer | null {\n    assert(this.state);\n\n    const {apiVersion, data} = this.state;\n\n    if (!data) return null;\n\n    const {credentials, updateTriggers} = this.props;\n    const loadOptions: any = {};\n    if (apiVersion === API_VERSIONS.V3) {\n      const localConfig = {...getDefaultCredentials(), ...credentials} as CloudNativeCredentials;\n      const {accessToken} = localConfig;\n      loadOptions.fetch = {headers: {Authorization: `Bearer ${accessToken}`}};\n    }\n\n    const [layer, props] = this._getSubLayerAndProps();\n\n    // eslint-disable-next-line new-cap\n    return new layer(\n      props,\n      this.getSubLayerProps({\n        id: `carto-${layer.layerName}`,\n        data,\n        loadOptions,\n        updateTriggers\n      })\n    );\n  }\n}\n"],"file":"carto-layer.js"}