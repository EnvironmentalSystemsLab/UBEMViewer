{"version":3,"sources":["../../../src/layers/quadbin-utils.ts"],"names":["TILE_SIZE","quadbinToOffset","quadbin","x","y","z","scale","quadbinToWorldBounds","coverage","xOffset","yOffset","getQuadbinPolygon","topLeft","bottomRight","w","n","e","s"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,SAAS,GAAG,GAAlB;;AAEO,SAASC,eAAT,CAAyBC,OAAzB,EAAoE;AACzE,oBAAkB,yBAAWA,OAAX,CAAlB;AAAA,MAAOC,CAAP,eAAOA,CAAP;AAAA,MAAUC,CAAV,eAAUA,CAAV;AAAA,MAAaC,CAAb,eAAaA,CAAb;;AACA,MAAMC,KAAK,GAAGN,SAAS,IAAI,KAAKK,CAAT,CAAvB;AACA,SAAO,CAACF,CAAC,GAAGG,KAAL,EAAYN,SAAS,GAAGI,CAAC,GAAGE,KAA5B,EAAmCA,KAAnC,CAAP;AACD;;AAEM,SAASC,oBAAT,CAA8BL,OAA9B,EAA+CM,QAA/C,EAAuF;AAC5F,yBAAkCP,eAAe,CAACC,OAAD,CAAjD;AAAA;AAAA,MAAOO,OAAP;AAAA,MAAgBC,OAAhB;AAAA,MAAyBJ,KAAzB;;AACA,SAAO,CACL,CAACG,OAAD,EAAUC,OAAV,CADK,EAEL,CAACD,OAAO,GAAGD,QAAQ,GAAGF,KAAtB,EAA6BI,OAAO,GAAGF,QAAQ,GAAGF,KAAlD,CAFK,CAAP;AAID;;AAEM,SAASK,iBAAT,CAA2BT,OAA3B,EAAoE;AAAA,MAAxBM,QAAwB,uEAAb,CAAa;;AACzE,8BAA+BD,oBAAoB,CAACL,OAAD,EAAUM,QAAV,CAAnD;AAAA;AAAA,MAAOI,OAAP;AAAA,MAAgBC,WAAhB;;AACA,uBAAe,gCAAcD,OAAd,CAAf;AAAA;AAAA,MAAOE,CAAP;AAAA,MAAUC,CAAV;;AACA,wBAAe,gCAAcF,WAAd,CAAf;AAAA;AAAA,MAAOG,CAAP;AAAA,MAAUC,CAAV;;AACA,SAAO,CAACD,CAAD,EAAID,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaH,CAAb,EAAgBG,CAAhB,EAAmBH,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BD,CAA5B,CAAP;AACD","sourcesContent":["import {worldToLngLat} from '@math.gl/web-mercator';\nimport {cellToTile} from 'quadbin';\n\nconst TILE_SIZE = 512;\n\nexport function quadbinToOffset(quadbin: bigint): [number, number, number] {\n  const {x, y, z} = cellToTile(quadbin);\n  const scale = TILE_SIZE / (1 << z);\n  return [x * scale, TILE_SIZE - y * scale, scale];\n}\n\nexport function quadbinToWorldBounds(quadbin: bigint, coverage: number): [number[], number[]] {\n  const [xOffset, yOffset, scale] = quadbinToOffset(quadbin);\n  return [\n    [xOffset, yOffset],\n    [xOffset + coverage * scale, yOffset - coverage * scale]\n  ];\n}\n\nexport function getQuadbinPolygon(quadbin: bigint, coverage = 1): number[] {\n  const [topLeft, bottomRight] = quadbinToWorldBounds(quadbin, coverage);\n  const [w, n] = worldToLngLat(topLeft);\n  const [e, s] = worldToLngLat(bottomRight);\n  return [e, n, e, s, w, s, w, n, e, n];\n}\n"],"file":"quadbin-utils.js"}