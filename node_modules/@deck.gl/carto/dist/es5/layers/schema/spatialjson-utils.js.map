{"version":3,"sources":["../../../../src/layers/schema/spatialjson-utils.ts"],"names":["binaryToSpatialjson","binary","cells","scheme","count","indices","value","length","spatial","i","id","properties","Object","keys","numericProps","key","push"],"mappings":";;;;;;;;;;;AAAA;;;;;;AAmBO,SAASA,mBAAT,CAA6BC,MAA7B,EAAiE;AACtE,MAAOC,KAAP,GAAwBD,MAAxB,CAAOC,KAAP;AAAA,MAAcC,MAAd,GAAwBF,MAAxB,CAAcE,MAAd;AACA,MAAMC,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAcC,KAAd,CAAoBC,MAAlC;AACA,MAAMC,OAAc,GAAG,EAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAApB,EAA2BK,CAAC,EAA5B,EAAgC;AAC9B,QAAMC,EAAE,GAAGP,MAAM,KAAK,IAAX,GAAkB,0BAAYD,KAAK,CAACG,OAAN,CAAcC,KAAd,CAAoBG,CAApB,CAAZ,CAAlB,GAAwDP,KAAK,CAACG,OAAN,CAAcC,KAAd,CAAoBG,CAApB,CAAnE;;AAEA,QAAME,UAAU,qBAAOT,KAAK,CAACS,UAAN,CAAiBF,CAAjB,CAAP,CAAhB;;AACA,oCAAkBG,MAAM,CAACC,IAAP,CAAYX,KAAK,CAACY,YAAlB,CAAlB,kCAAmD;AAA9C,UAAMC,GAAG,mBAAT;AACHJ,MAAAA,UAAU,CAACI,GAAD,CAAV,GAAkBb,KAAK,CAACY,YAAN,CAAmBC,GAAnB,EAAwBT,KAAxB,CAA8BG,CAA9B,CAAlB;AACD;;AACDD,IAAAA,OAAO,CAACQ,IAAR,CAAa;AAACN,MAAAA,EAAE,EAAFA,EAAD;AAAKC,MAAAA,UAAU,EAAVA;AAAL,KAAb;AACD;;AAED,SAAOH,OAAP;AACD","sourcesContent":["import {bigIntToHex} from 'quadbin';\n\nexport type IndexScheme = 'h3' | 'quadbin';\ntype TypedArray = Float32Array | Float64Array;\n\nexport type Indices = {value: BigUint64Array};\nexport type NumericProps = Record<string, {value: number[] | TypedArray}>;\nexport type Properties = Record<string, string | number | boolean | null>;\nexport type Cells = {\n  indices: Indices;\n  numericProps: NumericProps;\n  properties: Properties[];\n};\nexport type SpatialBinary = {scheme?: IndexScheme; cells: Cells};\nexport type SpatialJson = {\n  id: string | bigint;\n  properties: Properties;\n}[];\n\nexport function binaryToSpatialjson(binary: SpatialBinary): SpatialJson {\n  const {cells, scheme} = binary;\n  const count = cells.indices.value.length;\n  const spatial: any[] = [];\n  for (let i = 0; i < count; i++) {\n    const id = scheme === 'h3' ? bigIntToHex(cells.indices.value[i]) : cells.indices.value[i];\n\n    const properties = {...cells.properties[i]};\n    for (const key of Object.keys(cells.numericProps)) {\n      properties[key] = cells.numericProps[key].value[i];\n    }\n    spatial.push({id, properties});\n  }\n\n  return spatial;\n}\n"],"file":"spatialjson-utils.js"}