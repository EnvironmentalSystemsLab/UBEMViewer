{"version":3,"sources":["../../../../src/layers/schema/carto-spatial-tile.ts"],"names":["IndicesReader","pbf","end","readFields","_readField","value","tag","obj","BigUint64Array","CellsReader","indices","properties","numericProps","read","readVarint","pos","push","PropertiesReader","entry","NumericPropKeyValueReader","key","TileReader","scheme","cells"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;IAIaA,a;;;;;;;WACX,cAAYC,GAAZ,EAAiBC,GAAjB,EAAwC;AACtC,aAAOD,GAAG,CAACE,UAAJ,CAAeH,aAAa,CAACI,UAA7B,EAAyC;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAzC,EAAsDH,GAAtD,CAAP;AACD;;;WACD,oBAA8BI,GAA9B,EAA2CC,GAA3C,EAAgDN,GAAhD,EAAqD;AACnD,UAAIK,GAAG,KAAK,CAAZ,EAAe,mCAAqBE,cAArB,EAAqCP,GAArC,EAA0CM,GAA1C;AAChB;;;;;;;IAWGE,W;;;;;;;WACJ,cAAYR,GAAZ,EAAiBC,GAAjB,EAAsC;AACpC,aAAOD,GAAG,CAACE,UAAJ,CACLM,WAAW,CAACL,UADP,EAEL;AAACM,QAAAA,OAAO,EAAE,IAAV;AAAgBC,QAAAA,UAAU,EAAE,EAA5B;AAAgCC,QAAAA,YAAY,EAAE;AAA9C,OAFK,EAGLV,GAHK,CAAP;AAKD;;;WACD,oBAA8BI,GAA9B,EAA2CC,GAA3C,EAAuDN,GAAvD,EAA4D;AAC1D,UAAIK,GAAG,KAAK,CAAZ,EAAeC,GAAG,CAACG,OAAJ,GAAcV,aAAa,CAACa,IAAd,CAAmBZ,GAAnB,EAAwBA,GAAG,CAACa,UAAJ,KAAmBb,GAAG,CAACc,GAA/C,CAAd,CAAf,KACK,IAAIT,GAAG,KAAK,CAAZ,EAAeC,GAAG,CAACI,UAAJ,CAAeK,IAAf,CAAoBC,4BAAiBJ,IAAjB,CAAsBZ,GAAtB,EAA2BA,GAAG,CAACa,UAAJ,KAAmBb,GAAG,CAACc,GAAlD,CAApB,EAAf,KACA,IAAIT,GAAG,KAAK,CAAZ,EAAe;AAClB,YAAMY,KAAK,GAAGC,qCAA0BN,IAA1B,CAA+BZ,GAA/B,EAAoCA,GAAG,CAACa,UAAJ,KAAmBb,GAAG,CAACc,GAA3D,CAAd;;AACAR,QAAAA,GAAG,CAACK,YAAJ,CAAiBM,KAAK,CAACE,GAAvB,IAA8BF,KAAK,CAACb,KAApC;AACD;AACF;;;;;IAWUgB,U;;;;;;;WACX,cAAYpB,GAAZ,EAAiBC,GAAjB,EAAqC;AACnC,aAAOD,GAAG,CAACE,UAAJ,CAAekB,UAAU,CAACjB,UAA1B,EAAsC;AAACkB,QAAAA,MAAM,EAAE,CAAT;AAAYC,QAAAA,KAAK,EAAE;AAAnB,OAAtC,EAAgErB,GAAhE,CAAP;AACD;;;WACD,oBAA8BI,GAA9B,EAA2CC,GAA3C,EAAsDN,GAAtD,EAA2D;AACzD,UAAIK,GAAG,KAAK,CAAZ,EAAeC,GAAG,CAACe,MAAJ,GAAarB,GAAG,CAACa,UAAJ,EAAb,CAAf,KACK,IAAIR,GAAG,KAAK,CAAZ,EAAeC,GAAG,CAACgB,KAAJ,GAAYd,WAAW,CAACI,IAAZ,CAAiBZ,GAAjB,EAAsBA,GAAG,CAACa,UAAJ,KAAmBb,GAAG,CAACc,GAA7C,CAAZ;AACrB","sourcesContent":["import {readPackedTypedArray} from './fast-pbf';\nimport {Indices, IndexScheme} from './spatialjson-utils';\nimport {NumericProp, NumericPropKeyValueReader, PropertiesReader} from './carto-tile';\n\n// Indices =====================================\n\nexport class IndicesReader {\n  static read(pbf, end?: number): Indices {\n    return pbf.readFields(IndicesReader._readField, {value: []}, end);\n  }\n  static _readField(this: void, tag: number, obj, pbf) {\n    if (tag === 1) readPackedTypedArray(BigUint64Array, pbf, obj);\n  }\n}\n\n// Cells =========================================\n\ninterface Cells {\n  indices: Indices;\n  properties: Record<string, string>[];\n  numericProps: Record<string, NumericProp>;\n}\n\nclass CellsReader {\n  static read(pbf, end?: number): Cells {\n    return pbf.readFields(\n      CellsReader._readField,\n      {indices: null, properties: [], numericProps: {}},\n      end\n    );\n  }\n  static _readField(this: void, tag: number, obj: Cells, pbf) {\n    if (tag === 1) obj.indices = IndicesReader.read(pbf, pbf.readVarint() + pbf.pos);\n    else if (tag === 2) obj.properties.push(PropertiesReader.read(pbf, pbf.readVarint() + pbf.pos));\n    else if (tag === 3) {\n      const entry = NumericPropKeyValueReader.read(pbf, pbf.readVarint() + pbf.pos);\n      obj.numericProps[entry.key] = entry.value;\n    }\n  }\n}\n\n// Tile ========================================\n\n// TODO this type is very similar to SpatialBinary, should align\nexport interface Tile {\n  scheme: IndexScheme;\n  cells: Cells;\n}\n\nexport class TileReader {\n  static read(pbf, end?: number): Tile {\n    return pbf.readFields(TileReader._readField, {scheme: 0, cells: null}, end);\n  }\n  static _readField(this: void, tag: number, obj: Tile, pbf) {\n    if (tag === 1) obj.scheme = pbf.readVarint();\n    else if (tag === 2) obj.cells = CellsReader.read(pbf, pbf.readVarint() + pbf.pos);\n  }\n}\n"],"file":"carto-spatial-tile.js"}