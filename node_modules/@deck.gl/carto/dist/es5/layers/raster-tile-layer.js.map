{"version":3,"sources":["../../../src/layers/raster-tile-layer.ts"],"names":["renderSubLayers","props","tileIndex","tile","index","q","RasterLayer","RasterTileLayer","setState","data","tileJSON","changeFlags","dataChanged","tiles","state","minZoom","parseInt","minzoom","maxZoom","maxzoom","SpatialIndexTileLayer","id","TilesetClass","QuadbinTileset2D","CompositeLayer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAOA;;AACA;;AACA;;;;;;AAEO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAAA;;AACtC,MAAMC,SAAS,kBAAGD,KAAK,CAACE,IAAT,qEAAG,YAAYC,KAAf,sDAAG,kBAAmBC,CAArC;AACA,MAAI,CAACH,SAAL,EAAgB,OAAO,IAAP;AAChB,SAAO,IAAII,oBAAJ,CAAgBL,KAAhB,EAAuB;AAACC,IAAAA,SAAS,EAATA;AAAD,GAAvB,CAAP;AACD,CAJM;;;;IAccK,e;;;;;;;;;;;;;;;;;;;;;WAQnB,2BAAwB;AACtB,WAAKC,QAAL,CAAc;AAACC,QAAAA,IAAI,EAAE,IAAP;AAAaC,QAAAA,QAAQ,EAAE;AAAvB,OAAd;AACD;;;WAED,2BAAyD;AAAA,UAA5CC,WAA4C,QAA5CA,WAA4C;;AACvD,UAAIA,WAAW,CAACC,WAAhB,EAA6B;AAC3B,YAAKH,IAAL,GAAa,KAAKR,KAAlB,CAAKQ,IAAL;AACA,YAAMC,QAAQ,GAAGD,IAAjB;AACAA,QAAAA,IAAI,GAAIC,QAAD,CAAkBG,KAAzB;AACA,aAAKL,QAAL,CAAc;AAACC,UAAAA,IAAI,EAAJA,IAAD;AAAOC,UAAAA,QAAQ,EAARA;AAAP,SAAd;AACD;AACF;;;WAED,wBAA0C;AACxC,wBAAyB,KAAKI,KAA9B;AAAA,UAAOL,IAAP,eAAOA,IAAP;AAAA,UAAaC,QAAb,eAAaA,QAAb;AACA,UAAMK,OAAO,GAAGC,QAAQ,CAACN,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEO,OAAX,CAAxB;AACA,UAAMC,OAAO,GAAGF,QAAQ,CAACN,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAES,OAAX,CAAxB;AACA,aAAO,CACL,IAAIC,8BAAJ,CAA0B,KAAKnB,KAA/B,EAAsC;AACpCoB,QAAAA,EAAE,8BAAuB,KAAKpB,KAAL,CAAWoB,EAAlC,CADkC;AAEpCZ,QAAAA,IAAI,EAAJA,IAFoC;AAIpCa,QAAAA,YAAY,EAAEC,yBAJsB;AAKpCvB,QAAAA,eAAe,EAAfA,eALoC;AAMpCe,QAAAA,OAAO,EAAPA,OANoC;AAOpCG,QAAAA,OAAO,EAAPA;AAPoC,OAAtC,CADK,CAAP;AAWD;;;EAjCOM,oB;;;8BAHWjB,e,eAIA,iB;8BAJAA,e,kBAKG,E","sourcesContent":["import {\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  LayersList,\n  UpdateParameters\n} from '@deck.gl/core';\nimport RasterLayer, {RasterLayerProps} from './raster-layer';\nimport QuadbinTileset2D from './quadbin-tileset-2d';\nimport SpatialIndexTileLayer from './spatial-index-tile-layer';\n\nexport const renderSubLayers = props => {\n  const tileIndex = props.tile?.index?.q;\n  if (!tileIndex) return null;\n  return new RasterLayer(props, {tileIndex});\n};\n\n/** All properties supported by RasterTileLayer. */\nexport type RasterTileLayerProps<DataT = any> = _RasterTileLayerProps<DataT> & CompositeLayerProps;\n\n/** Properties added by RasterTileLayer. */\ntype _RasterTileLayerProps<DataT> = RasterLayerProps<DataT> & {\n  data: string;\n};\n\nexport default class RasterTileLayer<\n  DataT = any,\n  ExtraProps extends {} = {}\n> extends CompositeLayer<ExtraProps & Required<_RasterTileLayerProps<DataT>>> {\n  static layerName = 'RasterTileLayer';\n  static defaultProps = {};\n\n  state!: {tileJSON: any; data: any};\n  initializeState(): void {\n    this.setState({data: null, tileJSON: null});\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>): void {\n    if (changeFlags.dataChanged) {\n      let {data} = this.props;\n      const tileJSON = data;\n      data = (tileJSON as any).tiles;\n      this.setState({data, tileJSON});\n    }\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    const {data, tileJSON} = this.state;\n    const minZoom = parseInt(tileJSON?.minzoom);\n    const maxZoom = parseInt(tileJSON?.maxzoom);\n    return [\n      new SpatialIndexTileLayer(this.props, {\n        id: `raster-tile-layer-${this.props.id}`,\n        data,\n        // TODO: Tileset2D should be generic over TileIndex type\n        TilesetClass: QuadbinTileset2D as any,\n        renderSubLayers,\n        minZoom,\n        maxZoom\n      })\n    ];\n  }\n}\n"],"file":"raster-tile-layer.js"}